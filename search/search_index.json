{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u7b14\u8bb0\u672c","title":"Home"},{"location":"Django/django_blog-01/","text":"p\u4e2a\u5927s \u8fd9\u91cc\u7528\u7684\u662fpython3.7\u548cDjango2.0.\u5047\u8bbe\u5168\u90fd\u5b89\u88c5\u6210\u529f= = \u7136\u540e\u8fd9\u4e2a\u662f\u6211\u505a\u4e2a\u4eba\u7f51\u7ad9\u7684\u4e00\u4e2a\u8fc7\u7a0b=\u3002= \u7136\u540e\u8fd9\u4e2a\u4e5f\u4e0d\u80fd\u7b97\u662f\u4e2a\u6559\u7a0b\u5427=\u3002= \u7136\u540e\u8fd9\u53ea\u662f\u7c97\u7cd9\u7684\u8bb0\u5f55=\u3002= \u6700\u540e\uff0c\u9632\u8131\u53d1\u7528\u9738\u738b=3= \u751f\u6210\u4e00\u4e2a\u5b8c\u6574\u7684django\u9879\u76ee \u521b\u5efaDjango\u9879\u76ee 1 django-admin.py startproject MySite \u6b64\u65f6\uff0c\u4f60\u4f1a\u770b\u5230\u8fd9\u6837\u7684\u6587\u4ef6\u5939\uff1a \u8fd0\u884c\u4e00\u4e0b\u4f60\u7684\u9879\u76ee\uff0c\u770b\u770b\u6709\u6ca1\u6709\u6210\u529f \uff1a 1 ./manage.py runserver \u7ec8\u7aef\u4f1a\u663e\u793a\u8fd9\u4e9b\uff1a \u6709\u7ea2\u5b57\u4e5f\u4e0d\u8981\u62c5\u5fc3\uff0c\u56e0\u4e3a\u8fd8\u6ca1\u6709\u8bbe\u7f6e\u5462\uff01 \u63a5\u4e0b\u6765\u53bb http://127.0.0.1:8000/ \u770b\u4e00\u770b\uff1a \u6210\u529f\u4e86\uff01 ps\uff1a \u5982\u679c\u60f3\u8981\u5916\u90e8\u673a\u5668\uff08\u540c\u4e00\u7f51\u7edc\uff09\u8bbf\u95ee\u672c\u673a\u7684Django\u670d\u52a1\u7684\u8bdd\uff0c\u8981\u5199\u6210 ./manage.py runserver 0.0.0.0:9999 ,\u5e76\u5c06 setting.py \u4e2d\u7684 ALLOWED_HOSTS \u6539\u4e3a ALLOWED_HOSTS = ['*', ] \uff0c\u4e00\u5b9a\u8981\u52a0**\u9017\u53f7**\uff01 - \u6539\u4e00\u4e9b\u914d\u7f6e ps \uff1a\u8fd9\u91cc\u7684\u987a\u5e8f\u53ef\u80fd\u4e0d\u5bf9\u3002= = 1. \u66f4\u6539 /MySite/MySite/settings.py \u4e2d\u7684\u5185\u5bb9 Django\u9ed8\u8ba4\u7684 DATABASES \u662f sqlite \uff0c\u662f\u8fd9\u6837\u7684\uff1a \u8fd9\u91cc\u6211\u662f\u7528\u7684\u662f MySQL \u6570\u636e\u5e93\uff0c\u56e0\u6b64\uff0c\u6211\u8981\u6539\u6210\u8fd9\u6837\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 ```python DATABASES = { default : { ENGINE : django.db.backends.mysql , NAME : MySite , USER : xxx , PASSWORD : xxxxx , HOST : 127.0.0.1 , PORT : 3306 } } ``` font color= red \u8fd9\u91cc\u4e00\u5b9a\u8981\u786e\u4fdd\u6570\u636e\u5e93\u5df2\u7ecf\u5b58\u5728\u4e86\u3002 /font \u5728\u8fd9\u4e4b\u524d\uff0c\u9700\u8981\u521b\u5efa\u6570\u636e\u5e93\uff0c\u50cf\u8fd9\u6837\u6ef4\uff1a ``` create database MySite CHARACTER SET utf8 COLLATE utf8_general_ci; ``` \u8fd8\u8981\u66f4\u6539**\u65f6\u533a**\u548c**\u8bed\u8a00** ![image_1cjveevfspif39o6hm2mnucn3d.png-5.8kB][5] \u5411 /MySite/MySite/__init__.py \u4e2d\u6dfb\u52a0\u5185\u5bb9 1 2 import pymysql pymysql . install_as_MySQLdb () \u6570\u636e\u5e93\u8fc1\u79fb \u9996\u5148\uff0c\u6267\u884c 1 ./manage.py makemigrations \u7136\u540e\uff0c\u6267\u884c 1 ./manage.py migrate \u8fd9\u6837\u5c31\u6210\u529f\u5566\uff5e \u521b\u5efa\u8d85\u7ea7\u7528\u6237 \u521b\u5efa\u8d85\u7ea7\u7528\u6237\u662f\u7528\u6765\u767b\u9646\u5230admin\u540e\u53f0\u7ba1\u7406\u4e2d\u7684 \u6267\u884c 1 ./manage.py createsuperuser \u7136\u540e\u6309\u7167\u63d0\u793a\u586b\u5199\u5c31\u597d\u5566\uff5e **ps\uff1a**\u4e00\u5b9a\u8981\u5148\u8fdb\u884c\u6570\u636e\u5e93\u8fc1\u79fb\uff0c\u518d\u521b\u5efa\u7528\u6237\u3002\u5426\u5219\uff0c\u4f1a\u51fa\u73b0 \u8fdb\u5165admin\u770b\u770b \u5728\u6d4f\u89c8\u5668\u4e2d\u8f93\u5165 http://127.0.0.1:8000/admin \uff0c\u4f1a\u51fa\u73b0\u767b\u5f55\u9875\u9762\uff0c\u6b64\u65f6\u4f1a\u53d1\u73b0\u5168\u90fd\u53d8\u6210\u4e2d\u6587\u4e86\uff0c\u8bf4\u660e\u4e4b\u524d\u7684\u8bbe\u7f6e\u751f\u6548\u4e86\u3002 \u63a5\u4e0b\u6765\uff0c\u5c31\u53ef\u4ee5\u7528\u521a\u521a\u521b\u5efa\u7684\u7528\u6237\u767b\u9646\u4e86\uff0c\u67e5\u770b\u540e\u53f0\u6570\u636e\u4e86\uff01 \u9879\u76ee\u6b63\u5f0f\u5f00\u59cb \u521b\u5efaapp \u6267\u884c ./manage.py startapp Post ,\u67e5\u770b\u9879\u76ee\u7ed3\u6784\uff0c\u5982\u4e0b\uff1a \u5b8c\u6210\u4e0a\u6b65\u64cd\u4f5c\u540e\uff0c\u9700\u8981\u5728 /MySite/MySite/settings.py \u4e2d\u5c06app\u6dfb\u52a0\u8fdb\u53bb\uff1a \u63a5\u4e0b\u6765\uff0c\u9700\u8981\u5728app\u6587\u4ef6\u5939\u4e0b\u6dfb\u52a0 urls.py \uff0c\u7528\u4e8e\u8def\u7531\u6620\u5c04\uff1a \u5728 urls.py \u4e2d\u8fd9\u6837\u5199\uff1a 1 2 3 4 5 app_name = Post # \u8fd9\u91cc\u662f\u4e3a\u4e86url\u53cd\u5411\u89e3\u6790\u7528 urlpatterns = [ # \u8fd9\u91cc\u653e\u6620\u5c04\u7684view ] \u540c\u65f6\uff0c\u5728 /MySite/MySite/urls.py \u4e2d\u9700\u8981\u6dfb\u52a0\u5bf9 Post.urls \u7684\u6620\u5c04\uff1a 1 2 3 4 5 6 7 from django.contrib import admin from django.urls import path , include urlpatterns = [ path ( admin/ , admin . site . urls ), path ( r , include ( Post.urls )), ] \u521b\u5efa\u6a21\u578b \u5728app\u4e0b\u7684 models.py \u521b\u5efa\u81ea\u5df1\u7684\u6a21\u578b\u5c31\u53ef\u4ee5\u5566~ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from django.db import models class Category ( models . Model ): \u5206\u7c7b name = models . CharField ( max_length = 100 ) class Tag ( models . Model ): \u6807\u7b7e name = models . CharField ( max_length = 100 ) class Post ( models . Model ): \u6587\u7ae0 title = models . CharField ( max_length = 100 ) body = models . TextField () created_time = models . DateTimeField () modified_time = models . DateTimeField () excerpt = models . CharField ( max_length = 200 , blank = True ) # \u6587\u7ae0\u6458\u8981\uff0c\u53ef\u4e3a\u7a7a category = models . ForeignKey ( Category , on_delete = True ) # ForeignKey\u8868\u793a1\u5bf9\u591a\uff08\u591a\u4e2apost\u5bf9\u5e941\u4e2acategory\uff09 tags = models . ManyToManyField ( Tag , blank = True ) views = models . PositiveIntegerField ( default = 0 ) # \u9605\u8bfb\u91cf \u7136\u540e\u4e00\u5b9a\u4e0d\u8981\u5fd8\u8bb0\u518d\u8fdb\u884c**\u6570\u636e\u5e93\u8fc1\u79fb**\u554a\uff01\uff01 \u524d\u7aef\u6a21\u7248 \u8fd9\u91cc\u7684\u524d\u7aef\u6a21\u677f\u4f7f\u7528\u7684\u662f\u6a21\u677f\u4e4b\u5bb6\u7684 \u94fe\u63a5?\uff1a http://www.cssmoban.com/tags.asp?n=html5 \u9996\u5148\u521b\u5efatemplates\u76ee\u5f55\uff0c\u7ed3\u6784\u5982\u4e0b\uff1a \u6b64\u65f6\uff0c\u9700\u8981\u5728 setting.py \u4e2d\u6dfb\u52a0\u5173\u4e8e\u6a21\u677f\u7684\u914d\u7f6e\uff1a \u63a5\u4e0b\u6765\u662fstatic\u76ee\u5f55\uff0c\u7ed3\u6784\u5982\u4e0b\uff1a \u663e\u800c\u6613\u89c1\uff0c\u8fd9\u91cc\u653e\u7684\u662f\u4e00\u4e9bcss\u3001js\u6587\u4ef6\u7b49 index\u89c6\u56fe \u9996\u5148\uff0c\u5728 Post/views.py \u4e2d\u5b9e\u73b0 index \u65b9\u6cd5\uff1a 1 2 3 4 5 6 7 def index ( request ): \u4e3b\u9875 :param request: :return: return render ( request = request , template_name = Post/index.html ) request \u4e3a\u8bf7\u6c42\u5bf9\u8c61; template_name \u4e3a\u6e32\u67d3\u7684\u524d\u7aef\u9875\u9762\u7684\u8def\u5f84\u5b57\u7b26\u4e32\uff08\u76f8\u5bf9templates\u76ee\u5f55\uff09 \u7136\u540e\uff0c\u5728 Post/urls.py \u4e2d\u8fdb\u884c\u8def\u7531\u6620\u5c04\uff1a python urlpatterns = [ url(r'^$', views.index, name=\"index\"), ] \u6ce8\u610f\uff1a\u5982\u679c\u4f60\u4e3b\u9875\u7684url\u662f\u7a7a\uff0c\u6b63\u5219\u5fc5\u987b\u5199\u6210**^$** \u6700\u540e\uff0c\u4e00\u5b9a\u8981\u8981\u4fee\u6539\u9759\u6001\u9875\u9762\u4e2d\u5f15\u7528\u7684\u8def\u5f84\u3002 \u5bf9\u4e8eDjango\u6765\u8bf4\uff0c\u53ef\u4ee5\u4f7f\u7528 static \u6807\u7b7e\u3002 \u5728\u9875\u9762\u5f00\u5934\u5f15\u5165 {% load static %} \uff0c\u8fd9\u4e2a\u5bf9\u5e94\u7684\u914d\u7f6e\u4fe1\u606f\u662f \u5e76\u5c06\u9875\u9762\u4e2d\u7684\u8def\u5f84\u6539\u4e3a ps\uff1a \u5bf9\u4e8ecss\u6216\u8005js\u4e2d\u7684\u5f15\u7528\u4e5f\u4e0d\u8981\u5fd8\u4e86\u6539\uff01 \u8fd0\u884c\u4e00\u4e0b\u3002 \u641e\u5b9a\uff01 \u5411\u524d\u7aef\u6e32\u67d3\u53ca\u5206\u9875 \u9996\u5148\uff0c\u66f4\u6539 index() 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 from django.shortcuts import render from django.core.paginator import Paginator from .models import Post def index ( request ): \u4e3b\u9875 :param request: :return: post = Post . objects . all () limit = 3 paginator = Paginator ( post , limit ) page = request . GET . get ( page , 1 ) result = paginator . page ( page ) context = { post_list : result , page : page } return render ( request = request , template_name = Post/index.html , context = context ) \u7136\u540e\u4fee\u6539 index.html \u8fd0\u884c\u770b\u4e00\u4e0b \u641e\u5b9a\uff01 \u66f4\u6539index.html\u4e2d\u7684\u6240\u6709\u8df3\u8f6c\u94fe\u63a5 \u5728\u8fd9\u91cc\uff0c\u6211\u7528\u7684\u662furl\u7684\u53cd\u5411\u89e3\u6790\u3002\u8fd9\u6837\u53ef\u4ee5\u51cf\u8f7b\u540e\u671f\u7ef4\u62a4\u6210\u672c\u3002\u56e0\u6b64\uff0c\u5c31\u9700\u8981\u5728urls.py\u4e2d\u6dfb\u52a0\u5982\u4e0b\u4fe1\u606f\uff1a \u5728html\u4e2d\u4fee\u6539\u6210\u5982\u4e0b\uff1a \u535a\u5ba2\u6587\u7ae0\u9875\u9762 \u522b\u5fd8\u4e86\u6539\u8df3\u8f6c\u94fe\u63a5\uff01\uff01\uff01\uff01 \u6587\u7ae0\u8be6\u60c5\u9875\u548c\u4e3b\u9875\u5927\u4f53\u7ed3\u6784\u662f\u76f8\u4f3c\u7684\uff0c\u56e0\u6b64\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86\u6a21\u7248\u7ee7\u627f\u3002 \u5728\u57fa\u7c7b\u6a21\u7248\u91cc\uff0c\u4f7f\u7528\u8fd9\u4e2a\uff0c\u5c06\u5b50\u7c7b\u6a21\u7248\u9700\u8981\u586b\u5145\u7684\u4f4d\u7f6e\u5360\u4f4d \u7136\u540e\u5728\u5b50\u7c7b\u6a21\u677f\u4e2d\uff0c\u4f7f\u7528\u76f8\u540c\u7684\u6807\u7b7e\u5c06\u586b\u5145\u7684\u5185\u5bb9\u8fdb\u884c\u5305\u88f9 \u6700\u540e\uff0c\u4e0d\u8981\u5fd8\u4e86\u5728\u5b50\u7c7b\u6a21\u677f\u4e2d\u518d\u5199\u4e0a {% extends 'Post/base.html' %} \u548c {% load static %} \u5728 Post/urls.py \u4e2d\u6dfb\u52a0\u8be6\u60c5\u9875\u7684url\uff1a 1 url(r ^detail/post-(?P pk \\d+)$ , views.detail, name= detail ), \u5e76\u6dfb\u52a0detail\u89c6\u56fe 1 2 3 4 5 6 7 def detail ( request , pk ): :param request: :param pk: \u63a5\u6536\u5230\u7684\u6587\u7ae0\u7684\u4e3b\u952eid :return: return render ( request , template_name = Post/blog.html , ) \u8fd0\u884c\u770b\u4e00\u4e0b\u5427\uff01 \u641e\u5b9a\uff01 \u7ee7\u7eed\u5728\u89c6\u56fe\u4e2d\u6dfb\u52a0\u5185\u5bb9\uff0c\u5c06\u5047\u6570\u636e\u6539\u4e3a\u771f\u5b9e\u7684\u6587\u7ae0\u6570\u636e \u5bf9\u4e8e\u591a\u5bf9\u591a\u7684\u5173\u7cfb\u6765\u8bf4\uff0c\u53ef\u4ee5\u5199\u6210\u8fd9\u6837\uff1a \u770b\u4e00\u770b\u6548\u679c\u5427\uff01 \u63a5\u4e0b\u6765\u5c31\u662f\u8ba9\u6211\u53ef\u4ee5\u4e0a\u4f20markdown\u683c\u5f0f\u7684\u6587\u672c\u4e86\uff01 \u8fd9\u4e2a\u6682\u65f6\u5148\u4e0d\u89e3\u51b3\u4e86= =\uff0c\u5c0f\u672c\u672c\u8bb0\u4e0b\u6765 \u6dfb\u52a0\u5206\u7c7b\u680f \u8fd9\u91cc\u4f7f\u7528\u81ea\u5b9a\u4e49\u6a21\u7248\u6807\u7b7e\uff01 \u9996\u5148\uff0c\u5728app\u6587\u4ef6\u5939\u4e0b\uff0c\u521b\u5efa templatetags \u6587\u4ef6\u5939\uff0c\u7136\u540e\u521b\u5efa\u4e00\u4e2apy\u6587\u4ef6\uff0c\u91cc\u9762\u5b9a\u4e49\u6a21\u7248\u6807\u7b7e\uff0c\u76ee\u5f55\u662f\u8fd9\u6837\u6ef4\uff1a \u7136\u540e\u5b9a\u4e49\u4e00\u4e2a\u5206\u7c7b\u76ee\u5f55\u7684\u6807\u7b7e\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 from django import template from ..models import Category register = template . Library () @register.simple_tag def get_categories (): \u5206\u7c7b\u76ee\u5f55\u6807\u7b7e :return: return Category . objects . all () \u5728\u524d\u7aef\u5f15\u7528\u81ea\u5b9a\u4e49\u6807\u7b7e\u65f6\uff0c\u4e00\u5b9a\u8981\u5f00\u5934\u52a0\u8f7d\u81ea\u5b9a\u4e49\u7684\u6a21\u7248\u6807\u7b7e\u6240\u5728\u7684py\u6587\u4ef6\uff0c {% load simple_tags %} ,\u7136\u540e\u518d\u4f7f\u7528\uff1a 1 2 3 4 {% get_categories as category_list %} {% for category in category_list %} li a href = # {{ category.name }} / a / li {% endfor %} \u770b\u4e00\u4e0b\u6548\u679c\u5427\uff01 \u641e\u5b9a\uff01 \u8bc4\u8bba\u529f\u80fd \u8bc4\u8bba\u529f\u80fd\u65b0\u5efa\u4e00\u4e2aapp 1 ./manage.py startapp comment \u4e0d\u8981\u5fd8\u4e86\u628a\u5b83\u6ce8\u518c\u5230django\u4e2d \u521b\u5efa\u6a21\u578b\uff1a 1 2 3 4 5 6 7 8 9 10 from django.db import models class Comment ( models . Model ): name = models . CharField ( max_length = 20 ) email = models . EmailField ( max_length = 50 ) website = models . URLField ( blank = True ) text = models . TextField () created_time = models . DateTimeField ( auto_now_add = True ) post = models . ForeignKey ( Post.Post , on_delete = True ) # \u4e00\u7bc7\u6587\u7ae0\u6709\u591a\u4e2a\u8bc4\u8bba \u4e0d\u8981\u5fd8\u4e86\u6ce8\u518c\u5230admin\u4e2d\u554a\uff01 1 admin.site.register(Comment) \u6700\u91cd\u8981\u7684\u4e00\u6b65\u3002\u6570\u636e\u5e93\u8fc1\u79fb\u554a\uff01\uff01\uff01 \u8fd9\u91cc\u8981\u5b9e\u73b0\u7684\u662f\u70b9\u51fbsubmit\u6309\u94ae\uff0c\u4f1a\u63d0\u4ea4\u8bc4\u8bba \u5728 comment/views.py \u4e2d\u6dfb\u52a0\u89c6\u56fe\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from django.shortcuts import render , redirect from .models import Comment from Post.models import Post from django.urls import reverse def submit_comment ( request , pk ): \u5904\u7406\u63d0\u4ea4\u7684\u8bc4\u8bba :param request: :return: post = request . POST comment = Comment () comment . name = post . get ( name ) comment . email = post . get ( email ) comment . website = post . get ( website ) comment . text = post . get ( message ) comment . post = Post . objects . get ( id = pk ) comment . save () return redirect ( reverse ( Post:detail , kwargs = { pk : pk })) \u66f4\u6539\u524d\u7aef\u9875\u9762\u4e2d\u7684\u8bc4\u8bba\u90e8\u5206\uff1a \u5728 comment/urls.py \u4e2d\u6dfb\u52a0\u6620\u5c04\uff1a \u8bd5\u4e00\u4e0b\u5427\uff01 \u641e\u5b9a\uff01 \u540e\u9762\u518d\u5b8c\u5584\u4e00\u4e0b\u3002\u641e\u6210\u53ef\u4ee5\u56de\u590d\u7684\u5575\uff01\u5c0f\u672c\u672c\u8bb0\u4e0b\u6765\uff5e \u6700\u65b0\u8bc4\u8bba \u8fd9\u4e2a\u4e5f\u5199\u6210\u81ea\u5b9a\u4e49\u6807\u7b7e\u5575\u3002 1 2 3 4 5 6 7 8 @register.simple_tag def get_latest_comment (): \u83b7\u53d6\u6700\u65b0\u8bc4\u8bba :return: comment_list = Comment . objects . all ()[: 5 ] . only ( post , text ) # \u53ea\u83b7\u53d6\u7279\u5b9a\u5b57\u6bb5 return comment_list \u770b\u4e00\u4e0b\u6548\u679c \u641e\u5b9a\uff01 \u9605\u8bfb\u91cf \u5728 Post/models.py \u4e2d\u6dfb\u52a0\uff1a \u5728 Post/views.py \u4e2d\u6dfb\u52a0\uff1a \u5728\u524d\u7aef\u9875\u9762\u6dfb\u52a0\uff1a \u641e\u5b9a\uff01 \u597d\u5566\uff5e\u5230\u8fd9\u91cc\u535a\u5ba2\u57fa\u672c\u6210\u578b\u4e86\u3002\u5c31\u662f\u4e0d\u597d\u770b= =\u3002\u7136\u540e\u540e\u9762\u7ee7\u7eed\u5b8c\u5584\u3002\u5c0f\u672c\u672c\u8bb0\u4e0b\u6765\u3002","title":"Django\u9879\u76ee\u5f00\u53d1\u5b9e\u6218-\u535a\u5ba2"},{"location":"Django/django_blog-01/#django","text":"\u521b\u5efaDjango\u9879\u76ee 1 django-admin.py startproject MySite \u6b64\u65f6\uff0c\u4f60\u4f1a\u770b\u5230\u8fd9\u6837\u7684\u6587\u4ef6\u5939\uff1a \u8fd0\u884c\u4e00\u4e0b\u4f60\u7684\u9879\u76ee\uff0c\u770b\u770b\u6709\u6ca1\u6709\u6210\u529f \uff1a 1 ./manage.py runserver \u7ec8\u7aef\u4f1a\u663e\u793a\u8fd9\u4e9b\uff1a \u6709\u7ea2\u5b57\u4e5f\u4e0d\u8981\u62c5\u5fc3\uff0c\u56e0\u4e3a\u8fd8\u6ca1\u6709\u8bbe\u7f6e\u5462\uff01 \u63a5\u4e0b\u6765\u53bb http://127.0.0.1:8000/ \u770b\u4e00\u770b\uff1a \u6210\u529f\u4e86\uff01 ps\uff1a \u5982\u679c\u60f3\u8981\u5916\u90e8\u673a\u5668\uff08\u540c\u4e00\u7f51\u7edc\uff09\u8bbf\u95ee\u672c\u673a\u7684Django\u670d\u52a1\u7684\u8bdd\uff0c\u8981\u5199\u6210 ./manage.py runserver 0.0.0.0:9999 ,\u5e76\u5c06 setting.py \u4e2d\u7684 ALLOWED_HOSTS \u6539\u4e3a ALLOWED_HOSTS = ['*', ] \uff0c\u4e00\u5b9a\u8981\u52a0**\u9017\u53f7**\uff01 - \u6539\u4e00\u4e9b\u914d\u7f6e ps \uff1a\u8fd9\u91cc\u7684\u987a\u5e8f\u53ef\u80fd\u4e0d\u5bf9\u3002= = 1. \u66f4\u6539 /MySite/MySite/settings.py \u4e2d\u7684\u5185\u5bb9 Django\u9ed8\u8ba4\u7684 DATABASES \u662f sqlite \uff0c\u662f\u8fd9\u6837\u7684\uff1a \u8fd9\u91cc\u6211\u662f\u7528\u7684\u662f MySQL \u6570\u636e\u5e93\uff0c\u56e0\u6b64\uff0c\u6211\u8981\u6539\u6210\u8fd9\u6837\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 ```python DATABASES = { default : { ENGINE : django.db.backends.mysql , NAME : MySite , USER : xxx , PASSWORD : xxxxx , HOST : 127.0.0.1 , PORT : 3306 } } ``` font color= red \u8fd9\u91cc\u4e00\u5b9a\u8981\u786e\u4fdd\u6570\u636e\u5e93\u5df2\u7ecf\u5b58\u5728\u4e86\u3002 /font \u5728\u8fd9\u4e4b\u524d\uff0c\u9700\u8981\u521b\u5efa\u6570\u636e\u5e93\uff0c\u50cf\u8fd9\u6837\u6ef4\uff1a ``` create database MySite CHARACTER SET utf8 COLLATE utf8_general_ci; ``` \u8fd8\u8981\u66f4\u6539**\u65f6\u533a**\u548c**\u8bed\u8a00** ![image_1cjveevfspif39o6hm2mnucn3d.png-5.8kB][5] \u5411 /MySite/MySite/__init__.py \u4e2d\u6dfb\u52a0\u5185\u5bb9 1 2 import pymysql pymysql . install_as_MySQLdb () \u6570\u636e\u5e93\u8fc1\u79fb \u9996\u5148\uff0c\u6267\u884c 1 ./manage.py makemigrations \u7136\u540e\uff0c\u6267\u884c 1 ./manage.py migrate \u8fd9\u6837\u5c31\u6210\u529f\u5566\uff5e \u521b\u5efa\u8d85\u7ea7\u7528\u6237 \u521b\u5efa\u8d85\u7ea7\u7528\u6237\u662f\u7528\u6765\u767b\u9646\u5230admin\u540e\u53f0\u7ba1\u7406\u4e2d\u7684 \u6267\u884c 1 ./manage.py createsuperuser \u7136\u540e\u6309\u7167\u63d0\u793a\u586b\u5199\u5c31\u597d\u5566\uff5e **ps\uff1a**\u4e00\u5b9a\u8981\u5148\u8fdb\u884c\u6570\u636e\u5e93\u8fc1\u79fb\uff0c\u518d\u521b\u5efa\u7528\u6237\u3002\u5426\u5219\uff0c\u4f1a\u51fa\u73b0 \u8fdb\u5165admin\u770b\u770b \u5728\u6d4f\u89c8\u5668\u4e2d\u8f93\u5165 http://127.0.0.1:8000/admin \uff0c\u4f1a\u51fa\u73b0\u767b\u5f55\u9875\u9762\uff0c\u6b64\u65f6\u4f1a\u53d1\u73b0\u5168\u90fd\u53d8\u6210\u4e2d\u6587\u4e86\uff0c\u8bf4\u660e\u4e4b\u524d\u7684\u8bbe\u7f6e\u751f\u6548\u4e86\u3002 \u63a5\u4e0b\u6765\uff0c\u5c31\u53ef\u4ee5\u7528\u521a\u521a\u521b\u5efa\u7684\u7528\u6237\u767b\u9646\u4e86\uff0c\u67e5\u770b\u540e\u53f0\u6570\u636e\u4e86\uff01","title":"\u751f\u6210\u4e00\u4e2a\u5b8c\u6574\u7684django\u9879\u76ee"},{"location":"Django/django_blog-01/#_1","text":"\u521b\u5efaapp \u6267\u884c ./manage.py startapp Post ,\u67e5\u770b\u9879\u76ee\u7ed3\u6784\uff0c\u5982\u4e0b\uff1a \u5b8c\u6210\u4e0a\u6b65\u64cd\u4f5c\u540e\uff0c\u9700\u8981\u5728 /MySite/MySite/settings.py \u4e2d\u5c06app\u6dfb\u52a0\u8fdb\u53bb\uff1a \u63a5\u4e0b\u6765\uff0c\u9700\u8981\u5728app\u6587\u4ef6\u5939\u4e0b\u6dfb\u52a0 urls.py \uff0c\u7528\u4e8e\u8def\u7531\u6620\u5c04\uff1a \u5728 urls.py \u4e2d\u8fd9\u6837\u5199\uff1a 1 2 3 4 5 app_name = Post # \u8fd9\u91cc\u662f\u4e3a\u4e86url\u53cd\u5411\u89e3\u6790\u7528 urlpatterns = [ # \u8fd9\u91cc\u653e\u6620\u5c04\u7684view ] \u540c\u65f6\uff0c\u5728 /MySite/MySite/urls.py \u4e2d\u9700\u8981\u6dfb\u52a0\u5bf9 Post.urls \u7684\u6620\u5c04\uff1a 1 2 3 4 5 6 7 from django.contrib import admin from django.urls import path , include urlpatterns = [ path ( admin/ , admin . site . urls ), path ( r , include ( Post.urls )), ] \u521b\u5efa\u6a21\u578b \u5728app\u4e0b\u7684 models.py \u521b\u5efa\u81ea\u5df1\u7684\u6a21\u578b\u5c31\u53ef\u4ee5\u5566~ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from django.db import models class Category ( models . Model ): \u5206\u7c7b name = models . CharField ( max_length = 100 ) class Tag ( models . Model ): \u6807\u7b7e name = models . CharField ( max_length = 100 ) class Post ( models . Model ): \u6587\u7ae0 title = models . CharField ( max_length = 100 ) body = models . TextField () created_time = models . DateTimeField () modified_time = models . DateTimeField () excerpt = models . CharField ( max_length = 200 , blank = True ) # \u6587\u7ae0\u6458\u8981\uff0c\u53ef\u4e3a\u7a7a category = models . ForeignKey ( Category , on_delete = True ) # ForeignKey\u8868\u793a1\u5bf9\u591a\uff08\u591a\u4e2apost\u5bf9\u5e941\u4e2acategory\uff09 tags = models . ManyToManyField ( Tag , blank = True ) views = models . PositiveIntegerField ( default = 0 ) # \u9605\u8bfb\u91cf \u7136\u540e\u4e00\u5b9a\u4e0d\u8981\u5fd8\u8bb0\u518d\u8fdb\u884c**\u6570\u636e\u5e93\u8fc1\u79fb**\u554a\uff01\uff01 \u524d\u7aef\u6a21\u7248 \u8fd9\u91cc\u7684\u524d\u7aef\u6a21\u677f\u4f7f\u7528\u7684\u662f\u6a21\u677f\u4e4b\u5bb6\u7684 \u94fe\u63a5?\uff1a http://www.cssmoban.com/tags.asp?n=html5 \u9996\u5148\u521b\u5efatemplates\u76ee\u5f55\uff0c\u7ed3\u6784\u5982\u4e0b\uff1a \u6b64\u65f6\uff0c\u9700\u8981\u5728 setting.py \u4e2d\u6dfb\u52a0\u5173\u4e8e\u6a21\u677f\u7684\u914d\u7f6e\uff1a \u63a5\u4e0b\u6765\u662fstatic\u76ee\u5f55\uff0c\u7ed3\u6784\u5982\u4e0b\uff1a \u663e\u800c\u6613\u89c1\uff0c\u8fd9\u91cc\u653e\u7684\u662f\u4e00\u4e9bcss\u3001js\u6587\u4ef6\u7b49 index\u89c6\u56fe \u9996\u5148\uff0c\u5728 Post/views.py \u4e2d\u5b9e\u73b0 index \u65b9\u6cd5\uff1a 1 2 3 4 5 6 7 def index ( request ): \u4e3b\u9875 :param request: :return: return render ( request = request , template_name = Post/index.html ) request \u4e3a\u8bf7\u6c42\u5bf9\u8c61; template_name \u4e3a\u6e32\u67d3\u7684\u524d\u7aef\u9875\u9762\u7684\u8def\u5f84\u5b57\u7b26\u4e32\uff08\u76f8\u5bf9templates\u76ee\u5f55\uff09 \u7136\u540e\uff0c\u5728 Post/urls.py \u4e2d\u8fdb\u884c\u8def\u7531\u6620\u5c04\uff1a python urlpatterns = [ url(r'^$', views.index, name=\"index\"), ] \u6ce8\u610f\uff1a\u5982\u679c\u4f60\u4e3b\u9875\u7684url\u662f\u7a7a\uff0c\u6b63\u5219\u5fc5\u987b\u5199\u6210**^$** \u6700\u540e\uff0c\u4e00\u5b9a\u8981\u8981\u4fee\u6539\u9759\u6001\u9875\u9762\u4e2d\u5f15\u7528\u7684\u8def\u5f84\u3002 \u5bf9\u4e8eDjango\u6765\u8bf4\uff0c\u53ef\u4ee5\u4f7f\u7528 static \u6807\u7b7e\u3002 \u5728\u9875\u9762\u5f00\u5934\u5f15\u5165 {% load static %} \uff0c\u8fd9\u4e2a\u5bf9\u5e94\u7684\u914d\u7f6e\u4fe1\u606f\u662f \u5e76\u5c06\u9875\u9762\u4e2d\u7684\u8def\u5f84\u6539\u4e3a ps\uff1a \u5bf9\u4e8ecss\u6216\u8005js\u4e2d\u7684\u5f15\u7528\u4e5f\u4e0d\u8981\u5fd8\u4e86\u6539\uff01 \u8fd0\u884c\u4e00\u4e0b\u3002 \u641e\u5b9a\uff01 \u5411\u524d\u7aef\u6e32\u67d3\u53ca\u5206\u9875 \u9996\u5148\uff0c\u66f4\u6539 index() 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 from django.shortcuts import render from django.core.paginator import Paginator from .models import Post def index ( request ): \u4e3b\u9875 :param request: :return: post = Post . objects . all () limit = 3 paginator = Paginator ( post , limit ) page = request . GET . get ( page , 1 ) result = paginator . page ( page ) context = { post_list : result , page : page } return render ( request = request , template_name = Post/index.html , context = context ) \u7136\u540e\u4fee\u6539 index.html \u8fd0\u884c\u770b\u4e00\u4e0b \u641e\u5b9a\uff01 \u66f4\u6539index.html\u4e2d\u7684\u6240\u6709\u8df3\u8f6c\u94fe\u63a5 \u5728\u8fd9\u91cc\uff0c\u6211\u7528\u7684\u662furl\u7684\u53cd\u5411\u89e3\u6790\u3002\u8fd9\u6837\u53ef\u4ee5\u51cf\u8f7b\u540e\u671f\u7ef4\u62a4\u6210\u672c\u3002\u56e0\u6b64\uff0c\u5c31\u9700\u8981\u5728urls.py\u4e2d\u6dfb\u52a0\u5982\u4e0b\u4fe1\u606f\uff1a \u5728html\u4e2d\u4fee\u6539\u6210\u5982\u4e0b\uff1a \u535a\u5ba2\u6587\u7ae0\u9875\u9762 \u522b\u5fd8\u4e86\u6539\u8df3\u8f6c\u94fe\u63a5\uff01\uff01\uff01\uff01 \u6587\u7ae0\u8be6\u60c5\u9875\u548c\u4e3b\u9875\u5927\u4f53\u7ed3\u6784\u662f\u76f8\u4f3c\u7684\uff0c\u56e0\u6b64\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86\u6a21\u7248\u7ee7\u627f\u3002 \u5728\u57fa\u7c7b\u6a21\u7248\u91cc\uff0c\u4f7f\u7528\u8fd9\u4e2a\uff0c\u5c06\u5b50\u7c7b\u6a21\u7248\u9700\u8981\u586b\u5145\u7684\u4f4d\u7f6e\u5360\u4f4d \u7136\u540e\u5728\u5b50\u7c7b\u6a21\u677f\u4e2d\uff0c\u4f7f\u7528\u76f8\u540c\u7684\u6807\u7b7e\u5c06\u586b\u5145\u7684\u5185\u5bb9\u8fdb\u884c\u5305\u88f9 \u6700\u540e\uff0c\u4e0d\u8981\u5fd8\u4e86\u5728\u5b50\u7c7b\u6a21\u677f\u4e2d\u518d\u5199\u4e0a {% extends 'Post/base.html' %} \u548c {% load static %} \u5728 Post/urls.py \u4e2d\u6dfb\u52a0\u8be6\u60c5\u9875\u7684url\uff1a 1 url(r ^detail/post-(?P pk \\d+)$ , views.detail, name= detail ), \u5e76\u6dfb\u52a0detail\u89c6\u56fe 1 2 3 4 5 6 7 def detail ( request , pk ): :param request: :param pk: \u63a5\u6536\u5230\u7684\u6587\u7ae0\u7684\u4e3b\u952eid :return: return render ( request , template_name = Post/blog.html , ) \u8fd0\u884c\u770b\u4e00\u4e0b\u5427\uff01 \u641e\u5b9a\uff01 \u7ee7\u7eed\u5728\u89c6\u56fe\u4e2d\u6dfb\u52a0\u5185\u5bb9\uff0c\u5c06\u5047\u6570\u636e\u6539\u4e3a\u771f\u5b9e\u7684\u6587\u7ae0\u6570\u636e \u5bf9\u4e8e\u591a\u5bf9\u591a\u7684\u5173\u7cfb\u6765\u8bf4\uff0c\u53ef\u4ee5\u5199\u6210\u8fd9\u6837\uff1a \u770b\u4e00\u770b\u6548\u679c\u5427\uff01 \u63a5\u4e0b\u6765\u5c31\u662f\u8ba9\u6211\u53ef\u4ee5\u4e0a\u4f20markdown\u683c\u5f0f\u7684\u6587\u672c\u4e86\uff01 \u8fd9\u4e2a\u6682\u65f6\u5148\u4e0d\u89e3\u51b3\u4e86= =\uff0c\u5c0f\u672c\u672c\u8bb0\u4e0b\u6765 \u6dfb\u52a0\u5206\u7c7b\u680f \u8fd9\u91cc\u4f7f\u7528\u81ea\u5b9a\u4e49\u6a21\u7248\u6807\u7b7e\uff01 \u9996\u5148\uff0c\u5728app\u6587\u4ef6\u5939\u4e0b\uff0c\u521b\u5efa templatetags \u6587\u4ef6\u5939\uff0c\u7136\u540e\u521b\u5efa\u4e00\u4e2apy\u6587\u4ef6\uff0c\u91cc\u9762\u5b9a\u4e49\u6a21\u7248\u6807\u7b7e\uff0c\u76ee\u5f55\u662f\u8fd9\u6837\u6ef4\uff1a \u7136\u540e\u5b9a\u4e49\u4e00\u4e2a\u5206\u7c7b\u76ee\u5f55\u7684\u6807\u7b7e\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 from django import template from ..models import Category register = template . Library () @register.simple_tag def get_categories (): \u5206\u7c7b\u76ee\u5f55\u6807\u7b7e :return: return Category . objects . all () \u5728\u524d\u7aef\u5f15\u7528\u81ea\u5b9a\u4e49\u6807\u7b7e\u65f6\uff0c\u4e00\u5b9a\u8981\u5f00\u5934\u52a0\u8f7d\u81ea\u5b9a\u4e49\u7684\u6a21\u7248\u6807\u7b7e\u6240\u5728\u7684py\u6587\u4ef6\uff0c {% load simple_tags %} ,\u7136\u540e\u518d\u4f7f\u7528\uff1a 1 2 3 4 {% get_categories as category_list %} {% for category in category_list %} li a href = # {{ category.name }} / a / li {% endfor %} \u770b\u4e00\u4e0b\u6548\u679c\u5427\uff01 \u641e\u5b9a\uff01 \u8bc4\u8bba\u529f\u80fd \u8bc4\u8bba\u529f\u80fd\u65b0\u5efa\u4e00\u4e2aapp 1 ./manage.py startapp comment \u4e0d\u8981\u5fd8\u4e86\u628a\u5b83\u6ce8\u518c\u5230django\u4e2d \u521b\u5efa\u6a21\u578b\uff1a 1 2 3 4 5 6 7 8 9 10 from django.db import models class Comment ( models . Model ): name = models . CharField ( max_length = 20 ) email = models . EmailField ( max_length = 50 ) website = models . URLField ( blank = True ) text = models . TextField () created_time = models . DateTimeField ( auto_now_add = True ) post = models . ForeignKey ( Post.Post , on_delete = True ) # \u4e00\u7bc7\u6587\u7ae0\u6709\u591a\u4e2a\u8bc4\u8bba \u4e0d\u8981\u5fd8\u4e86\u6ce8\u518c\u5230admin\u4e2d\u554a\uff01 1 admin.site.register(Comment) \u6700\u91cd\u8981\u7684\u4e00\u6b65\u3002\u6570\u636e\u5e93\u8fc1\u79fb\u554a\uff01\uff01\uff01 \u8fd9\u91cc\u8981\u5b9e\u73b0\u7684\u662f\u70b9\u51fbsubmit\u6309\u94ae\uff0c\u4f1a\u63d0\u4ea4\u8bc4\u8bba \u5728 comment/views.py \u4e2d\u6dfb\u52a0\u89c6\u56fe\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from django.shortcuts import render , redirect from .models import Comment from Post.models import Post from django.urls import reverse def submit_comment ( request , pk ): \u5904\u7406\u63d0\u4ea4\u7684\u8bc4\u8bba :param request: :return: post = request . POST comment = Comment () comment . name = post . get ( name ) comment . email = post . get ( email ) comment . website = post . get ( website ) comment . text = post . get ( message ) comment . post = Post . objects . get ( id = pk ) comment . save () return redirect ( reverse ( Post:detail , kwargs = { pk : pk })) \u66f4\u6539\u524d\u7aef\u9875\u9762\u4e2d\u7684\u8bc4\u8bba\u90e8\u5206\uff1a \u5728 comment/urls.py \u4e2d\u6dfb\u52a0\u6620\u5c04\uff1a \u8bd5\u4e00\u4e0b\u5427\uff01 \u641e\u5b9a\uff01 \u540e\u9762\u518d\u5b8c\u5584\u4e00\u4e0b\u3002\u641e\u6210\u53ef\u4ee5\u56de\u590d\u7684\u5575\uff01\u5c0f\u672c\u672c\u8bb0\u4e0b\u6765\uff5e \u6700\u65b0\u8bc4\u8bba \u8fd9\u4e2a\u4e5f\u5199\u6210\u81ea\u5b9a\u4e49\u6807\u7b7e\u5575\u3002 1 2 3 4 5 6 7 8 @register.simple_tag def get_latest_comment (): \u83b7\u53d6\u6700\u65b0\u8bc4\u8bba :return: comment_list = Comment . objects . all ()[: 5 ] . only ( post , text ) # \u53ea\u83b7\u53d6\u7279\u5b9a\u5b57\u6bb5 return comment_list \u770b\u4e00\u4e0b\u6548\u679c \u641e\u5b9a\uff01 \u9605\u8bfb\u91cf \u5728 Post/models.py \u4e2d\u6dfb\u52a0\uff1a \u5728 Post/views.py \u4e2d\u6dfb\u52a0\uff1a \u5728\u524d\u7aef\u9875\u9762\u6dfb\u52a0\uff1a \u641e\u5b9a\uff01 \u597d\u5566\uff5e\u5230\u8fd9\u91cc\u535a\u5ba2\u57fa\u672c\u6210\u578b\u4e86\u3002\u5c31\u662f\u4e0d\u597d\u770b= =\u3002\u7136\u540e\u540e\u9762\u7ee7\u7eed\u5b8c\u5584\u3002\u5c0f\u672c\u672c\u8bb0\u4e0b\u6765\u3002","title":"\u9879\u76ee\u6b63\u5f0f\u5f00\u59cb"},{"location":"Django/drf-01/","text":"\u6ce8\u610f \u8be5\u7b14\u8bb0\u4e3b\u8981\u7ffb\u8bd1\u81ea \u5b98\u65b9\u6587\u6863 \u5165\u95e8 \u9996\u5148\uff0c\u521b\u5efa\u65b0\u9879\u76ee 1 2 django-admin.py startproject tutorial cd tutorial \u5b8c\u6210\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u6211\u4eec\u5c06\u7528\u4e8e\u521b\u5efa\u7b80\u5355Web API\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 1 ./manage.py startapp snippets \u6211\u4eec\u9700\u8981\u6dfb\u52a0\u6211\u4eec\u7684\u65b0 snippets \u5e94\u7528\u548c rest_framework \u5e94\u7528 INSTALLED_APPS \u3002\u8ba9\u6211\u4eec\u7f16\u8f91 tutorial/settings.py \u6587\u4ef6 1 2 3 4 5 INSTALLED_APPS = ( ... rest_framework , snippets.apps.SnippetsConfig , ) \u597d\u7684\uff0c\u6211\u4eec\u5df2\u7ecf\u51c6\u5907\u597d\u4e86\u3002 \u521b\u5efa\u4e00\u4e2a\u6a21\u578b \u9996\u5148\uff0c\u521b\u5efa\u4e00\u4e2a Snippet \u7528\u4e8e\u5b58\u50a8\u4ee3\u7801\u7247\u6bb5\u7684\u7b80\u5355model\u3002\u7ee7\u7eed\u7f16\u8f91 snippets/models.py \u6587\u4ef6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 from django.db import models from pygments.lexers import get_all_lexers from pygments.styles import get_all_styles LEXERS = [ item for item in get_all_lexers () if item [ 1 ]] LANGUAGE_CHOICES = sorted ([( item [ 1 ][ 0 ], item [ 0 ]) for item in LEXERS ]) STYLE_CHOICES = sorted (( item , item ) for item in get_all_styles ()) class Snippet ( models . Model ): created = models . DateTimeField ( auto_now_add = True ) title = models . CharField ( max_length = 100 , blank = True , default = ) code = models . TextField () linenos = models . BooleanField ( default = False ) language = models . CharField ( choices = LANGUAGE_CHOICES , default = python , max_length = 100 ) style = models . CharField ( choices = STYLE_CHOICES , default = friendly , max_length = 100 ) class Meta : ordering = ( created ,) \u6211\u4eec\u8fd8\u9700\u8981\u4e3a\u6211\u4eec\u7684\u4ee3\u7801\u6bb5\u6a21\u578b\u521b\u5efa\u521d\u59cb\u8fc1\u79fb\uff0c\u5e76\u9996\u6b21\u540c\u6b65\u6570\u636e\u5e93\u3002(\u8fd9\u91cc\u4f7f\u7528\u7684\u662f\u9ed8\u8ba4\u7684sqlite) 1 2 ./manage.py makemigrations snippets ./manage.py migrate \u521b\u5efa\u4e00\u4e2aSerializer\u7c7b \u6211\u4eec\u9700\u8981\u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b\u5c31\u662f\u63d0\u4f9b\u4e00\u4e2a\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316 snippet \u5b9e\u4f8b\u7684\u65b9\u6cd5\uff0c\u5e76\u628a\u5b83\u653e\u5230\u4f8b\u5982 json \u4e2d\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u58f0\u660e\u4e0eDjango\u8868\u5355\u975e\u5e38\u76f8\u4f3c\u7684\u5e8f\u5217\u5316\u5668\u6765\u5b8c\u6210\u6b64\u64cd\u4f5c\u3002\u5728 snippets \u540d\u4e3a\u7684\u76ee\u5f55\u4e2d\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6 serializers.py \u5e76\u6dfb\u52a0\u4ee5\u4e0b\u5185\u5bb9\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 from rest_framework import serializers from snippets.models import Snippet , LANGUAGE_CHOICES , STYLE_CHOICES class SnippetSerializer ( serializers . Serializer ): id = serializers . IntegerField ( read_only = True ) title = serializers . CharField ( required = False , allow_blank = True , max_length = 100 ) code = serializers . CharField ( style = { base_template : textarea.html }) linenos = serializers . BooleanField ( required = False ) language = serializers . ChoiceField ( choices = LANGUAGE_CHOICES , default = python ) style = serializers . ChoiceField ( choices = STYLE_CHOICES , default = friendly ) def create ( self , validated_data ): Create and return a new `Snippet` instance, given the validated data. return Snippet . objects . create ( ** validated_data ) def update ( self , instance , validated_data ): Update and return an existing `Snippet` instance, given the validated data. instance . title = validated_data . get ( title , instance . title ) instance . code = validated_data . get ( code , instance . code ) instance . linenos = validated_data . get ( linenos , instance . linenos ) instance . language = validated_data . get ( language , instance . language ) instance . style = validated_data . get ( style , instance . style ) instance . save () return instance serializer\u7c7b\u5b9a\u4e49\u4e86\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u7684\u5b57\u6bb5\u3002 create() \u548c update() \u65b9\u6cd5\u5b9a\u4e49\u4e86\u5728\u8c03\u7528 serializer.save() \u65f6\u5b9e\u4f8b\u5982\u4f55\u88ab\u521b\u5efa\u6216\u4fee\u6539 serializer\u7c7b\u548cdjango Form \u7c7b\u5f88\u76f8\u4f3c\uff0c\u5e76\u4e14\u5728\u5404\u4e2a\u5b57\u6bb5\u4e0a\u5305\u542b\u7c7b\u4f3c\u7684\u9a8c\u8bc1\u6807\u5fd7\uff0c\u4f8b\u5982 required , max_length \u548c default \u3002 \u5b57\u6bb5\u6807\u5fd7\u8fd8\u53ef\u4ee5\u63a7\u5236\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u5e94\u8be5\u5982\u4f55\u663e\u793a\u5e8f\u5217\u5316\u7a0b\u5e8f\uff0c\u4f8b\u5982\u5728\u6e32\u67d3HTML\u65f6\u3002 {'base_template': 'textarea.html'} \u76f8\u5f53\u4e8e\u5728django Form \u7c7b\u4e2d\u4f7f\u7528 widget=widgets.Textarea \u3002\u8fd9\u5bf9\u4e8e\u63a7\u5236\u53ef\u6d4f\u89c8API\u7684\u663e\u793a\u65b9\u5f0f\u7279\u522b\u6709\u7528\uff0c\u6211\u4eec\u5c06\u5728\u672c\u6559\u7a0b\u540e\u9762\u770b\u5230\u3002 \u6211\u4eec\u5b9e\u9645\u4e0a\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 ModelSerializer \u7c7b\u6765\u8282\u7701\u4e00\u4e9b\u65f6\u95f4\uff0c\u6211\u4eec\u7a0d\u540e\u4f1a\u770b\u5230\uff0c\u4f46\u662f\u73b0\u5728\u6211\u4eec\u5148\u4fdd\u6301\u6211\u4eec\u5b9a\u4e49\u7684serializer \u4f7f\u7528Serializers \u5728\u8fdb\u4e00\u6b65\u6df1\u5165\u4e4b\u524d\uff0c\u6211\u4eec\u5c06\u719f\u6089\u5982\u4f55\u4f7f\u7528\u65b0\u7684Serializer\u7c7b\u3002\u8ba9\u6211\u4eec\u8fdb\u5165Django shell\u3002 1 python manage.py shell \u597d\u7684\uff0c\u4e00\u65e6\u6211\u4eec\u5b8c\u6210\u4e86\u4e00\u4e9b\u5bfc\u5165\uff0c\u8ba9\u6211\u4eec\u521b\u5efa\u51e0\u4e2a\u4ee3\u7801\u7247\u6bb5\u6765\u5904\u7406\u3002 1 2 3 4 5 6 7 8 9 10 from snippets.models import Snippet from snippets.serializers import SnippetSerializer from rest_framework.renderers import JSONRenderer from rest_framework.parsers import JSONParser snippet = Snippet ( code = foo = bar \\n ) snippet . save () snippet = Snippet ( code = print hello, world \\n ) snippet . save () \u6211\u4eec\u73b0\u5728\u6709\u51e0\u4e2asnippet\u5b9e\u4f8b\u53ef\u4f9b\u4f7f\u7528\u3002\u6211\u4eec\u6765\u770b\u770b\u5e8f\u5217\u5316\u5176\u4e2d\u4e00\u4e2a\u5b9e\u4f8b\u3002 1 2 3 serializer = SnippetSerializer(snippet) serializer.data # { id : 2, title : u , code : u print hello, world \\n , linenos : False, language : u python , style : u friendly } \u6b64\u65f6\u6211\u4eec\u5df2\u5c06model\u5b9e\u4f8b\u8f6c\u6362\u4e3aPython\u81ea\u7136\u6570\u636e\u7c7b\u578b\u3002\u4e3a\u4e86\u5b8c\u6210\u5e8f\u5217\u5316\u8fc7\u7a0b\uff0c\u6211\u4eec\u5c06\u6570\u636e\u6e32\u67d3\u5230 json \u3002 1 2 3 content = JSONRenderer().render(serializer.data) content # { id : 2, title : , code : print \\\\ hello, world\\\\ \\\\n , linenos : false, language : python , style : friendly } \u53cd\u5e8f\u5217\u5316\u662f\u7c7b\u4f3c\u7684\u3002\u9996\u5148\uff0c\u6211\u4eec\u5c06\u6d41\u89e3\u6790\u4e3aPython\u6570\u636e\u7c7b\u578b... 1 2 3 4 from django.utils.six import BytesIO stream = BytesIO ( content ) data = JSONParser () . parse ( stream ) ...\u7136\u540e\u6211\u4eec\u5c06\u89e3\u6790\u540e\u7684\u6570\u636e\u7c7b\u578b\u8fd8\u539f\u4e3a\u5b8c\u5168\u586b\u5145\u7684\u5bf9\u8c61\u5b9e\u4f8b\u3002 1 2 3 4 5 6 7 serializer = SnippetSerializer(data=data) serializer.is_valid() # True serializer.validated_data # OrderedDict([( title , ), ( code , print hello, world \\n ), ( linenos , False), ( language , python ), ( style , friendly )]) serializer.save() # Snippet: Snippet object \u8bf7\u6ce8\u610fAPI\u4e0e\u8868\u5355\u7684\u76f8\u4f3c\u7a0b\u5ea6\u3002\u5f53\u6211\u4eec\u5f00\u59cb\u7f16\u5199\u4f7f\u7528\u5e8f\u5217\u5316\u5668\u7684\u89c6\u56fe\u65f6\uff0c\u76f8\u4f3c\u6027\u5e94\u8be5\u53d8\u5f97\u66f4\u52a0\u660e\u663e\u3002 \u6211\u4eec\u8fd8\u53ef\u4ee5\u5e8f\u5217\u5316querysets\u800c\u4e0d\u662fmodel\u5b9e\u4f8b\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u53ea\u9700\u5728\u5e8f\u5217\u5316\u7c7b\u4e2d\u6dfb\u52a0\u53c2\u6570 many=True 1 2 3 serializer = SnippetSerializer(Snippet.objects.all(), many=True) serializer.data # [OrderedDict([( id , 1), ( title , u ), ( code , u foo = bar \\n ), ( linenos , False), ( language , python ), ( style , friendly )]), OrderedDict([( id , 2), ( title , u ), ( code , u print hello, world \\n ), ( linenos , False), ( language , python ), ( style , friendly )]), OrderedDict([( id , 3), ( title , u ), ( code , u print hello, world ), ( linenos , False), ( language , python ), ( style , friendly )])] \u4f7f\u7528ModelSerializers SnippetSerializer \u7c7b\u590d\u5236\u4e86\u5f88\u591a\u4fe1\u606f\uff0c\u8fd9\u4e9b\u90fd\u5305\u542b\u5728 Snippet \u6a21\u578b\u4e2d\u3002\u5982\u679c\u6211\u4eec\u80fd\u591f\u4f7f\u4ee3\u7801\u66f4\u7b80\u6d01\uff0c\u90a3\u5c06\u662f\u5f88\u597d\u7684\u3002 \u4e0eDjango\u63d0\u4f9b Form \u7c7b\u548c ModelForm \u7c7b\u7684\u65b9\u5f0f\u76f8\u540c\uff0cREST\u6846\u67b6\u5305\u62ec Serializer \u7c7b\u548c ModelSerializer \u7c7b\u3002 \u8ba9\u6211\u4eec\u770b\u770b\u4f7f\u7528 ModelSerializer \u7c7b\u91cd\u6784\u6211\u4eec\u7684\u5e8f\u5217\u5316\u7a0b\u5e8f\u3002\u518d\u6b21\u6253\u5f00 snippets/serializers.py \u6587\u4ef6\uff0c\u5e76\u4f7f\u7528\u4ee5\u4e0b\u5185\u5bb9\u66ff\u6362 SnippetSerializer \u7c7b\u3002 1 2 3 4 class SnippetSerializer ( serializers . ModelSerializer ): class Meta : model = Snippet fields = ( id , title , code , linenos , language , style ) \u5e8f\u5217\u5316\u7a0b\u5e8f\u5177\u6709\u7684\u4e00\u4e2a\u4e0d\u9519\u7684\u5c5e\u6027\u662f\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u6253\u5370\u5176\u5bf9\u8c61\u6765\u68c0\u67e5\u5e8f\u5217\u5316\u7a0b\u5e8f\u5b9e\u4f8b\u4e2d\u7684\u6240\u6709\u5b57\u6bb5\u3002\u6253\u5f00Django shell python manage.py shell \uff0c\u7136\u540e\u5c1d\u8bd5\u4ee5\u4e0b\u64cd\u4f5c\uff1a 1 2 3 4 5 6 7 8 9 10 from snippets.serializers import SnippetSerializer serializer = SnippetSerializer() print(repr(serializer)) # SnippetSerializer(): # id = IntegerField(label= ID , read_only=True) # title = CharField(allow_blank=True, max_length=100, required=False) # code = CharField(style={ base_template : textarea.html }) # linenos = BooleanField(required=False) # language = ChoiceField(choices=[( Clipper , FoxPro ), ( Cucumber , Gherkin ), ( RobotFramework , RobotFramework ), ( abap , ABAP ), ( ada , Ada )... # style = ChoiceField(choices=[( autumn , autumn ), ( borland , borland ), ( bw , bw ), ( colorful , colorful )... \u91cd\u8981\u7684\u662f\u8981\u8bb0\u4f4f ModelSerializer \u7c7b\u6ca1\u6709\u505a\u4efb\u4f55\u7279\u522b\u795e\u5947\u7684\u4e8b\u60c5\uff0c\u5b83\u4eec\u53ea\u662f\u521b\u5efa\u5e8f\u5217\u5316\u7a0b\u5e8f\u7c7b\u7684\u5feb\u6377\u65b9\u5f0f\uff1a \u81ea\u52a8\u786e\u5b9a\u5b57\u6bb5\u96c6\u3002 create() \u548c update() \u65b9\u6cd5\u7684\u7b80\u5355\u9ed8\u8ba4\u5b9e\u73b0\u3002 \u4f7f\u7528\u6211\u4eec\u7684Serializer\u7f16\u5199\u5e38\u89c4Django\u89c6\u56fe \u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u4f7f\u7528\u6211\u4eec\u7684\u65b0Serializer\u7c7b\u7f16\u5199\u4e00\u4e9bAPI\u89c6\u56fe\u3002\u76ee\u524d\u6211\u4eec\u4e0d\u4f1a\u4f7f\u7528\u4efb\u4f55REST\u6846\u67b6\u7684\u5176\u4ed6\u529f\u80fd\uff0c\u6211\u4eec\u53ea\u4f1a\u5c06\u89c6\u56fe\u5199\u4e3a\u5e38\u89c4Django\u89c6\u56fe\u3002 \u7f16\u8f91 snippets/views.py \u6587\u4ef6\uff0c\u7136\u540e\u6dfb\u52a0\u4ee5\u4e0b\u5185\u5bb9\u3002 1 2 3 4 5 6 from django.http import HttpResponse , JsonResponse from django.views.decorators.csrf import csrf_exempt from rest_framework.renderers import JSONRenderer from rest_framework.parsers import JSONParser from snippets.models import Snippet from snippets.serializers import SnippetSerializer \u6211\u4eecAPI\u7684\u6838\u5fc3\u662f\u4e00\u4e2a\u652f\u6301\u5217\u51fa\u6240\u6709\u5b58\u5728\u7684snippets\uff0c\u6216\u521b\u5efa\u4e00\u4e2a\u65b0snippets\u7684\u89c6\u56fe 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 @csrf_exempt def snippet_list ( request ): List all code snippets, or create a new snippet. if request . method == GET : snippets = Snippet . objects . all () serializer = SnippetSerializer ( snippets , many = True ) return JsonResponse ( serializer . data , safe = False ) elif request . method == POST : data = JSONParser () . parse ( request ) serializer = SnippetSerializer ( data = data ) if serializer . is_valid (): serializer . save () return JsonResponse ( serializer . data , status = 201 ) return JsonResponse ( serializer . errors , status = 400 ) \u8bf7\u6ce8\u610f\uff0c\u56e0\u4e3a\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u4ece\u6ca1\u6709CSRF\u4ee4\u724c\u7684\u5ba2\u6237\u7aefPOST\u5230\u6b64\u89c6\u56fe\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5c06\u89c6\u56fe\u6807\u8bb0\u4e3a csrf_exempt \u3002\u8fd9\u4e0d\u662f\u60a8\u901a\u5e38\u60f3\u8981\u505a\u7684\u4e8b\u60c5\uff0cREST\u6846\u67b6\u89c6\u56fe\u5b9e\u9645\u4e0a\u4f7f\u7528\u7684\u884c\u4e3a\u6bd4\u8fd9\u66f4\u660e\u667a\uff0c\u4f46\u5b83\u73b0\u5728\u53ef\u4ee5\u7528\u4e8e\u6211\u4eec\u7684\u76ee\u7684 \u6211\u4eec\u8fd8\u9700\u8981\u4e00\u4e2a\u4e0e\u5355\u4e2asnippet\u76f8\u5bf9\u5e94\u7684\u89c6\u56fe\uff0c\u5e76\u53ef\u7528\u4e8e\u68c0\u7d22\uff0c\u66f4\u65b0\u6216\u5220\u9664\u4ee3\u7801\u6bb5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 @csrf_exempt def snippet_detail ( request , pk ): Retrieve, update or delete a code snippet. try : snippet = Snippet . objects . get ( pk = pk ) except Snippet . DoesNotExist : return HttpResponse ( status = 404 ) if request . method == GET : serializer = SnippetSerializer ( snippet ) return JsonResponse ( serializer . data ) elif request . method == PUT : data = JSONParser () . parse ( request ) serializer = SnippetSerializer ( snippet , data = data ) if serializer . is_valid (): serializer . save () return JsonResponse ( serializer . data ) return JsonResponse ( serializer . errors , status = 400 ) elif request . method == DELETE : snippet . delete () return HttpResponse ( status = 204 ) \u6700\u540e\uff0c\u6211\u4eec\u9700\u8981\u94fe\u63a5\u8fd9\u4e9b\u89c6\u56fe\u3002\u521b\u5efa snippets/urls.py \u6587\u4ef6\uff1a 1 2 3 4 5 6 7 from django.conf.urls import url from snippets import views urlpatterns = [ url ( r ^snippets/$ , views . snippet_list ), url ( r ^snippets/(?P pk [0-9]+)/$ , views . snippet_detail ), ] \u6211\u4eec\u8fd8\u9700\u8981\u94fe\u63a5tutorial/urls.py\u6587\u4ef6\u4e2d\u7684\u6839urlconf \uff0c\u4ee5\u5305\u542b\u6211\u4eec\u7684snippet\u5e94\u7528\u7684URL\u3002 1 2 3 4 5 from django.conf.urls import url , include urlpatterns = [ url ( r ^ , include ( snippets.urls )), ] \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u76ee\u524d\u8fd8\u6709\u4e00\u4e9b\u6211\u4eec\u6ca1\u6709\u6b63\u786e\u5904\u7406\u7684\u8fb9\u7f18\u60c5\u51b5\u3002\u5982\u679c\u6211\u4eec\u53d1\u9001\u9519\u8bef\u7684json\uff0c\u6216\u8005\u5982\u679c\u4f7f\u7528\u89c6\u56fe\u65e0\u6cd5\u5904\u7406\u7684\u65b9\u6cd5\u53d1\u51fa\u8bf7\u6c42\uff0c\u90a3\u4e48\u6211\u4eec\u6700\u7ec8\u5c06\u5f97\u5230500\u201c\u670d\u52a1\u5668\u9519\u8bef\u201d\u54cd\u5e94\u3002\u4e0d\u8fc7\uff0c\u73b0\u5728\u8fd9\u6837\u505a\u3002 \u6d4b\u8bd5\u6211\u4eec\u5bf9Web API\u7684\u7b2c\u4e00\u6b21\u5c1d\u8bd5 \u73b0\u5728\u6211\u4eec\u542f\u52a8\u670d\u52a1\u5668 \u9000\u51fashell\u3002\u3002\u3002 1 quit() \u5e76\u542f\u52a8django\u670d\u52a1\u5668 1 2 3 4 5 6 7 8 ./manage.py runserver Validating models... 0 errors found Django version 1.11, using settings tutorial.settings Development server is running at http://127.0.0.1:8000/ Quit the server with CONTROL-C. \u5728\u53e6\u4e00\u4e2a\u7ec8\u7aef\u7a97\u53e3\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u6d4b\u8bd5\u670d\u52a1\u5668\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 curl \u6216 httpie \u6d4b\u8bd5\u6211\u4eec\u7684API \u3002Httpie\u662f\u4e00\u4e2a\u7528Python\u7f16\u5199\u7684\u7528\u6237\u53cb\u597d\u7684http\u5ba2\u6237\u7aef\u3002\u6211\u4eec\u5b89\u88c5\u4e00\u4e0b\u5427\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528pip\u5b89\u88c5httpie\uff1a 1 pip install httpie \u6700\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u6240\u6709snippets\u7684\u5217\u8868\u4fe1\u606f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 http http://127.0.0.1:8000/snippets/ HTTP/1.1 200 OK ... [ { id : 1, title : , code : foo = \\ bar\\ \\n , linenos : false, language : python , style : friendly }, { id : 2, title : , code : print \\ hello, world\\ \\n , linenos : false, language : python , style : friendly } ] \u6216\u8005\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5f15\u7528\u5176id\u6765\u83b7\u53d6\u7279\u5b9asnippet\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 http http://127.0.0.1:8000/snippets/2/ HTTP/1.1 200 OK ... { id : 2, title : , code : print \\ hello, world\\ \\n , linenos : false, language : python , style : friendly } \u540c\u6837\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u5728Web\u6d4f\u89c8\u5668\u4e2d\u8bbf\u95ee\u8fd9\u4e9bURL\u6765\u663e\u793a\u76f8\u540c\u200b\u200b\u7684json\u3002 \u6211\u4eec\u73b0\u5728\u5728\u54ea \u5230\u76ee\u524d\u4e3a\u6b62\u6211\u4eec\u505a\u5f97\u8fd8\u4e0d\u9519\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u5e8f\u5217\u5316API\uff0c\u611f\u89c9\u975e\u5e38\u7c7b\u4f3c\u4e8eDjango\u7684Forms API\uff0c\u4ee5\u53ca\u4e00\u4e9b\u5e38\u89c4\u7684Django\u89c6\u56fe\u3002 \u6211\u4eec\u7684API\u89c6\u56fe\u76ee\u524d\u6ca1\u6709\u505a\u4efb\u4f55\u7279\u522b\u7279\u522b\u7684\u4e8b\u60c5\uff0c\u9664\u4e86\u63d0\u4f9bjson\u54cd\u5e94\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u4e9b\u6211\u4eec\u4ecd\u60f3\u6e05\u7406\u7684\u9519\u8bef\u5904\u7406\u8fb9\u7f18\u60c5\u51b5\uff0c\u4f46\u5b83\u662f\u4e00\u4e2a\u6b63\u5e38\u8fd0\u884c\u7684Web API\u3002 \u6211\u4eec\u5c06\u5728\u672c\u6559\u7a0b\u7684\u7b2c2\u90e8\u5206\u4e2d\u770b\u5230\u5982\u4f55\u5f00\u59cb\u6539\u8fdb\u3002","title":"django-rest-framework\u6587\u6863\u6574\u7406-Serialization\uff08\u4e00\uff09"},{"location":"Django/drf-01/#_1","text":"\u9996\u5148\uff0c\u521b\u5efa\u65b0\u9879\u76ee 1 2 django-admin.py startproject tutorial cd tutorial \u5b8c\u6210\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u6211\u4eec\u5c06\u7528\u4e8e\u521b\u5efa\u7b80\u5355Web API\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 1 ./manage.py startapp snippets \u6211\u4eec\u9700\u8981\u6dfb\u52a0\u6211\u4eec\u7684\u65b0 snippets \u5e94\u7528\u548c rest_framework \u5e94\u7528 INSTALLED_APPS \u3002\u8ba9\u6211\u4eec\u7f16\u8f91 tutorial/settings.py \u6587\u4ef6 1 2 3 4 5 INSTALLED_APPS = ( ... rest_framework , snippets.apps.SnippetsConfig , ) \u597d\u7684\uff0c\u6211\u4eec\u5df2\u7ecf\u51c6\u5907\u597d\u4e86\u3002","title":"\u5165\u95e8"},{"location":"Django/drf-01/#_2","text":"\u9996\u5148\uff0c\u521b\u5efa\u4e00\u4e2a Snippet \u7528\u4e8e\u5b58\u50a8\u4ee3\u7801\u7247\u6bb5\u7684\u7b80\u5355model\u3002\u7ee7\u7eed\u7f16\u8f91 snippets/models.py \u6587\u4ef6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 from django.db import models from pygments.lexers import get_all_lexers from pygments.styles import get_all_styles LEXERS = [ item for item in get_all_lexers () if item [ 1 ]] LANGUAGE_CHOICES = sorted ([( item [ 1 ][ 0 ], item [ 0 ]) for item in LEXERS ]) STYLE_CHOICES = sorted (( item , item ) for item in get_all_styles ()) class Snippet ( models . Model ): created = models . DateTimeField ( auto_now_add = True ) title = models . CharField ( max_length = 100 , blank = True , default = ) code = models . TextField () linenos = models . BooleanField ( default = False ) language = models . CharField ( choices = LANGUAGE_CHOICES , default = python , max_length = 100 ) style = models . CharField ( choices = STYLE_CHOICES , default = friendly , max_length = 100 ) class Meta : ordering = ( created ,) \u6211\u4eec\u8fd8\u9700\u8981\u4e3a\u6211\u4eec\u7684\u4ee3\u7801\u6bb5\u6a21\u578b\u521b\u5efa\u521d\u59cb\u8fc1\u79fb\uff0c\u5e76\u9996\u6b21\u540c\u6b65\u6570\u636e\u5e93\u3002(\u8fd9\u91cc\u4f7f\u7528\u7684\u662f\u9ed8\u8ba4\u7684sqlite) 1 2 ./manage.py makemigrations snippets ./manage.py migrate","title":"\u521b\u5efa\u4e00\u4e2a\u6a21\u578b"},{"location":"Django/drf-01/#serializer","text":"\u6211\u4eec\u9700\u8981\u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b\u5c31\u662f\u63d0\u4f9b\u4e00\u4e2a\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316 snippet \u5b9e\u4f8b\u7684\u65b9\u6cd5\uff0c\u5e76\u628a\u5b83\u653e\u5230\u4f8b\u5982 json \u4e2d\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u58f0\u660e\u4e0eDjango\u8868\u5355\u975e\u5e38\u76f8\u4f3c\u7684\u5e8f\u5217\u5316\u5668\u6765\u5b8c\u6210\u6b64\u64cd\u4f5c\u3002\u5728 snippets \u540d\u4e3a\u7684\u76ee\u5f55\u4e2d\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6 serializers.py \u5e76\u6dfb\u52a0\u4ee5\u4e0b\u5185\u5bb9\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 from rest_framework import serializers from snippets.models import Snippet , LANGUAGE_CHOICES , STYLE_CHOICES class SnippetSerializer ( serializers . Serializer ): id = serializers . IntegerField ( read_only = True ) title = serializers . CharField ( required = False , allow_blank = True , max_length = 100 ) code = serializers . CharField ( style = { base_template : textarea.html }) linenos = serializers . BooleanField ( required = False ) language = serializers . ChoiceField ( choices = LANGUAGE_CHOICES , default = python ) style = serializers . ChoiceField ( choices = STYLE_CHOICES , default = friendly ) def create ( self , validated_data ): Create and return a new `Snippet` instance, given the validated data. return Snippet . objects . create ( ** validated_data ) def update ( self , instance , validated_data ): Update and return an existing `Snippet` instance, given the validated data. instance . title = validated_data . get ( title , instance . title ) instance . code = validated_data . get ( code , instance . code ) instance . linenos = validated_data . get ( linenos , instance . linenos ) instance . language = validated_data . get ( language , instance . language ) instance . style = validated_data . get ( style , instance . style ) instance . save () return instance serializer\u7c7b\u5b9a\u4e49\u4e86\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u7684\u5b57\u6bb5\u3002 create() \u548c update() \u65b9\u6cd5\u5b9a\u4e49\u4e86\u5728\u8c03\u7528 serializer.save() \u65f6\u5b9e\u4f8b\u5982\u4f55\u88ab\u521b\u5efa\u6216\u4fee\u6539 serializer\u7c7b\u548cdjango Form \u7c7b\u5f88\u76f8\u4f3c\uff0c\u5e76\u4e14\u5728\u5404\u4e2a\u5b57\u6bb5\u4e0a\u5305\u542b\u7c7b\u4f3c\u7684\u9a8c\u8bc1\u6807\u5fd7\uff0c\u4f8b\u5982 required , max_length \u548c default \u3002 \u5b57\u6bb5\u6807\u5fd7\u8fd8\u53ef\u4ee5\u63a7\u5236\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u5e94\u8be5\u5982\u4f55\u663e\u793a\u5e8f\u5217\u5316\u7a0b\u5e8f\uff0c\u4f8b\u5982\u5728\u6e32\u67d3HTML\u65f6\u3002 {'base_template': 'textarea.html'} \u76f8\u5f53\u4e8e\u5728django Form \u7c7b\u4e2d\u4f7f\u7528 widget=widgets.Textarea \u3002\u8fd9\u5bf9\u4e8e\u63a7\u5236\u53ef\u6d4f\u89c8API\u7684\u663e\u793a\u65b9\u5f0f\u7279\u522b\u6709\u7528\uff0c\u6211\u4eec\u5c06\u5728\u672c\u6559\u7a0b\u540e\u9762\u770b\u5230\u3002 \u6211\u4eec\u5b9e\u9645\u4e0a\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 ModelSerializer \u7c7b\u6765\u8282\u7701\u4e00\u4e9b\u65f6\u95f4\uff0c\u6211\u4eec\u7a0d\u540e\u4f1a\u770b\u5230\uff0c\u4f46\u662f\u73b0\u5728\u6211\u4eec\u5148\u4fdd\u6301\u6211\u4eec\u5b9a\u4e49\u7684serializer","title":"\u521b\u5efa\u4e00\u4e2aSerializer\u7c7b"},{"location":"Django/drf-01/#serializers","text":"\u5728\u8fdb\u4e00\u6b65\u6df1\u5165\u4e4b\u524d\uff0c\u6211\u4eec\u5c06\u719f\u6089\u5982\u4f55\u4f7f\u7528\u65b0\u7684Serializer\u7c7b\u3002\u8ba9\u6211\u4eec\u8fdb\u5165Django shell\u3002 1 python manage.py shell \u597d\u7684\uff0c\u4e00\u65e6\u6211\u4eec\u5b8c\u6210\u4e86\u4e00\u4e9b\u5bfc\u5165\uff0c\u8ba9\u6211\u4eec\u521b\u5efa\u51e0\u4e2a\u4ee3\u7801\u7247\u6bb5\u6765\u5904\u7406\u3002 1 2 3 4 5 6 7 8 9 10 from snippets.models import Snippet from snippets.serializers import SnippetSerializer from rest_framework.renderers import JSONRenderer from rest_framework.parsers import JSONParser snippet = Snippet ( code = foo = bar \\n ) snippet . save () snippet = Snippet ( code = print hello, world \\n ) snippet . save () \u6211\u4eec\u73b0\u5728\u6709\u51e0\u4e2asnippet\u5b9e\u4f8b\u53ef\u4f9b\u4f7f\u7528\u3002\u6211\u4eec\u6765\u770b\u770b\u5e8f\u5217\u5316\u5176\u4e2d\u4e00\u4e2a\u5b9e\u4f8b\u3002 1 2 3 serializer = SnippetSerializer(snippet) serializer.data # { id : 2, title : u , code : u print hello, world \\n , linenos : False, language : u python , style : u friendly } \u6b64\u65f6\u6211\u4eec\u5df2\u5c06model\u5b9e\u4f8b\u8f6c\u6362\u4e3aPython\u81ea\u7136\u6570\u636e\u7c7b\u578b\u3002\u4e3a\u4e86\u5b8c\u6210\u5e8f\u5217\u5316\u8fc7\u7a0b\uff0c\u6211\u4eec\u5c06\u6570\u636e\u6e32\u67d3\u5230 json \u3002 1 2 3 content = JSONRenderer().render(serializer.data) content # { id : 2, title : , code : print \\\\ hello, world\\\\ \\\\n , linenos : false, language : python , style : friendly } \u53cd\u5e8f\u5217\u5316\u662f\u7c7b\u4f3c\u7684\u3002\u9996\u5148\uff0c\u6211\u4eec\u5c06\u6d41\u89e3\u6790\u4e3aPython\u6570\u636e\u7c7b\u578b... 1 2 3 4 from django.utils.six import BytesIO stream = BytesIO ( content ) data = JSONParser () . parse ( stream ) ...\u7136\u540e\u6211\u4eec\u5c06\u89e3\u6790\u540e\u7684\u6570\u636e\u7c7b\u578b\u8fd8\u539f\u4e3a\u5b8c\u5168\u586b\u5145\u7684\u5bf9\u8c61\u5b9e\u4f8b\u3002 1 2 3 4 5 6 7 serializer = SnippetSerializer(data=data) serializer.is_valid() # True serializer.validated_data # OrderedDict([( title , ), ( code , print hello, world \\n ), ( linenos , False), ( language , python ), ( style , friendly )]) serializer.save() # Snippet: Snippet object \u8bf7\u6ce8\u610fAPI\u4e0e\u8868\u5355\u7684\u76f8\u4f3c\u7a0b\u5ea6\u3002\u5f53\u6211\u4eec\u5f00\u59cb\u7f16\u5199\u4f7f\u7528\u5e8f\u5217\u5316\u5668\u7684\u89c6\u56fe\u65f6\uff0c\u76f8\u4f3c\u6027\u5e94\u8be5\u53d8\u5f97\u66f4\u52a0\u660e\u663e\u3002 \u6211\u4eec\u8fd8\u53ef\u4ee5\u5e8f\u5217\u5316querysets\u800c\u4e0d\u662fmodel\u5b9e\u4f8b\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u53ea\u9700\u5728\u5e8f\u5217\u5316\u7c7b\u4e2d\u6dfb\u52a0\u53c2\u6570 many=True 1 2 3 serializer = SnippetSerializer(Snippet.objects.all(), many=True) serializer.data # [OrderedDict([( id , 1), ( title , u ), ( code , u foo = bar \\n ), ( linenos , False), ( language , python ), ( style , friendly )]), OrderedDict([( id , 2), ( title , u ), ( code , u print hello, world \\n ), ( linenos , False), ( language , python ), ( style , friendly )]), OrderedDict([( id , 3), ( title , u ), ( code , u print hello, world ), ( linenos , False), ( language , python ), ( style , friendly )])]","title":"\u4f7f\u7528Serializers"},{"location":"Django/drf-01/#modelserializers","text":"SnippetSerializer \u7c7b\u590d\u5236\u4e86\u5f88\u591a\u4fe1\u606f\uff0c\u8fd9\u4e9b\u90fd\u5305\u542b\u5728 Snippet \u6a21\u578b\u4e2d\u3002\u5982\u679c\u6211\u4eec\u80fd\u591f\u4f7f\u4ee3\u7801\u66f4\u7b80\u6d01\uff0c\u90a3\u5c06\u662f\u5f88\u597d\u7684\u3002 \u4e0eDjango\u63d0\u4f9b Form \u7c7b\u548c ModelForm \u7c7b\u7684\u65b9\u5f0f\u76f8\u540c\uff0cREST\u6846\u67b6\u5305\u62ec Serializer \u7c7b\u548c ModelSerializer \u7c7b\u3002 \u8ba9\u6211\u4eec\u770b\u770b\u4f7f\u7528 ModelSerializer \u7c7b\u91cd\u6784\u6211\u4eec\u7684\u5e8f\u5217\u5316\u7a0b\u5e8f\u3002\u518d\u6b21\u6253\u5f00 snippets/serializers.py \u6587\u4ef6\uff0c\u5e76\u4f7f\u7528\u4ee5\u4e0b\u5185\u5bb9\u66ff\u6362 SnippetSerializer \u7c7b\u3002 1 2 3 4 class SnippetSerializer ( serializers . ModelSerializer ): class Meta : model = Snippet fields = ( id , title , code , linenos , language , style ) \u5e8f\u5217\u5316\u7a0b\u5e8f\u5177\u6709\u7684\u4e00\u4e2a\u4e0d\u9519\u7684\u5c5e\u6027\u662f\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u6253\u5370\u5176\u5bf9\u8c61\u6765\u68c0\u67e5\u5e8f\u5217\u5316\u7a0b\u5e8f\u5b9e\u4f8b\u4e2d\u7684\u6240\u6709\u5b57\u6bb5\u3002\u6253\u5f00Django shell python manage.py shell \uff0c\u7136\u540e\u5c1d\u8bd5\u4ee5\u4e0b\u64cd\u4f5c\uff1a 1 2 3 4 5 6 7 8 9 10 from snippets.serializers import SnippetSerializer serializer = SnippetSerializer() print(repr(serializer)) # SnippetSerializer(): # id = IntegerField(label= ID , read_only=True) # title = CharField(allow_blank=True, max_length=100, required=False) # code = CharField(style={ base_template : textarea.html }) # linenos = BooleanField(required=False) # language = ChoiceField(choices=[( Clipper , FoxPro ), ( Cucumber , Gherkin ), ( RobotFramework , RobotFramework ), ( abap , ABAP ), ( ada , Ada )... # style = ChoiceField(choices=[( autumn , autumn ), ( borland , borland ), ( bw , bw ), ( colorful , colorful )... \u91cd\u8981\u7684\u662f\u8981\u8bb0\u4f4f ModelSerializer \u7c7b\u6ca1\u6709\u505a\u4efb\u4f55\u7279\u522b\u795e\u5947\u7684\u4e8b\u60c5\uff0c\u5b83\u4eec\u53ea\u662f\u521b\u5efa\u5e8f\u5217\u5316\u7a0b\u5e8f\u7c7b\u7684\u5feb\u6377\u65b9\u5f0f\uff1a \u81ea\u52a8\u786e\u5b9a\u5b57\u6bb5\u96c6\u3002 create() \u548c update() \u65b9\u6cd5\u7684\u7b80\u5355\u9ed8\u8ba4\u5b9e\u73b0\u3002","title":"\u4f7f\u7528ModelSerializers"},{"location":"Django/drf-01/#serializerdjango","text":"\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u4f7f\u7528\u6211\u4eec\u7684\u65b0Serializer\u7c7b\u7f16\u5199\u4e00\u4e9bAPI\u89c6\u56fe\u3002\u76ee\u524d\u6211\u4eec\u4e0d\u4f1a\u4f7f\u7528\u4efb\u4f55REST\u6846\u67b6\u7684\u5176\u4ed6\u529f\u80fd\uff0c\u6211\u4eec\u53ea\u4f1a\u5c06\u89c6\u56fe\u5199\u4e3a\u5e38\u89c4Django\u89c6\u56fe\u3002 \u7f16\u8f91 snippets/views.py \u6587\u4ef6\uff0c\u7136\u540e\u6dfb\u52a0\u4ee5\u4e0b\u5185\u5bb9\u3002 1 2 3 4 5 6 from django.http import HttpResponse , JsonResponse from django.views.decorators.csrf import csrf_exempt from rest_framework.renderers import JSONRenderer from rest_framework.parsers import JSONParser from snippets.models import Snippet from snippets.serializers import SnippetSerializer \u6211\u4eecAPI\u7684\u6838\u5fc3\u662f\u4e00\u4e2a\u652f\u6301\u5217\u51fa\u6240\u6709\u5b58\u5728\u7684snippets\uff0c\u6216\u521b\u5efa\u4e00\u4e2a\u65b0snippets\u7684\u89c6\u56fe 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 @csrf_exempt def snippet_list ( request ): List all code snippets, or create a new snippet. if request . method == GET : snippets = Snippet . objects . all () serializer = SnippetSerializer ( snippets , many = True ) return JsonResponse ( serializer . data , safe = False ) elif request . method == POST : data = JSONParser () . parse ( request ) serializer = SnippetSerializer ( data = data ) if serializer . is_valid (): serializer . save () return JsonResponse ( serializer . data , status = 201 ) return JsonResponse ( serializer . errors , status = 400 ) \u8bf7\u6ce8\u610f\uff0c\u56e0\u4e3a\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u4ece\u6ca1\u6709CSRF\u4ee4\u724c\u7684\u5ba2\u6237\u7aefPOST\u5230\u6b64\u89c6\u56fe\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5c06\u89c6\u56fe\u6807\u8bb0\u4e3a csrf_exempt \u3002\u8fd9\u4e0d\u662f\u60a8\u901a\u5e38\u60f3\u8981\u505a\u7684\u4e8b\u60c5\uff0cREST\u6846\u67b6\u89c6\u56fe\u5b9e\u9645\u4e0a\u4f7f\u7528\u7684\u884c\u4e3a\u6bd4\u8fd9\u66f4\u660e\u667a\uff0c\u4f46\u5b83\u73b0\u5728\u53ef\u4ee5\u7528\u4e8e\u6211\u4eec\u7684\u76ee\u7684 \u6211\u4eec\u8fd8\u9700\u8981\u4e00\u4e2a\u4e0e\u5355\u4e2asnippet\u76f8\u5bf9\u5e94\u7684\u89c6\u56fe\uff0c\u5e76\u53ef\u7528\u4e8e\u68c0\u7d22\uff0c\u66f4\u65b0\u6216\u5220\u9664\u4ee3\u7801\u6bb5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 @csrf_exempt def snippet_detail ( request , pk ): Retrieve, update or delete a code snippet. try : snippet = Snippet . objects . get ( pk = pk ) except Snippet . DoesNotExist : return HttpResponse ( status = 404 ) if request . method == GET : serializer = SnippetSerializer ( snippet ) return JsonResponse ( serializer . data ) elif request . method == PUT : data = JSONParser () . parse ( request ) serializer = SnippetSerializer ( snippet , data = data ) if serializer . is_valid (): serializer . save () return JsonResponse ( serializer . data ) return JsonResponse ( serializer . errors , status = 400 ) elif request . method == DELETE : snippet . delete () return HttpResponse ( status = 204 ) \u6700\u540e\uff0c\u6211\u4eec\u9700\u8981\u94fe\u63a5\u8fd9\u4e9b\u89c6\u56fe\u3002\u521b\u5efa snippets/urls.py \u6587\u4ef6\uff1a 1 2 3 4 5 6 7 from django.conf.urls import url from snippets import views urlpatterns = [ url ( r ^snippets/$ , views . snippet_list ), url ( r ^snippets/(?P pk [0-9]+)/$ , views . snippet_detail ), ] \u6211\u4eec\u8fd8\u9700\u8981\u94fe\u63a5tutorial/urls.py\u6587\u4ef6\u4e2d\u7684\u6839urlconf \uff0c\u4ee5\u5305\u542b\u6211\u4eec\u7684snippet\u5e94\u7528\u7684URL\u3002 1 2 3 4 5 from django.conf.urls import url , include urlpatterns = [ url ( r ^ , include ( snippets.urls )), ] \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u76ee\u524d\u8fd8\u6709\u4e00\u4e9b\u6211\u4eec\u6ca1\u6709\u6b63\u786e\u5904\u7406\u7684\u8fb9\u7f18\u60c5\u51b5\u3002\u5982\u679c\u6211\u4eec\u53d1\u9001\u9519\u8bef\u7684json\uff0c\u6216\u8005\u5982\u679c\u4f7f\u7528\u89c6\u56fe\u65e0\u6cd5\u5904\u7406\u7684\u65b9\u6cd5\u53d1\u51fa\u8bf7\u6c42\uff0c\u90a3\u4e48\u6211\u4eec\u6700\u7ec8\u5c06\u5f97\u5230500\u201c\u670d\u52a1\u5668\u9519\u8bef\u201d\u54cd\u5e94\u3002\u4e0d\u8fc7\uff0c\u73b0\u5728\u8fd9\u6837\u505a\u3002","title":"\u4f7f\u7528\u6211\u4eec\u7684Serializer\u7f16\u5199\u5e38\u89c4Django\u89c6\u56fe"},{"location":"Django/drf-01/#web-api","text":"\u73b0\u5728\u6211\u4eec\u542f\u52a8\u670d\u52a1\u5668 \u9000\u51fashell\u3002\u3002\u3002 1 quit() \u5e76\u542f\u52a8django\u670d\u52a1\u5668 1 2 3 4 5 6 7 8 ./manage.py runserver Validating models... 0 errors found Django version 1.11, using settings tutorial.settings Development server is running at http://127.0.0.1:8000/ Quit the server with CONTROL-C. \u5728\u53e6\u4e00\u4e2a\u7ec8\u7aef\u7a97\u53e3\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u6d4b\u8bd5\u670d\u52a1\u5668\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 curl \u6216 httpie \u6d4b\u8bd5\u6211\u4eec\u7684API \u3002Httpie\u662f\u4e00\u4e2a\u7528Python\u7f16\u5199\u7684\u7528\u6237\u53cb\u597d\u7684http\u5ba2\u6237\u7aef\u3002\u6211\u4eec\u5b89\u88c5\u4e00\u4e0b\u5427\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528pip\u5b89\u88c5httpie\uff1a 1 pip install httpie \u6700\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u6240\u6709snippets\u7684\u5217\u8868\u4fe1\u606f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 http http://127.0.0.1:8000/snippets/ HTTP/1.1 200 OK ... [ { id : 1, title : , code : foo = \\ bar\\ \\n , linenos : false, language : python , style : friendly }, { id : 2, title : , code : print \\ hello, world\\ \\n , linenos : false, language : python , style : friendly } ] \u6216\u8005\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5f15\u7528\u5176id\u6765\u83b7\u53d6\u7279\u5b9asnippet\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 http http://127.0.0.1:8000/snippets/2/ HTTP/1.1 200 OK ... { id : 2, title : , code : print \\ hello, world\\ \\n , linenos : false, language : python , style : friendly } \u540c\u6837\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u5728Web\u6d4f\u89c8\u5668\u4e2d\u8bbf\u95ee\u8fd9\u4e9bURL\u6765\u663e\u793a\u76f8\u540c\u200b\u200b\u7684json\u3002","title":"\u6d4b\u8bd5\u6211\u4eec\u5bf9Web API\u7684\u7b2c\u4e00\u6b21\u5c1d\u8bd5"},{"location":"Django/drf-01/#_3","text":"\u5230\u76ee\u524d\u4e3a\u6b62\u6211\u4eec\u505a\u5f97\u8fd8\u4e0d\u9519\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u5e8f\u5217\u5316API\uff0c\u611f\u89c9\u975e\u5e38\u7c7b\u4f3c\u4e8eDjango\u7684Forms API\uff0c\u4ee5\u53ca\u4e00\u4e9b\u5e38\u89c4\u7684Django\u89c6\u56fe\u3002 \u6211\u4eec\u7684API\u89c6\u56fe\u76ee\u524d\u6ca1\u6709\u505a\u4efb\u4f55\u7279\u522b\u7279\u522b\u7684\u4e8b\u60c5\uff0c\u9664\u4e86\u63d0\u4f9bjson\u54cd\u5e94\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u4e9b\u6211\u4eec\u4ecd\u60f3\u6e05\u7406\u7684\u9519\u8bef\u5904\u7406\u8fb9\u7f18\u60c5\u51b5\uff0c\u4f46\u5b83\u662f\u4e00\u4e2a\u6b63\u5e38\u8fd0\u884c\u7684Web API\u3002 \u6211\u4eec\u5c06\u5728\u672c\u6559\u7a0b\u7684\u7b2c2\u90e8\u5206\u4e2d\u770b\u5230\u5982\u4f55\u5f00\u59cb\u6539\u8fdb\u3002","title":"\u6211\u4eec\u73b0\u5728\u5728\u54ea"},{"location":"Django/drf-02/","text":"\u4ece\u8fd9\u91cc\u5f00\u59cb\uff0c\u6211\u4eec\u5c06\u771f\u6b63\u5f00\u59cb\u6db5\u76d6REST\u6846\u67b6\u7684\u6838\u5fc3\u3002\u8ba9\u6211\u4eec\u4ecb\u7ecd\u51e0\u4e2a\u57fa\u672c\u6784\u5efa\u5757\u3002 Request\u5bf9\u8c61 REST\u6846\u67b6\u5f15\u5165\u4e86\u4e00\u4e2a Request \u5bf9\u8c61 \u7528\u6765\u6269\u5c55\u5e38\u89c4 HttpRequest \u5bf9\u8c61\uff0c\u5e76\u63d0\u4f9b\u66f4\u7075\u6d3b\u7684\u8bf7\u6c42\u89e3\u6790\u3002 Request \u5bf9\u8c61\u7684\u6838\u5fc3\u529f\u80fd\u662f request.data \u5c5e\u6027\uff0c\u5b83\u7c7b\u4f3c\u4e8e request.POST \uff0c\u4f46\u5bf9\u4e8e\u4f7f\u7528Web API\u66f4\u6709\u7528\u3002 1 2 request.POST # Only handles form data. Only works for POST method. request.data # Handles arbitrary data. Works for POST , PUT and PATCH methods. Response\u5bf9\u8c61 REST\u6846\u67b6\u8fd8\u5f15\u5165\u4e86\u4e00\u4e2a Response \u5bf9\u8c61\uff0c\u8fd9\u662fTemplateResponse\u7684\u4e00\u79cd\u7c7b\u578b\uff0c\u5b83\u63a5\u53d7\u672a\u6e32\u67d3\u7684\u5185\u5bb9\u5e76\u6839\u636e\u5185\u5bb9\u6765\u786e\u5b9a\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u7684\u6b63\u786e\u5185\u5bb9\u7c7b\u578b\u3002 1 return Response(data) # Renders to content type as requested by the client. Status codes \u5728\u89c6\u56fe\u4e2d\u4f7f\u7528\u6570\u5b57HTTP\u72b6\u6001\u4ee3\u7801\u5e76\u4e0d\u603b\u80fd\u660e\u663e\u5730\u8bfb\u53d6\u6570\u636e\uff0c\u800c\u4e14\u5f88\u5bb9\u6613\u5ffd\u7565\u9519\u8bef\u4ee3\u7801\u3002REST\u6846\u67b6\u4e3a\u6bcf\u4e2a\u72b6\u6001\u4ee3\u7801\u63d0\u4f9b\u4e86\u66f4\u663e\u5f0f\u7684\u6807\u8bc6\u7b26\uff0c\u4f8b\u5982\u72b6\u6001\u6a21\u5757\u4e2d\u7684 HTTP_400_BAD_REQUEST \u3002\u5728\u6574\u4e2a\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u8fd9\u4e9b\u6807\u8bc6\u7b26\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u6570\u5b57\u6807\u8bc6\u7b26\u3002 \u5305\u88c5API\u89c6\u56fe REST\u6846\u67b6\u63d0\u4f9b\u4e86\u4e24\u4e2a\u53ef\u7528\u4e8e\u7f16\u5199API\u89c6\u56fe\u7684\u88c5\u9970\u5668\u3002 @api_view \u7528\u4e8e\u5904\u7406\u57fa\u4e8e\u51fd\u6570\u7684\u89c6\u56fe\u7684\u88c5\u9970\u5668\u3002 APIView \u7c7b\u7528\u4e8e\u5904\u7406\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\u3002 \u8fd9\u4e9b\u5305\u88c5\u5668\u63d0\u4f9b\u4e86\u4e00\u4e9b\u529f\u80fd\uff0c\u4f8b\u5982\u786e\u4fdd\u5728\u89c6\u56fe\u4e2d\u63a5\u6536 Request \u5b9e\u4f8b\uff0c\u5e76\u5411 Response \u5bf9\u8c61\u6dfb\u52a0\u4e0a\u4e0b\u6587\uff0c\u4ee5\u4fbf\u6267\u884c\u5185\u5bb9\u534f\u8bae\u3002 \u5305\u88c5\u5668\u8fd8\u63d0\u4f9b\u4e00\u4e9b\u884c\u4e3a\uff0c\u4f8b\u5982\u5728\u9002\u5f53\u7684\u65f6\u5019\u8fd4\u56de 405 Method Not Allowed \u7684\u54cd\u5e94\uff0c\u5e76\u4e14\u5904\u7406\u5f53\u9519\u8bef\u7684\u8f93\u5165\u8fdb\u5165 request.data \u65f6\u9020\u6210\u7684 ParseError \u5f02\u5e38 \u7ec4\u5408\u8d77\u6765 \u597d\u7684\uff0c\u8ba9\u6211\u4eec\u7ee7\u7eed\u5e76\u5f00\u59cb\u4f7f\u7528\u8fd9\u4e9b\u65b0\u7ec4\u4ef6\u6765\u7f16\u5199\u4e00\u4e9b\u89c6\u56fe\u3002 \u6211\u4eec\u4e0d\u518d\u9700\u8981 views.py \u4e2d\u7684 JSONResponse \u7c7b\u4e86\uff0c\u6240\u4ee5\u5220\u9664\u5b83\u3002\u5f00\u59cb\u91cd\u6784\u89c6\u56fe\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 from rest_framework import status from rest_framework.decorators import api_view from rest_framework.response import Response from snippets.models import Snippet from snippets.serializers import SnippetSerializer @api_view ([ GET , POST ]) def snippet_list ( request ): List all code snippets, or create a new snippet. if request . method == GET : snippets = Snippet . objects . all () serializer = SnippetSerializer ( snippets , many = True ) return Response ( serializer . data ) elif request . method == POST : serializer = SnippetSerializer ( data = request . data ) if serializer . is_valid (): serializer . save () return Response ( serializer . data , status = status . HTTP_201_CREATED ) return Response ( serializer . errors , status = status . HTTP_400_BAD_REQUEST ) \u6211\u4eec\u7684\u5b9e\u4f8b\u89c6\u56fe\u662f\u5bf9\u524d\u4e00\u4e2a\u793a\u4f8b\u7684\u6539\u8fdb\u3002\u5b83\u66f4\u7b80\u6d01\u4e00\u4e9b\uff0c\u73b0\u5728\u4ee3\u7801\u4e0e\u6211\u4eec\u4f7f\u7528Forms API\u975e\u5e38\u76f8\u4f3c\u3002\u6211\u4eec\u8fd8\u4f7f\u7528\u547d\u540d\u7684\u72b6\u6001\u4ee3\u7801status code \uff0c\u8fd9\u4f7f\u5f97\u54cd\u5e94\u66f4\u660e\u786e\u3002 \u4ee5\u4e0b\u662f views.py \u6a21\u5757\u4e2d\u5355\u4e2asnippet\u7684\u89c6\u56fe\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 @api_view ([ GET , PUT , DELETE ]) def snippet_detail ( request , pk ): Retrieve, update or delete a code snippet. try : snippet = Snippet . objects . get ( pk = pk ) except Snippet . DoesNotExist : return Response ( status = status . HTTP_404_NOT_FOUND ) if request . method == GET : serializer = SnippetSerializer ( snippet ) return Response ( serializer . data ) elif request . method == PUT : serializer = SnippetSerializer ( snippet , data = request . data ) if serializer . is_valid (): serializer . save () return Response ( serializer . data ) return Response ( serializer . errors , status = status . HTTP_400_BAD_REQUEST ) elif request . method == DELETE : snippet . delete () return Response ( status = status . HTTP_204_NO_CONTENT ) \u8fd9\u5e94\u8be5\u90fd\u975e\u5e38\u719f\u6089 - \u4e0e\u4f7f\u7528\u5e38\u89c4Django\u89c6\u56fe\u6ca1\u6709\u592a\u5927\u533a\u522b\u3002 \u6ce8\u610f\uff0c\u6211\u4eec\u4e0d\u518d\u663e\u5f0f\u5730\u5c06\u8bf7\u6c42\u6216\u54cd\u5e94\u7ed1\u5b9a\u5230\u7ed9\u5b9a\u7684content type\u3002 request.data \u53ef\u4ee5\u5904\u7406\u4f20\u5165\u7684json\u8bf7\u6c42\uff0c\u4f46\u4e5f\u53ef\u4ee5\u5904\u7406\u5176\u4ed6\u683c\u5f0f\u3002\u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u5c06\u6570\u636e\u8fd4\u56de\u54cd\u5e94\u5bf9\u8c61\uff0c\u4f46\u5141\u8bb8REST\u6846\u67b6\u5c06\u54cd\u5e94\u6e32\u67d3\u4e3a\u6b63\u786e\u7684content type\u3002 \u5411url\u6dfb\u52a0\u53ef\u9009\u683c\u5f0f\u540e\u7f00 \u4e3a\u4e86\u5229\u7528\u6211\u4eec\u7684\u54cd\u5e94\u4e0d\u518d\u786c\u8fde\u63a5\u5230\u5355\u4e00\u5185\u5bb9\u7c7b\u578b\u7684\u4e8b\u5b9e\uff0c\u8ba9\u6211\u4eec\u5728API\u7aef\u70b9\u4e2d\u6dfb\u52a0\u5bf9\u683c\u5f0f\u540e\u7f00\u7684\u652f\u6301\u3002\u4f7f\u7528\u683c\u5f0f\u540e\u7f00\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u660e\u786e\u5f15\u7528\u7ed9\u5b9a\u683c\u5f0f\u7684url\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u7684API\u80fd\u591f\u5904\u7406\u8bf8\u5982 http://example.com/api/items/4.json \u4e4b\u7c7b\u7684url\u3002 \u9996\u5148\u5411\u4e24\u4e2a\u89c6\u56fe\u90fd\u6dfb\u52a0format\u5173\u952e\u5b57\u53c2\u6570\uff0c\u5982\u4e0b\u6240\u793a\u3002 1 def snippet_list(request, format=None): 1 def snippet_detail(request, pk, format=None): \u73b0\u5728\u66f4\u65b0 snippets/urls.py \u6587\u4ef6\uff0c\u5728\u73b0\u6709url\u4e4b\u5916\u9644\u52a0\u4e00\u7ec4format_suffix_patterns\u3002 1 2 3 4 5 6 7 8 9 10 from django.conf.urls import url from rest_framework.urlpatterns import format_suffix_patterns from snippets import views urlpatterns = [ url ( r ^snippets/$ , views . snippet_list ), url ( r ^snippets/(?P pk [0-9]+)$ , views . snippet_detail ), ] urlpatterns = format_suffix_patterns ( urlpatterns ) \u6211\u4eec\u4e0d\u9700\u8981\u6dfb\u52a0\u8fd9\u4e9b\u989d\u5916\u7684url\u6a21\u5f0f\uff0c\u4f46\u662f\u5b83\u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u5355\u3001\u5e72\u51c0\u7684\u65b9\u5f0f\u6765\u5f15\u7528\u7279\u5b9a\u7684\u683c\u5f0f\u3002 \u5b83\u770b\u8d77\u6765\u600e\u4e48\u6837? \u7ee7\u7eed\u4ece\u547d\u4ee4\u884c\u6d4b\u8bd5API\uff0c\u5c31\u50cf\u6211\u4eec\u5728 \u6559\u7a0b\u7b2c1\u90e8\u5206 \u4e2d\u6240\u505a\u7684\u90a3\u6837\u3002\u4e00\u5207\u5de5\u4f5c\u90fd\u975e\u5e38\u76f8\u4f3c\uff0c\u4f46\u662f\u6211\u4eec\u5728\u53d1\u9001\u65e0\u6548\u8bf7\u6c42\u65f6\u5f97\u5230\u4e86\u66f4\u597d\u7684\u9519\u8bef\u5904\u7406\u3002 \u6211\u4eec\u53ef\u4ee5\u50cf\u4ee5\u524d\u4e00\u6837\u5f97\u5230\u6240\u6709snippets\u7684\u5217\u8868\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 http http://127.0.0.1:8000/snippets/ HTTP/1.1 200 OK ... [ { id : 1, title : , code : foo = \\ bar\\ \\n , linenos : false, language : python , style : friendly }, { id : 2, title : , code : print \\ hello, world\\ \\n , linenos : false, language : python , style : friendly } ] \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528Accept\u5934\u6765\u63a7\u5236\u8fd4\u56de\u7684\u54cd\u5e94\u7684\u683c\u5f0f: 1 2 http http://127.0.0.1:8000/snippets/ Accept:application/json # Request JSON http http://127.0.0.1:8000/snippets/ Accept:text/html # Request HTML \u6216\u52a0\u4e0a\u683c\u5f0f\u540e\u7f00: 1 2 http http://127.0.0.1:8000/snippets.json # JSON suffix http http://127.0.0.1:8000/snippets.api # Browsable API suffix \u7c7b\u4f3c\u5730\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528Content-Type\u5934\u6765\u63a7\u5236\u53d1\u9001\u8bf7\u6c42\u7684\u683c\u5f0f\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # POST using form data http --form POST http://127.0.0.1:8000/snippets/ code= print 123 { id : 3, title : , code : print 123 , linenos : false, language : python , style : friendly } # POST using JSON http --json POST http://127.0.0.1:8000/snippets/ code= print 456 { id : 4, title : , code : print 456 , linenos : false, language : python , style : friendly } \u5982\u679c\u60a8\u5411\u4e0a\u9762\u7684 http \u8bf7\u6c42\u6dfb\u52a0 \u2014debug \u5207\u6362\uff0c\u60a8\u5c06\u80fd\u591f\u5728\u8bf7\u6c42\u6807\u5934\u4e2d\u770b\u5230\u8bf7\u6c42\u7c7b\u578b\u3002 \u73b0\u5728\uff0c\u901a\u8fc7\u8bbf\u95eehttp://127.0.0.1:8000/snippets/\uff0c\u5728web\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00API\u3002 \u53ef\u6d4f\u89c8\u6027 \u56e0\u4e3aAPI\u6839\u636e\u5ba2\u6237\u7aef\u8bf7\u6c42\u9009\u62e9\u54cd\u5e94\u7684\u5185\u5bb9\u7c7b\u578b\uff0c\u6240\u4ee5\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5f53web\u6d4f\u89c8\u5668\u8bf7\u6c42\u8be5\u8d44\u6e90\u65f6\uff0c\u5b83\u5c06\u8fd4\u56de\u4e00\u4e2ahtml\u683c\u5f0f\u7684\u8d44\u6e90\u8868\u793a\u3002\u8fd9\u5141\u8bb8API\u8fd4\u56de\u5b8c\u5168web\u6d4f\u89c8\u7684HTML\u8868\u793a\u3002 \u6709\u4e00\u4e2aweb\u6d4f\u89c8\u7684API\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u53ef\u7528\u6027\u80dc\u5229\uff0c\u5e76\u4e14\u4f7f\u5f00\u53d1\u548c\u4f7f\u7528\u60a8\u7684API\u66f4\u52a0\u5bb9\u6613\u3002\u5b83\u8fd8\u6781\u5927\u5730\u964d\u4f4e\u4e86\u5176\u4ed6\u5f00\u53d1\u4eba\u5458\u60f3\u8981\u68c0\u67e5\u548c\u4f7f\u7528\u60a8\u7684API\u7684\u95e8\u69db\u3002 \u6709\u5173\u53ef\u6d4f\u89c8api\u7279\u6027\u4ee5\u53ca\u5982\u4f55\u81ea\u5b9a\u4e49\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 \u53ef\u6d4f\u89c8api \u4e3b\u9898\u3002","title":"django-rest-framework\u6587\u6863\u6574\u7406-Request and Response\uff08\u4e8c\uff09"},{"location":"Django/drf-02/#request","text":"REST\u6846\u67b6\u5f15\u5165\u4e86\u4e00\u4e2a Request \u5bf9\u8c61 \u7528\u6765\u6269\u5c55\u5e38\u89c4 HttpRequest \u5bf9\u8c61\uff0c\u5e76\u63d0\u4f9b\u66f4\u7075\u6d3b\u7684\u8bf7\u6c42\u89e3\u6790\u3002 Request \u5bf9\u8c61\u7684\u6838\u5fc3\u529f\u80fd\u662f request.data \u5c5e\u6027\uff0c\u5b83\u7c7b\u4f3c\u4e8e request.POST \uff0c\u4f46\u5bf9\u4e8e\u4f7f\u7528Web API\u66f4\u6709\u7528\u3002 1 2 request.POST # Only handles form data. Only works for POST method. request.data # Handles arbitrary data. Works for POST , PUT and PATCH methods.","title":"Request\u5bf9\u8c61"},{"location":"Django/drf-02/#response","text":"REST\u6846\u67b6\u8fd8\u5f15\u5165\u4e86\u4e00\u4e2a Response \u5bf9\u8c61\uff0c\u8fd9\u662fTemplateResponse\u7684\u4e00\u79cd\u7c7b\u578b\uff0c\u5b83\u63a5\u53d7\u672a\u6e32\u67d3\u7684\u5185\u5bb9\u5e76\u6839\u636e\u5185\u5bb9\u6765\u786e\u5b9a\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u7684\u6b63\u786e\u5185\u5bb9\u7c7b\u578b\u3002 1 return Response(data) # Renders to content type as requested by the client.","title":"Response\u5bf9\u8c61"},{"location":"Django/drf-02/#status-codes","text":"\u5728\u89c6\u56fe\u4e2d\u4f7f\u7528\u6570\u5b57HTTP\u72b6\u6001\u4ee3\u7801\u5e76\u4e0d\u603b\u80fd\u660e\u663e\u5730\u8bfb\u53d6\u6570\u636e\uff0c\u800c\u4e14\u5f88\u5bb9\u6613\u5ffd\u7565\u9519\u8bef\u4ee3\u7801\u3002REST\u6846\u67b6\u4e3a\u6bcf\u4e2a\u72b6\u6001\u4ee3\u7801\u63d0\u4f9b\u4e86\u66f4\u663e\u5f0f\u7684\u6807\u8bc6\u7b26\uff0c\u4f8b\u5982\u72b6\u6001\u6a21\u5757\u4e2d\u7684 HTTP_400_BAD_REQUEST \u3002\u5728\u6574\u4e2a\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u8fd9\u4e9b\u6807\u8bc6\u7b26\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u6570\u5b57\u6807\u8bc6\u7b26\u3002","title":"Status codes"},{"location":"Django/drf-02/#api","text":"REST\u6846\u67b6\u63d0\u4f9b\u4e86\u4e24\u4e2a\u53ef\u7528\u4e8e\u7f16\u5199API\u89c6\u56fe\u7684\u88c5\u9970\u5668\u3002 @api_view \u7528\u4e8e\u5904\u7406\u57fa\u4e8e\u51fd\u6570\u7684\u89c6\u56fe\u7684\u88c5\u9970\u5668\u3002 APIView \u7c7b\u7528\u4e8e\u5904\u7406\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe\u3002 \u8fd9\u4e9b\u5305\u88c5\u5668\u63d0\u4f9b\u4e86\u4e00\u4e9b\u529f\u80fd\uff0c\u4f8b\u5982\u786e\u4fdd\u5728\u89c6\u56fe\u4e2d\u63a5\u6536 Request \u5b9e\u4f8b\uff0c\u5e76\u5411 Response \u5bf9\u8c61\u6dfb\u52a0\u4e0a\u4e0b\u6587\uff0c\u4ee5\u4fbf\u6267\u884c\u5185\u5bb9\u534f\u8bae\u3002 \u5305\u88c5\u5668\u8fd8\u63d0\u4f9b\u4e00\u4e9b\u884c\u4e3a\uff0c\u4f8b\u5982\u5728\u9002\u5f53\u7684\u65f6\u5019\u8fd4\u56de 405 Method Not Allowed \u7684\u54cd\u5e94\uff0c\u5e76\u4e14\u5904\u7406\u5f53\u9519\u8bef\u7684\u8f93\u5165\u8fdb\u5165 request.data \u65f6\u9020\u6210\u7684 ParseError \u5f02\u5e38","title":"\u5305\u88c5API\u89c6\u56fe"},{"location":"Django/drf-02/#_1","text":"\u597d\u7684\uff0c\u8ba9\u6211\u4eec\u7ee7\u7eed\u5e76\u5f00\u59cb\u4f7f\u7528\u8fd9\u4e9b\u65b0\u7ec4\u4ef6\u6765\u7f16\u5199\u4e00\u4e9b\u89c6\u56fe\u3002 \u6211\u4eec\u4e0d\u518d\u9700\u8981 views.py \u4e2d\u7684 JSONResponse \u7c7b\u4e86\uff0c\u6240\u4ee5\u5220\u9664\u5b83\u3002\u5f00\u59cb\u91cd\u6784\u89c6\u56fe\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 from rest_framework import status from rest_framework.decorators import api_view from rest_framework.response import Response from snippets.models import Snippet from snippets.serializers import SnippetSerializer @api_view ([ GET , POST ]) def snippet_list ( request ): List all code snippets, or create a new snippet. if request . method == GET : snippets = Snippet . objects . all () serializer = SnippetSerializer ( snippets , many = True ) return Response ( serializer . data ) elif request . method == POST : serializer = SnippetSerializer ( data = request . data ) if serializer . is_valid (): serializer . save () return Response ( serializer . data , status = status . HTTP_201_CREATED ) return Response ( serializer . errors , status = status . HTTP_400_BAD_REQUEST ) \u6211\u4eec\u7684\u5b9e\u4f8b\u89c6\u56fe\u662f\u5bf9\u524d\u4e00\u4e2a\u793a\u4f8b\u7684\u6539\u8fdb\u3002\u5b83\u66f4\u7b80\u6d01\u4e00\u4e9b\uff0c\u73b0\u5728\u4ee3\u7801\u4e0e\u6211\u4eec\u4f7f\u7528Forms API\u975e\u5e38\u76f8\u4f3c\u3002\u6211\u4eec\u8fd8\u4f7f\u7528\u547d\u540d\u7684\u72b6\u6001\u4ee3\u7801status code \uff0c\u8fd9\u4f7f\u5f97\u54cd\u5e94\u66f4\u660e\u786e\u3002 \u4ee5\u4e0b\u662f views.py \u6a21\u5757\u4e2d\u5355\u4e2asnippet\u7684\u89c6\u56fe\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 @api_view ([ GET , PUT , DELETE ]) def snippet_detail ( request , pk ): Retrieve, update or delete a code snippet. try : snippet = Snippet . objects . get ( pk = pk ) except Snippet . DoesNotExist : return Response ( status = status . HTTP_404_NOT_FOUND ) if request . method == GET : serializer = SnippetSerializer ( snippet ) return Response ( serializer . data ) elif request . method == PUT : serializer = SnippetSerializer ( snippet , data = request . data ) if serializer . is_valid (): serializer . save () return Response ( serializer . data ) return Response ( serializer . errors , status = status . HTTP_400_BAD_REQUEST ) elif request . method == DELETE : snippet . delete () return Response ( status = status . HTTP_204_NO_CONTENT ) \u8fd9\u5e94\u8be5\u90fd\u975e\u5e38\u719f\u6089 - \u4e0e\u4f7f\u7528\u5e38\u89c4Django\u89c6\u56fe\u6ca1\u6709\u592a\u5927\u533a\u522b\u3002 \u6ce8\u610f\uff0c\u6211\u4eec\u4e0d\u518d\u663e\u5f0f\u5730\u5c06\u8bf7\u6c42\u6216\u54cd\u5e94\u7ed1\u5b9a\u5230\u7ed9\u5b9a\u7684content type\u3002 request.data \u53ef\u4ee5\u5904\u7406\u4f20\u5165\u7684json\u8bf7\u6c42\uff0c\u4f46\u4e5f\u53ef\u4ee5\u5904\u7406\u5176\u4ed6\u683c\u5f0f\u3002\u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u5c06\u6570\u636e\u8fd4\u56de\u54cd\u5e94\u5bf9\u8c61\uff0c\u4f46\u5141\u8bb8REST\u6846\u67b6\u5c06\u54cd\u5e94\u6e32\u67d3\u4e3a\u6b63\u786e\u7684content type\u3002","title":"\u7ec4\u5408\u8d77\u6765"},{"location":"Django/drf-02/#url","text":"\u4e3a\u4e86\u5229\u7528\u6211\u4eec\u7684\u54cd\u5e94\u4e0d\u518d\u786c\u8fde\u63a5\u5230\u5355\u4e00\u5185\u5bb9\u7c7b\u578b\u7684\u4e8b\u5b9e\uff0c\u8ba9\u6211\u4eec\u5728API\u7aef\u70b9\u4e2d\u6dfb\u52a0\u5bf9\u683c\u5f0f\u540e\u7f00\u7684\u652f\u6301\u3002\u4f7f\u7528\u683c\u5f0f\u540e\u7f00\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u660e\u786e\u5f15\u7528\u7ed9\u5b9a\u683c\u5f0f\u7684url\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u7684API\u80fd\u591f\u5904\u7406\u8bf8\u5982 http://example.com/api/items/4.json \u4e4b\u7c7b\u7684url\u3002 \u9996\u5148\u5411\u4e24\u4e2a\u89c6\u56fe\u90fd\u6dfb\u52a0format\u5173\u952e\u5b57\u53c2\u6570\uff0c\u5982\u4e0b\u6240\u793a\u3002 1 def snippet_list(request, format=None): 1 def snippet_detail(request, pk, format=None): \u73b0\u5728\u66f4\u65b0 snippets/urls.py \u6587\u4ef6\uff0c\u5728\u73b0\u6709url\u4e4b\u5916\u9644\u52a0\u4e00\u7ec4format_suffix_patterns\u3002 1 2 3 4 5 6 7 8 9 10 from django.conf.urls import url from rest_framework.urlpatterns import format_suffix_patterns from snippets import views urlpatterns = [ url ( r ^snippets/$ , views . snippet_list ), url ( r ^snippets/(?P pk [0-9]+)$ , views . snippet_detail ), ] urlpatterns = format_suffix_patterns ( urlpatterns ) \u6211\u4eec\u4e0d\u9700\u8981\u6dfb\u52a0\u8fd9\u4e9b\u989d\u5916\u7684url\u6a21\u5f0f\uff0c\u4f46\u662f\u5b83\u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u5355\u3001\u5e72\u51c0\u7684\u65b9\u5f0f\u6765\u5f15\u7528\u7279\u5b9a\u7684\u683c\u5f0f\u3002","title":"\u5411url\u6dfb\u52a0\u53ef\u9009\u683c\u5f0f\u540e\u7f00"},{"location":"Django/drf-02/#_2","text":"\u7ee7\u7eed\u4ece\u547d\u4ee4\u884c\u6d4b\u8bd5API\uff0c\u5c31\u50cf\u6211\u4eec\u5728 \u6559\u7a0b\u7b2c1\u90e8\u5206 \u4e2d\u6240\u505a\u7684\u90a3\u6837\u3002\u4e00\u5207\u5de5\u4f5c\u90fd\u975e\u5e38\u76f8\u4f3c\uff0c\u4f46\u662f\u6211\u4eec\u5728\u53d1\u9001\u65e0\u6548\u8bf7\u6c42\u65f6\u5f97\u5230\u4e86\u66f4\u597d\u7684\u9519\u8bef\u5904\u7406\u3002 \u6211\u4eec\u53ef\u4ee5\u50cf\u4ee5\u524d\u4e00\u6837\u5f97\u5230\u6240\u6709snippets\u7684\u5217\u8868\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 http http://127.0.0.1:8000/snippets/ HTTP/1.1 200 OK ... [ { id : 1, title : , code : foo = \\ bar\\ \\n , linenos : false, language : python , style : friendly }, { id : 2, title : , code : print \\ hello, world\\ \\n , linenos : false, language : python , style : friendly } ] \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528Accept\u5934\u6765\u63a7\u5236\u8fd4\u56de\u7684\u54cd\u5e94\u7684\u683c\u5f0f: 1 2 http http://127.0.0.1:8000/snippets/ Accept:application/json # Request JSON http http://127.0.0.1:8000/snippets/ Accept:text/html # Request HTML \u6216\u52a0\u4e0a\u683c\u5f0f\u540e\u7f00: 1 2 http http://127.0.0.1:8000/snippets.json # JSON suffix http http://127.0.0.1:8000/snippets.api # Browsable API suffix \u7c7b\u4f3c\u5730\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528Content-Type\u5934\u6765\u63a7\u5236\u53d1\u9001\u8bf7\u6c42\u7684\u683c\u5f0f\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # POST using form data http --form POST http://127.0.0.1:8000/snippets/ code= print 123 { id : 3, title : , code : print 123 , linenos : false, language : python , style : friendly } # POST using JSON http --json POST http://127.0.0.1:8000/snippets/ code= print 456 { id : 4, title : , code : print 456 , linenos : false, language : python , style : friendly } \u5982\u679c\u60a8\u5411\u4e0a\u9762\u7684 http \u8bf7\u6c42\u6dfb\u52a0 \u2014debug \u5207\u6362\uff0c\u60a8\u5c06\u80fd\u591f\u5728\u8bf7\u6c42\u6807\u5934\u4e2d\u770b\u5230\u8bf7\u6c42\u7c7b\u578b\u3002 \u73b0\u5728\uff0c\u901a\u8fc7\u8bbf\u95eehttp://127.0.0.1:8000/snippets/\uff0c\u5728web\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00API\u3002","title":"\u5b83\u770b\u8d77\u6765\u600e\u4e48\u6837?"},{"location":"Django/drf-02/#_3","text":"\u56e0\u4e3aAPI\u6839\u636e\u5ba2\u6237\u7aef\u8bf7\u6c42\u9009\u62e9\u54cd\u5e94\u7684\u5185\u5bb9\u7c7b\u578b\uff0c\u6240\u4ee5\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5f53web\u6d4f\u89c8\u5668\u8bf7\u6c42\u8be5\u8d44\u6e90\u65f6\uff0c\u5b83\u5c06\u8fd4\u56de\u4e00\u4e2ahtml\u683c\u5f0f\u7684\u8d44\u6e90\u8868\u793a\u3002\u8fd9\u5141\u8bb8API\u8fd4\u56de\u5b8c\u5168web\u6d4f\u89c8\u7684HTML\u8868\u793a\u3002 \u6709\u4e00\u4e2aweb\u6d4f\u89c8\u7684API\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u53ef\u7528\u6027\u80dc\u5229\uff0c\u5e76\u4e14\u4f7f\u5f00\u53d1\u548c\u4f7f\u7528\u60a8\u7684API\u66f4\u52a0\u5bb9\u6613\u3002\u5b83\u8fd8\u6781\u5927\u5730\u964d\u4f4e\u4e86\u5176\u4ed6\u5f00\u53d1\u4eba\u5458\u60f3\u8981\u68c0\u67e5\u548c\u4f7f\u7528\u60a8\u7684API\u7684\u95e8\u69db\u3002 \u6709\u5173\u53ef\u6d4f\u89c8api\u7279\u6027\u4ee5\u53ca\u5982\u4f55\u81ea\u5b9a\u4e49\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 \u53ef\u6d4f\u89c8api \u4e3b\u9898\u3002","title":"\u53ef\u6d4f\u89c8\u6027"},{"location":"Python/python_collections_chainmap/","text":"ChainMap ChainMap \u7c7b\u63d0\u4f9b\u4e00\u4e2a\u5feb\u901f\u94fe\u63a5\u591a\u4e2a\u6620\u5c04\uff08\u5b57\u5178\uff09\u7684\u64cd\u4f5c\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4ed6\u4f1a\u6bd4\u521b\u5efa\u5b57\u5178\u7136\u540e\u8c03\u7528 update() \u5feb\u3002 \u8be5\u7c7b\u53ef\u7528\u4e8e\u6a21\u62df\u5d4c\u5957\u4f5c\u7528\u57df\uff0c\u5728\u6a21\u677f\u4e2d\u5f88\u6709\u7528\u3002 \u5b9e\u73b0\uff1a 1 class collections . ChainMap ( * maps ) ChainMap \u7c7b\u7ec4\u5408\u591a\u4e2a\u5b57\u5178\u6216\u5176\u4ed6\u6620\u5c04\u5230\u4e00\u4e2a\u53ef\u66f4\u65b0\u7684\u3001\u5355\u4e00\u7684\u5bf9\u8c61\u4e2d\u3002\u5982\u679c\u6ca1\u6709\u6307\u5b9a maps \uff0c\u5c31\u4f1a\u63d0\u4f9b\u4e00\u4e2a\u7a7a\u5b57\u5178\uff0c\u4ee5\u6b64\u6765\u4fdd\u8bc1\u6bcf\u4e2a\u65b0\u94fe\u4e2d\u90fd\u4f1a\u6709\u81f3\u5c11\u4e00\u4e2a\u5b57\u5178\uff08\u6620\u5c04\uff09 \u5e95\u5c42\u6620\u5c04\u5b58\u50a8\u5728\u5217\u8868\u4e2d\u3002 \u8be5\u5217\u8868\u662f\u516c\u5171\u7684\uff0c\u53ef\u4ee5\u4f7f\u7528 maps \u5c5e\u6027\u8bbf\u95ee\u6216\u66f4\u65b0\u3002 1 2 3 4 5 6 7 8 from collections import ChainMap m1 = { color : red , user : guest } m2 = { name : drfish , age : 18 } chain_map = ChainMap ( m1 , m2 ) chain_map ChainMap ({ color : red , user : guest }, { name : drfish , age : 18 }) print ( chain_map . get ( name )) drfish \u652f\u6301\u6240\u6709\u5e38\u7528\u7684\u5b57\u5178\u65b9\u6cd5\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u652f\u6301\u4ee5\u4e0b\u5c5e\u6027\uff1a maps \u8fd4\u56de\u4e00\u4e2a\u7528\u6237\u53ef\u4ee5\u66f4\u65b0\u7684\u6620\u5c04\u5217\u8868\u3002\u4ed6\u662f\u6309\u7167\u641c\u7d22\u987a\u5e8f\u6392\u5e8f\u7684\u3002 1 2 chain_map.maps [{ color : red , user : guest }, { name : drfish , age : 18 }] new_child(m=None) \u8fd4\u56de\u4e00\u4e2a\u65b0\u7684ChainMap\uff0c\u8fd9\u4e2a\u65b0ChainMap\u5305\u542b\u65b0\u6dfb\u52a0\u7684map\uff0c\u5e76\u4e14\u8fd9\u4e2amap\u5728\u9996\u4f4d\u3002\u5982\u679c\u6ca1\u6709\u6307\u5b9am\uff0c\u90a3\u4e48\u5c31\u4f1a\u5728\u6700\u524d\u9762\u6dfb\u52a0\u4e00\u4e2a\u7a7adict\u3002\u56e0\u6b64 d.new_child() \u76f8\u5f53\u4e8e ChainMap({}, *d.maps) \u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u5c06\u4ea7\u751f\u4e00\u4e2a\u5168\u65b0\u7684ChainMap\uff0c\u548c\u4e4b\u524d\u7684\u4e92\u4e0d\u5e72\u6270 \u8bfb\u4e00\u4e0b\u6e90\u7801\u4f1a\u66f4\u5bb9\u6613\u7406\u89e3\uff1a 1 2 3 4 5 6 7 def new_child(self, m=None): # like Django s Context.push() New ChainMap with a new map followed by all previous maps. If no map is provided, an empty dict is used. if m is None: m = {} return self.__class__(m, *self.maps) \u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 m3 = { data : 1-6 } chain_map.new_child(m=m3) ChainMap({ data : 1-6 }, { color : red , user : guest }, { name : drfish , age : 18 }) chain_map ChainMap({ color : red , user : guest }, { name : drfish , age : 18 }) id(chain_map.new_child(m=m3)) 4496700080 id(chain_map) 4496631176 parents 1 2 3 4 @property def parents(self): # like Django s Context.pop() New ChainMap from maps[1:]. return self.__class__(*self.maps[1:]) \u8fd4\u56de\u4e00\u4e2a\u65b0\u7684ChainMap\uff0c\u8fd9\u4e2a\u65b0ChainMap\u4e0d\u5305\u62ec\u7b2c\u4e00\u4e2adict\u3002\u8fd9\u4e2a\u5bf9\u4e8e\u8df3\u8fc7\u7b2c\u4e00\u4e2amap\u641c\u7d22\u5f88\u6709\u7528\u3002 d.parents \u5927\u81f4\u76f8\u5f53\u4e8e ChainMap(*d.maps[1:]) 1 2 3 4 5 6 chain_map.parents ChainMap({ name : drfish , age : 18 }) id(chain_map.parents) 4492113680 id(chain_map) 4496631176","title":"collections.ChainMap"},{"location":"Python/python_collections_chainmap/#chainmap","text":"ChainMap \u7c7b\u63d0\u4f9b\u4e00\u4e2a\u5feb\u901f\u94fe\u63a5\u591a\u4e2a\u6620\u5c04\uff08\u5b57\u5178\uff09\u7684\u64cd\u4f5c\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4ed6\u4f1a\u6bd4\u521b\u5efa\u5b57\u5178\u7136\u540e\u8c03\u7528 update() \u5feb\u3002 \u8be5\u7c7b\u53ef\u7528\u4e8e\u6a21\u62df\u5d4c\u5957\u4f5c\u7528\u57df\uff0c\u5728\u6a21\u677f\u4e2d\u5f88\u6709\u7528\u3002 \u5b9e\u73b0\uff1a 1 class collections . ChainMap ( * maps ) ChainMap \u7c7b\u7ec4\u5408\u591a\u4e2a\u5b57\u5178\u6216\u5176\u4ed6\u6620\u5c04\u5230\u4e00\u4e2a\u53ef\u66f4\u65b0\u7684\u3001\u5355\u4e00\u7684\u5bf9\u8c61\u4e2d\u3002\u5982\u679c\u6ca1\u6709\u6307\u5b9a maps \uff0c\u5c31\u4f1a\u63d0\u4f9b\u4e00\u4e2a\u7a7a\u5b57\u5178\uff0c\u4ee5\u6b64\u6765\u4fdd\u8bc1\u6bcf\u4e2a\u65b0\u94fe\u4e2d\u90fd\u4f1a\u6709\u81f3\u5c11\u4e00\u4e2a\u5b57\u5178\uff08\u6620\u5c04\uff09 \u5e95\u5c42\u6620\u5c04\u5b58\u50a8\u5728\u5217\u8868\u4e2d\u3002 \u8be5\u5217\u8868\u662f\u516c\u5171\u7684\uff0c\u53ef\u4ee5\u4f7f\u7528 maps \u5c5e\u6027\u8bbf\u95ee\u6216\u66f4\u65b0\u3002 1 2 3 4 5 6 7 8 from collections import ChainMap m1 = { color : red , user : guest } m2 = { name : drfish , age : 18 } chain_map = ChainMap ( m1 , m2 ) chain_map ChainMap ({ color : red , user : guest }, { name : drfish , age : 18 }) print ( chain_map . get ( name )) drfish \u652f\u6301\u6240\u6709\u5e38\u7528\u7684\u5b57\u5178\u65b9\u6cd5\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u652f\u6301\u4ee5\u4e0b\u5c5e\u6027\uff1a maps \u8fd4\u56de\u4e00\u4e2a\u7528\u6237\u53ef\u4ee5\u66f4\u65b0\u7684\u6620\u5c04\u5217\u8868\u3002\u4ed6\u662f\u6309\u7167\u641c\u7d22\u987a\u5e8f\u6392\u5e8f\u7684\u3002 1 2 chain_map.maps [{ color : red , user : guest }, { name : drfish , age : 18 }] new_child(m=None) \u8fd4\u56de\u4e00\u4e2a\u65b0\u7684ChainMap\uff0c\u8fd9\u4e2a\u65b0ChainMap\u5305\u542b\u65b0\u6dfb\u52a0\u7684map\uff0c\u5e76\u4e14\u8fd9\u4e2amap\u5728\u9996\u4f4d\u3002\u5982\u679c\u6ca1\u6709\u6307\u5b9am\uff0c\u90a3\u4e48\u5c31\u4f1a\u5728\u6700\u524d\u9762\u6dfb\u52a0\u4e00\u4e2a\u7a7adict\u3002\u56e0\u6b64 d.new_child() \u76f8\u5f53\u4e8e ChainMap({}, *d.maps) \u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u5c06\u4ea7\u751f\u4e00\u4e2a\u5168\u65b0\u7684ChainMap\uff0c\u548c\u4e4b\u524d\u7684\u4e92\u4e0d\u5e72\u6270 \u8bfb\u4e00\u4e0b\u6e90\u7801\u4f1a\u66f4\u5bb9\u6613\u7406\u89e3\uff1a 1 2 3 4 5 6 7 def new_child(self, m=None): # like Django s Context.push() New ChainMap with a new map followed by all previous maps. If no map is provided, an empty dict is used. if m is None: m = {} return self.__class__(m, *self.maps) \u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 m3 = { data : 1-6 } chain_map.new_child(m=m3) ChainMap({ data : 1-6 }, { color : red , user : guest }, { name : drfish , age : 18 }) chain_map ChainMap({ color : red , user : guest }, { name : drfish , age : 18 }) id(chain_map.new_child(m=m3)) 4496700080 id(chain_map) 4496631176 parents 1 2 3 4 @property def parents(self): # like Django s Context.pop() New ChainMap from maps[1:]. return self.__class__(*self.maps[1:]) \u8fd4\u56de\u4e00\u4e2a\u65b0\u7684ChainMap\uff0c\u8fd9\u4e2a\u65b0ChainMap\u4e0d\u5305\u62ec\u7b2c\u4e00\u4e2adict\u3002\u8fd9\u4e2a\u5bf9\u4e8e\u8df3\u8fc7\u7b2c\u4e00\u4e2amap\u641c\u7d22\u5f88\u6709\u7528\u3002 d.parents \u5927\u81f4\u76f8\u5f53\u4e8e ChainMap(*d.maps[1:]) 1 2 3 4 5 6 chain_map.parents ChainMap({ name : drfish , age : 18 }) id(chain_map.parents) 4492113680 id(chain_map) 4496631176","title":"ChainMap"},{"location":"Python/python_collections_counter/","text":"Counter \u5b9e\u73b0\uff1a 1 class collections . Counter ([ iterable - or - mapping ]) \u6e90\u7801\u4e2d\uff0c\u7b80\u5355\u4ecb\u7ecd\u4e86\u4e00\u4e9b\u7528\u6cd5\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 c = Counter ( abcdeabcdabcaba ) # count elements from a string c . most_common ( 3 ) # three most common elements [( a , 5 ), ( b , 4 ), ( c , 3 )] sorted ( c ) # list all unique elements [ a , b , c , d , e ] . join ( sorted ( c . elements ())) # list elements with repetitions aaaaabbbbcccdde sum ( c . values ()) # total of all counts 15 c [ a ] # count of letter a 5 for elem in shazam : # update counts from an iterable ... c [ elem ] += 1 # by adding 1 to each element s count c [ a ] # now there are seven a 7 del c [ b ] # remove all b c [ b ] # now there are zero b 0 d = Counter ( simsalabim ) # make another counter c . update ( d ) # add in the second counter c [ a ] # now there are nine a 9 c . clear () # empty the counter c Counter () Note : If a count is set to zero or reduced to zero , it will remain in the counter until the entry is deleted or the counter is cleared : c = Counter ( aaabbc ) c [ b ] -= 2 # reduce the count of b by two c . most_common () # b is still in, but its count is zero [( a , 3 ), ( c , 1 ), ( b , 0 )] Counter \u662fdict\u7684\u5b50\u7c7b\uff0c\u53ef\u4ee5\u7528\u6765\u8ba1\u7b97\u53ef\u54c8\u5e0c\u5bf9\u8c61\u7684\u6570\u91cf\u3002\u5b83\u662f\u4e00\u4e2a\u65e0\u5e8f\u7684\u96c6\u5408\uff0c\u5e76\u4e14\u5143\u7d20\u4f5c\u4e3adict\u7684key\uff0c\u6570\u91cf\u4f5c\u4e3adict\u7684value\u3002\u6570\u91cf\u53ef\u4ee5\u662f\u4efb\u610f\u6574\u6570\u503c\uff0c\u5305\u62ec0\u548c\u8d1f\u6570\u3002 1 2 3 4 5 6 7 c = Counter () # a new, empty counter Counter ( adfadf ) # a new counter from an iterables Counter ({ a : 2 , d : 2 , f : 2 }) Counter ({ red : 4 , blue : 2 }) # a new counter from a mapping Counter ({ red : 4 , blue : 2 }) Counter ( cats = 4 , dogs = 8 ) # a new counter from keyword args Counter ({ dogs : 8 , cats : 4 }) \u5bf9\u4e8e\u90a3\u4e9b\u4e0d\u5b58\u5728\u7684\u5143\u7d20\uff0c\u5982\u679c\u60f3\u8981\u83b7\u53d6\u5b83\uff0cCounter\u4f1a\u8fd4\u56de0\uff0c\u800c\u4e0d\u4f1a\u5f15\u53d1 KeyError \uff1a 1 2 3 c = Counter ([ eggs , ham ]) c [ bacon ] # count of a missing element is zero 0 \u4ece\u6e90\u7801\u4e2d\u53ef\u4ee5\u770b\u51fa\u6765\u4e3a\u4ec0\u4e48\u4e0d\u5f15\u53d1 KeyError : 1 2 3 4 def __missing__ ( self , key ): The count of elements not in the Counter is zero. # Needed so that self[missing_item] does not raise KeyError return 0 \u5982\u679ccount\u8bbe\u7f6e\u4e3a\u96f6\u6216\u51cf\u5c11\u4e3a\u96f6\uff0c\u5b83\u5c06\u4fdd\u7559\u5728counter\u4e2d\uff0c\u76f4\u5230\u5220\u9664\u8be5\u6761\u76ee\u6216\u6e05\u9664\u8ba1\u6570\u5668\uff1a 1 2 c [ sausage ] = 0 # counter entry with a zero count del c [ sausage ] \u7531\u4e8eCounter\u662fdict\u7684\u5b50\u7c7b\uff0c\u56e0\u6b64\u4ed6\u5177\u5907dict\u7684\u65b9\u6cd5\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u5b83\u8fd8\u5177\u5907\u4ee5\u4e0b\u65b9\u6cd5\uff1a elements() \u8fd4\u56de\u6bcf\u4e00\u4e2a\u5143\u7d20\uff0c\u5143\u7d20\u4f1a\u6839\u636e\u4e2a\u6570\u91cd\u590dcount\u6b21\uff0c\u5e76\u4e14\u662f\u4ee5\u4efb\u610f\u987a\u5e8f\u8fd4\u56de\u7684\u3002\u5982\u679c\u5143\u7d20\u7684\u4e2a\u6570\u5c0f\u4e8e1(\u5305\u62ec\u8d1f\u503c)\uff0c\u90a3\u4e48\u5c31\u4f1a\u88ab\u5ffd\u7565\u4e0d\u8fd4\u56de 1 2 3 c = Counter(a=4, b=2, c=0, d=-2) sorted(c.elements()) [ a , a , a , a , b , b ] most_common([n]) \u8fd4\u56den\u4e2a\u6700\u5e38\u89c1\u5143\u7d20\u53ca\u5176\u8ba1\u6570\u7684\u5217\u8868\uff0c\u4ece\u6700\u5e38\u89c1\u5230\u6700\u5c11\u3002 \u5982\u679c\u7701\u7565n\u6216None\uff0c\u5219most_common\uff08\uff09\u8fd4\u56de\u8ba1\u6570\u5668\u4e2d\u7684\u6240\u6709\u5143\u7d20\u3002 \u5177\u6709\u76f8\u540c\u8ba1\u6570\u7684\u5143\u7d20\u662f\u4efb\u610f\u6392\u5e8f\u7684\uff1a 1 2 Counter( abracadabra ).most_common(3) [( a , 5), ( r , 2), ( b , 2)] subtract([iterable-or-mapping]) \u6839\u636e\u8fed\u4ee3\u5668\u6216\u6620\u5c04\u4e2d\u5bf9\u5f53\u524d\u5143\u7d20\u8fdb\u884c\u52a0\u51cf\u64cd\u4f5c\u3002\u548c dict.update() \u7c7b\u4f3c\uff0c\u4f46\u662f\u6ce8\u610f\uff0c\u662f\u64cd\u4f5c\uff0c\u800c\u4e0d\u662f\u66ff\u6362\u3002\u8f93\u5165\u548c\u8f93\u51fa\u53ef\u4ee5\u4e3a0\u6216\u8d1f\u6570 1 2 3 4 5 c = Counter(a=4, b=2, c=0, d=-2) d = Counter(a=1, b=2, c=3, d=4) c.subtract(d) c Counter({ a : 3, b : 0, c : -3, d : -6} \u901a\u5e38\u60c5\u51b5\u4e0b\uff0cCounter\u5bf9\u8c61\u548c\u5b57\u5178\u5177\u6709\u76f8\u540c\u7684\u65b9\u6cd5\u3002\u4f46\u662f\u4ee5\u4e0b\u4e24\u4e2a\u65b9\u6cd5\u4f1a\u6709\u6240\u4e0d\u540c\uff1a fromkeys(iterable) Counter\u7c7b\u6ca1\u6709\u5b9e\u73b0\u8fd9\u4e2a\u65b9\u6cd5 update([iterable-or-mapping]) \u548c dict.update() \u76f8\u4f3c\uff0c\u4f46\u662f\u662f\u8fdb\u884c\u52a0\u51cf\u64cd\u4f5c\uff0c\u800c\u4e0d\u662f\u66ff\u6362\u3002 \u4ece\u6e90\u7801\u770b\uff0c\u66f4\u5bb9\u6613\u7406\u89e3\u4e00\u4e9b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 def update(*args, **kwds): Like dict.update() but add counts instead of replacing them. Source can be an iterable, a dictionary, or another Counter instance. c = Counter( which ) c.update( witch ) # add elements from another iterable d = Counter( watch ) c.update(d) # add elements from another counter c[ h ] # four h in which, witch, and watch 4 # The regular dict.update() operation makes no sense here because the # replace behavior results in the some of original untouched counts # being mixed-in with all of the other counts for a mismash that # doesn t have a straight-forward interpretation in most counting # contexts. Instead, we implement straight-addition. Both the inputs # and outputs are allowed to contain zero and negative counts. if not args: raise TypeError( descriptor update of Counter object needs an argument ) self, *args = args if len(args) 1: raise TypeError( expected at most 1 arguments, got %d % len(args)) iterable = args[0] if args else None if iterable is not None: if isinstance(iterable, _collections_abc.Mapping): if self: self_get = self.get for elem, count in iterable.items(): self[elem] = count + self_get(elem, 0) else: super(Counter, self).update(iterable) # fast path when counter is empty else: _count_elements(self, iterable) if kwds: self.update(kwds) \u5b98\u7f51\u7ed9\u51fa\u4e00\u4e9b\u5e38\u89c1\u64cd\u4f5c\uff1a 1 2 3 4 5 6 7 8 9 sum ( c . values ()) # total of all counts c . clear () # reset all counts list ( c ) # list unique elements set ( c ) # convert to a set dict ( c ) # convert to a regular dictionary c . items () # convert to a list of (elem, cnt) pairs Counter ( dict ( list_of_pairs )) # convert from a list of (elem, cnt) pairs c . most_common ()[: - n - 1 : - 1 ] # n least common elements + c # remove zero and negative counts \u63d0\u4f9b\u4e86\u51e0\u4e2a\u6570\u5b66\u8fd0\u7b97\u6765\u7ec4\u5408Counter\u5bf9\u8c61\u4ee5\u751f\u6210\u591a\u4e2a\u96c6\u5408\uff08\u8ba1\u6570\u5927\u4e8e\u96f6\u7684\u8ba1\u6570\u5668\uff09\u3002 \u52a0\u6cd5\u548c\u51cf\u6cd5\u901a\u8fc7\u6dfb\u52a0\u6216\u51cf\u53bb\u76f8\u5e94\u5143\u7d20\u7684\u8ba1\u6570\u6765\u7ec4\u5408\u8ba1\u6570\u5668\u3002 \u548c | \u8fd4\u56de\u76f8\u5e94\u8ba1\u6570\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u3002 \u6bcf\u4e2a\u64cd\u4f5c\u90fd\u53ef\u4ee5\u63a5\u53d7\u5e26\u6709\u7b26\u53f7\u8ba1\u6570\u7684\u8f93\u5165\uff0c\u4f46\u8f93\u51fa\u5c06\u6392\u9664\u8ba1\u6570\u4e3a\u96f6\u6216\u66f4\u5c11\u7684\u7ed3\u679c\u3002 1 2 3 4 5 6 7 8 9 10 c = Counter ( a = 3 , b = 1 ) d = Counter ( a = 1 , b = 2 ) c + d # add two counters together: c[x] + d[x] Counter ({ a : 4 , b : 3 }) c - d # subtract (keeping only positive counts) Counter ({ a : 2 }) c d # intersection: min(c[x], d[x]) Counter ({ a : 1 , b : 1 }) c | d # union: max(c[x], d[x]) Counter ({ a : 3 , b : 2 }) \u4e00\u5143\u52a0\u6cd5\u548c\u51cf\u6cd5\u662f\u7528\u4e8e\u6dfb\u52a0\u7a7a\u8ba1\u6570\u5668\u6216\u4ece\u7a7a\u8ba1\u6570\u5668\u4e2d\u51cf\u53bb\u7684\u5feb\u6377\u65b9\u5f0f\u3002 1 2 3 4 5 c = Counter ( a = 2 , b =- 4 ) + c Counter ({ a : 2 }) - c Counter ({ b : 4 }) \u6ce8\u610f : Counter\u4e3b\u8981\u7528\u4e8e\u5904\u7406\u6b63\u6574\u6570\u7684\u8ba1\u6570\u3002\u4f46\u662f\u4e5f\u4e0d\u8981\u5fd8\u8bb0\u8003\u8651\u5176\u4ed6\u7c7b\u578b\u6216\u8d1f\u503c\u7684\u60c5\u51b5\u3002Counter\u7c7b\u7ee7\u627f\u81eadict\uff0c\u5bf9\u4e8ekey\u548cvalue\u662f\u6ca1\u6709\u9650\u5236\u7684\u3002value\u9664\u4e86\u6570\u5b57\u4e5f\u53ef\u4ee5\u5b58\u50a8\u5176\u4ed6\u3002","title":"collections.Counter"},{"location":"Python/python_collections_counter/#counter","text":"\u5b9e\u73b0\uff1a 1 class collections . Counter ([ iterable - or - mapping ]) \u6e90\u7801\u4e2d\uff0c\u7b80\u5355\u4ecb\u7ecd\u4e86\u4e00\u4e9b\u7528\u6cd5\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 c = Counter ( abcdeabcdabcaba ) # count elements from a string c . most_common ( 3 ) # three most common elements [( a , 5 ), ( b , 4 ), ( c , 3 )] sorted ( c ) # list all unique elements [ a , b , c , d , e ] . join ( sorted ( c . elements ())) # list elements with repetitions aaaaabbbbcccdde sum ( c . values ()) # total of all counts 15 c [ a ] # count of letter a 5 for elem in shazam : # update counts from an iterable ... c [ elem ] += 1 # by adding 1 to each element s count c [ a ] # now there are seven a 7 del c [ b ] # remove all b c [ b ] # now there are zero b 0 d = Counter ( simsalabim ) # make another counter c . update ( d ) # add in the second counter c [ a ] # now there are nine a 9 c . clear () # empty the counter c Counter () Note : If a count is set to zero or reduced to zero , it will remain in the counter until the entry is deleted or the counter is cleared : c = Counter ( aaabbc ) c [ b ] -= 2 # reduce the count of b by two c . most_common () # b is still in, but its count is zero [( a , 3 ), ( c , 1 ), ( b , 0 )] Counter \u662fdict\u7684\u5b50\u7c7b\uff0c\u53ef\u4ee5\u7528\u6765\u8ba1\u7b97\u53ef\u54c8\u5e0c\u5bf9\u8c61\u7684\u6570\u91cf\u3002\u5b83\u662f\u4e00\u4e2a\u65e0\u5e8f\u7684\u96c6\u5408\uff0c\u5e76\u4e14\u5143\u7d20\u4f5c\u4e3adict\u7684key\uff0c\u6570\u91cf\u4f5c\u4e3adict\u7684value\u3002\u6570\u91cf\u53ef\u4ee5\u662f\u4efb\u610f\u6574\u6570\u503c\uff0c\u5305\u62ec0\u548c\u8d1f\u6570\u3002 1 2 3 4 5 6 7 c = Counter () # a new, empty counter Counter ( adfadf ) # a new counter from an iterables Counter ({ a : 2 , d : 2 , f : 2 }) Counter ({ red : 4 , blue : 2 }) # a new counter from a mapping Counter ({ red : 4 , blue : 2 }) Counter ( cats = 4 , dogs = 8 ) # a new counter from keyword args Counter ({ dogs : 8 , cats : 4 }) \u5bf9\u4e8e\u90a3\u4e9b\u4e0d\u5b58\u5728\u7684\u5143\u7d20\uff0c\u5982\u679c\u60f3\u8981\u83b7\u53d6\u5b83\uff0cCounter\u4f1a\u8fd4\u56de0\uff0c\u800c\u4e0d\u4f1a\u5f15\u53d1 KeyError \uff1a 1 2 3 c = Counter ([ eggs , ham ]) c [ bacon ] # count of a missing element is zero 0 \u4ece\u6e90\u7801\u4e2d\u53ef\u4ee5\u770b\u51fa\u6765\u4e3a\u4ec0\u4e48\u4e0d\u5f15\u53d1 KeyError : 1 2 3 4 def __missing__ ( self , key ): The count of elements not in the Counter is zero. # Needed so that self[missing_item] does not raise KeyError return 0 \u5982\u679ccount\u8bbe\u7f6e\u4e3a\u96f6\u6216\u51cf\u5c11\u4e3a\u96f6\uff0c\u5b83\u5c06\u4fdd\u7559\u5728counter\u4e2d\uff0c\u76f4\u5230\u5220\u9664\u8be5\u6761\u76ee\u6216\u6e05\u9664\u8ba1\u6570\u5668\uff1a 1 2 c [ sausage ] = 0 # counter entry with a zero count del c [ sausage ] \u7531\u4e8eCounter\u662fdict\u7684\u5b50\u7c7b\uff0c\u56e0\u6b64\u4ed6\u5177\u5907dict\u7684\u65b9\u6cd5\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u5b83\u8fd8\u5177\u5907\u4ee5\u4e0b\u65b9\u6cd5\uff1a elements() \u8fd4\u56de\u6bcf\u4e00\u4e2a\u5143\u7d20\uff0c\u5143\u7d20\u4f1a\u6839\u636e\u4e2a\u6570\u91cd\u590dcount\u6b21\uff0c\u5e76\u4e14\u662f\u4ee5\u4efb\u610f\u987a\u5e8f\u8fd4\u56de\u7684\u3002\u5982\u679c\u5143\u7d20\u7684\u4e2a\u6570\u5c0f\u4e8e1(\u5305\u62ec\u8d1f\u503c)\uff0c\u90a3\u4e48\u5c31\u4f1a\u88ab\u5ffd\u7565\u4e0d\u8fd4\u56de 1 2 3 c = Counter(a=4, b=2, c=0, d=-2) sorted(c.elements()) [ a , a , a , a , b , b ] most_common([n]) \u8fd4\u56den\u4e2a\u6700\u5e38\u89c1\u5143\u7d20\u53ca\u5176\u8ba1\u6570\u7684\u5217\u8868\uff0c\u4ece\u6700\u5e38\u89c1\u5230\u6700\u5c11\u3002 \u5982\u679c\u7701\u7565n\u6216None\uff0c\u5219most_common\uff08\uff09\u8fd4\u56de\u8ba1\u6570\u5668\u4e2d\u7684\u6240\u6709\u5143\u7d20\u3002 \u5177\u6709\u76f8\u540c\u8ba1\u6570\u7684\u5143\u7d20\u662f\u4efb\u610f\u6392\u5e8f\u7684\uff1a 1 2 Counter( abracadabra ).most_common(3) [( a , 5), ( r , 2), ( b , 2)] subtract([iterable-or-mapping]) \u6839\u636e\u8fed\u4ee3\u5668\u6216\u6620\u5c04\u4e2d\u5bf9\u5f53\u524d\u5143\u7d20\u8fdb\u884c\u52a0\u51cf\u64cd\u4f5c\u3002\u548c dict.update() \u7c7b\u4f3c\uff0c\u4f46\u662f\u6ce8\u610f\uff0c\u662f\u64cd\u4f5c\uff0c\u800c\u4e0d\u662f\u66ff\u6362\u3002\u8f93\u5165\u548c\u8f93\u51fa\u53ef\u4ee5\u4e3a0\u6216\u8d1f\u6570 1 2 3 4 5 c = Counter(a=4, b=2, c=0, d=-2) d = Counter(a=1, b=2, c=3, d=4) c.subtract(d) c Counter({ a : 3, b : 0, c : -3, d : -6} \u901a\u5e38\u60c5\u51b5\u4e0b\uff0cCounter\u5bf9\u8c61\u548c\u5b57\u5178\u5177\u6709\u76f8\u540c\u7684\u65b9\u6cd5\u3002\u4f46\u662f\u4ee5\u4e0b\u4e24\u4e2a\u65b9\u6cd5\u4f1a\u6709\u6240\u4e0d\u540c\uff1a fromkeys(iterable) Counter\u7c7b\u6ca1\u6709\u5b9e\u73b0\u8fd9\u4e2a\u65b9\u6cd5 update([iterable-or-mapping]) \u548c dict.update() \u76f8\u4f3c\uff0c\u4f46\u662f\u662f\u8fdb\u884c\u52a0\u51cf\u64cd\u4f5c\uff0c\u800c\u4e0d\u662f\u66ff\u6362\u3002 \u4ece\u6e90\u7801\u770b\uff0c\u66f4\u5bb9\u6613\u7406\u89e3\u4e00\u4e9b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 def update(*args, **kwds): Like dict.update() but add counts instead of replacing them. Source can be an iterable, a dictionary, or another Counter instance. c = Counter( which ) c.update( witch ) # add elements from another iterable d = Counter( watch ) c.update(d) # add elements from another counter c[ h ] # four h in which, witch, and watch 4 # The regular dict.update() operation makes no sense here because the # replace behavior results in the some of original untouched counts # being mixed-in with all of the other counts for a mismash that # doesn t have a straight-forward interpretation in most counting # contexts. Instead, we implement straight-addition. Both the inputs # and outputs are allowed to contain zero and negative counts. if not args: raise TypeError( descriptor update of Counter object needs an argument ) self, *args = args if len(args) 1: raise TypeError( expected at most 1 arguments, got %d % len(args)) iterable = args[0] if args else None if iterable is not None: if isinstance(iterable, _collections_abc.Mapping): if self: self_get = self.get for elem, count in iterable.items(): self[elem] = count + self_get(elem, 0) else: super(Counter, self).update(iterable) # fast path when counter is empty else: _count_elements(self, iterable) if kwds: self.update(kwds) \u5b98\u7f51\u7ed9\u51fa\u4e00\u4e9b\u5e38\u89c1\u64cd\u4f5c\uff1a 1 2 3 4 5 6 7 8 9 sum ( c . values ()) # total of all counts c . clear () # reset all counts list ( c ) # list unique elements set ( c ) # convert to a set dict ( c ) # convert to a regular dictionary c . items () # convert to a list of (elem, cnt) pairs Counter ( dict ( list_of_pairs )) # convert from a list of (elem, cnt) pairs c . most_common ()[: - n - 1 : - 1 ] # n least common elements + c # remove zero and negative counts \u63d0\u4f9b\u4e86\u51e0\u4e2a\u6570\u5b66\u8fd0\u7b97\u6765\u7ec4\u5408Counter\u5bf9\u8c61\u4ee5\u751f\u6210\u591a\u4e2a\u96c6\u5408\uff08\u8ba1\u6570\u5927\u4e8e\u96f6\u7684\u8ba1\u6570\u5668\uff09\u3002 \u52a0\u6cd5\u548c\u51cf\u6cd5\u901a\u8fc7\u6dfb\u52a0\u6216\u51cf\u53bb\u76f8\u5e94\u5143\u7d20\u7684\u8ba1\u6570\u6765\u7ec4\u5408\u8ba1\u6570\u5668\u3002 \u548c | \u8fd4\u56de\u76f8\u5e94\u8ba1\u6570\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u3002 \u6bcf\u4e2a\u64cd\u4f5c\u90fd\u53ef\u4ee5\u63a5\u53d7\u5e26\u6709\u7b26\u53f7\u8ba1\u6570\u7684\u8f93\u5165\uff0c\u4f46\u8f93\u51fa\u5c06\u6392\u9664\u8ba1\u6570\u4e3a\u96f6\u6216\u66f4\u5c11\u7684\u7ed3\u679c\u3002 1 2 3 4 5 6 7 8 9 10 c = Counter ( a = 3 , b = 1 ) d = Counter ( a = 1 , b = 2 ) c + d # add two counters together: c[x] + d[x] Counter ({ a : 4 , b : 3 }) c - d # subtract (keeping only positive counts) Counter ({ a : 2 }) c d # intersection: min(c[x], d[x]) Counter ({ a : 1 , b : 1 }) c | d # union: max(c[x], d[x]) Counter ({ a : 3 , b : 2 }) \u4e00\u5143\u52a0\u6cd5\u548c\u51cf\u6cd5\u662f\u7528\u4e8e\u6dfb\u52a0\u7a7a\u8ba1\u6570\u5668\u6216\u4ece\u7a7a\u8ba1\u6570\u5668\u4e2d\u51cf\u53bb\u7684\u5feb\u6377\u65b9\u5f0f\u3002 1 2 3 4 5 c = Counter ( a = 2 , b =- 4 ) + c Counter ({ a : 2 }) - c Counter ({ b : 4 }) \u6ce8\u610f : Counter\u4e3b\u8981\u7528\u4e8e\u5904\u7406\u6b63\u6574\u6570\u7684\u8ba1\u6570\u3002\u4f46\u662f\u4e5f\u4e0d\u8981\u5fd8\u8bb0\u8003\u8651\u5176\u4ed6\u7c7b\u578b\u6216\u8d1f\u503c\u7684\u60c5\u51b5\u3002Counter\u7c7b\u7ee7\u627f\u81eadict\uff0c\u5bf9\u4e8ekey\u548cvalue\u662f\u6ca1\u6709\u9650\u5236\u7684\u3002value\u9664\u4e86\u6570\u5b57\u4e5f\u53ef\u4ee5\u5b58\u50a8\u5176\u4ed6\u3002","title":"Counter"},{"location":"Python/python_collections_deque/","text":"deque \u5b9e\u73b0\uff1a 1 class collections . deque ([ iterable [, maxlen ]]) \u8fd4\u56de\u4e00\u4e2a\u65b0\u7684deque\uff08\u53cc\u7aef\u961f\u5217\uff09\u5bf9\u8c61\uff0c\u5b83\u521d\u59cb\u5316\u81ea iterable \u3002 \u5982\u679c\u672a\u6307\u5b9aiterable\uff0c\u5219\u65b0\u7684deque\u4e3a\u7a7a\u3002 Deques\u662f\u5806\u6808\u548c\u961f\u5217\u7684\u6cdb\u5316(\u540d\u79f0\u53d1\u97f3\u4e3a\u201cdeck\u201d\uff0c\u662f\u201c\u53cc\u7aef\u961f\u5217\u201d\u7684\u7f29\u5199)\u3002Deques\u652f\u6301\u4ecedeque\u7684\u4efb\u610f\u4e00\u4fa7\u7ebf\u7a0b\u5b89\u5168\u3001\u5185\u5b58\u9ad8\u6548\u7684 appends \u548c pop \uff0c\u5728\u4efb\u4f55\u65b9\u5411\u4e0a\u7684\u6027\u80fd\u90fd\u5927\u81f4\u76f8\u540c\u90fd\u662fO(1)\u3002 \u5c3d\u7ba1 list \u5bf9\u8c61\u652f\u6301\u7c7b\u4f3c\u7684\u64cd\u4f5c\uff0c\u4f46\u5b83\u4eec\u9488\u5bf9\u5feb\u901f\u56fa\u5b9a\u957f\u5ea6\u64cd\u4f5c\u8fdb\u884c\u4e86\u4f18\u5316\uff0c\u5e76\u5bfc\u81f4pop(0)\u548cinsert(0\uff0cv)\u64cd\u4f5c\u6709O(n)\u5185\u5b58\u79fb\u52a8\u6210\u672c\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u6539\u53d8\u4e86\u5e95\u5c42\u6570\u636e\u8868\u793a\u7684\u5927\u5c0f\u548c\u4f4d\u7f6e\u3002 \u5982\u679c\u672a\u6307\u5b9a maxlen \u6216\u4e3aNone\uff0c\u5219deques\u53ef\u80fd\u4f1a\u589e\u957f\u5230\u4efb\u610f\u957f\u5ea6\u3002 \u5426\u5219\uff0c\u53cc\u7aef\u961f\u5217\u9650\u5236\u4e3a\u6307\u5b9a\u7684\u6700\u5927\u957f\u5ea6\u3002 \u4e00\u65e6\u6709\u754c\u957f\u5ea6\u53cc\u7aef\u961f\u5217\u5df2\u6ee1\uff0c\u5f53\u6dfb\u52a0\u65b0\u9879\u65f6\uff0c\u5219\u4f1a\u4ece\u5bf9\u65b9\u7aef\u4e22\u5f03\u76f8\u5e94\u6570\u91cf\u7684\u9879\u3002 \u6709\u754c\u957f\u5ea6deques\u63d0\u4f9b\u7c7b\u4f3c\u4e8eUnix\u4e2d\u7684 tail \u8fc7\u6ee4\u5668\u7684\u529f\u80fd\u3002 \u5b83\u4eec\u8fd8\u53ef\u7528\u4e8e\u8ddf\u8e2a\u4ec5\u6d89\u53ca\u6700\u8fd1\u6d3b\u52a8\u7684\u4e8b\u52a1\u548c\u5176\u4ed6\u6570\u636e\u6c60\u3002 Deque\u5bf9\u8c61\u652f\u6301\u4ee5\u4e0b\u65b9\u6cd5\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 append ( x ) # \u4ecedeque\u7684\u53f3\u8fb9\u52a0\u5165x appendleft ( x ) #\u4ecedeque\u7684\u5de6\u8fb9\u52a0\u5165x clear () #\u6e05\u9664deque\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\uff0c\u4f7f\u5176\u957f\u5ea6\u4e3a0 copy () # \u521b\u5efa\u4e00\u4e2adeque\u7684\u6d45\u62f7\u8d1d count ( x ) # deque\u4e2d\u5143\u7d20\u7b49\u4e8ex\u7684\u6570\u91cf extend ( iterable ) # \u4ece\u53f3\u4fa7\u6269\u5c55deque extendleft ( iterable ) # \u4ece\u5de6\u4fa7\u6269\u5c55deque\u3002\u4f46\u662f\uff0c\u5de6\u8fb9\u6269\u5c55\u7684\u5e8f\u5217\u662f\u53cd\u8f6citerable\u7684\u987a\u5e8f index ( x [, start [, stop ]]) # \u8fd4\u56dedeque\u4e2d\u7684x\u4f4d\u7f6e\uff08\u5728\u7d22\u5f15\u5f00\u59cb\u65f6\u6216\u7d22\u5f15\u505c\u6b62\u4e4b\u524d\uff09\u3002\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5339\u914d\u7684\u5bf9\u8c61\uff0c\u5982\u679c\u6ca1\u627e\u5230\uff0c\u4f1a\u629b\u51fa`ValueError` insert ( i , x ) # \u5c06x\u63d2\u5165\u5230deque\u7684\u4f4d\u7f6ei\u3002\u5982\u679c\u63d2\u5165\u540e\u5bfc\u81f4deque\u8d85\u8fc7`maxlen`\uff0c\u4f1a\u629b\u51fa`IndexError` pop () # \u4ecedeque\u7684\u53f3\u4fa7\u79fb\u9664\u5e76\u8fd4\u56de\u4e00\u4e2a\u5143\u7d20\u3002 \u5982\u679c\u6ca1\u6709\u5143\u7d20\uff0c\u5219\u4f1a\u629b\u51faIndexError\u3002 popleft () # \u4ecedeque\u7684\u5de6\u4fa7\u79fb\u9664\u5e76\u8fd4\u56de\u4e00\u4e2a\u5143\u7d20\u3002 \u5982\u679c\u6ca1\u6709\u5143\u7d20\uff0c\u5219\u4f1a\u629b\u51faIndexError\u3002 remove ( value ) # \u5220\u9664\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u503c\u3002 \u5982\u679c\u672a\u627e\u5230\uff0c\u5219\u4f1a\u629b\u51faValueError reverse () # \u5728\u539f\u4f4d\u53cd\u8f6cdeque\u7684\u5143\u7d20\uff0c\u7136\u540e\u8fd4\u56deNone rotate ( n = 1 ) # \u5411\u53f3\u65cb\u8f6cdeque n\u6b65\u3002 \u5982\u679cn\u4e3a\u8d1f\u6570\uff0c\u5219\u5411\u5de6\u65cb\u8f6c\u3002 # \u5f53\u53cc\u7aef\u961f\u5217\u4e0d\u4e3a\u7a7a\u65f6\uff0c\u5411\u53f3\u65cb\u8f6c\u4e00\u6b65\u76f8\u5f53\u4e8ed.appendleft(d.pop())\uff0c\u5411\u5de6\u65cb\u8f6c\u4e00\u6b65\u76f8\u5f53\u4e8ed.append(d.popleft())\u3002 Deque\u5bf9\u8c61\u8fd8\u63d0\u4f9b\u4e00\u4e2a\u53ea\u8bfb\u5c5e\u6027\uff1a 1 maxlen # deque\u7684\u5927\u5c0f\uff0c\u5982\u679c\u65e0\u754c\uff0c\u5219\u4e3aNone \u9664\u4e0a\u8ff0\u4e4b\u5916\uff0cdeques\u652f\u6301\u8fed\u4ee3\uff0cpickling, len(d), reverse(d), copy.copy(d), copy.deepcopy(d), \u4f7f\u7528 in \u8fd0\u7b97\u7b26\u8fdb\u884c\u6210\u5458\u8d44\u683c\u6d4b\u8bd5\uff0c\u4ee5\u53ca\u4e0b\u6807\u5f15\u7528\uff0c\u4f8b\u5982d[-1]\u3002 \u7d22\u5f15\u8bbf\u95ee\u5728\u4e24\u7aef\u90fd\u662fO(1), \u4f46\u5728\u4e2d\u95f4\u51cf\u6162\u5230O(n)\u3002 \u5bf9\u4e8e\u5feb\u901f\u968f\u673a\u8bbf\u95ee\uff0c\u8bf7\u6539\u7528list\u3002 \u6817\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 from collections import deque d = deque ( ghi ) # make a new deque with three items for elem in d : # iterate over the deque s elements ... print ( elem . upper ()) G H I d . append ( j ) # add a new entry to the right side d . appendleft ( f ) # add a new entry to the left side d # show the representation of the deque deque ([ f , g , h , i , j ]) d . pop () # return and remove the rightmost item j d . popleft () # return and remove the leftmost item f list ( d ) # list the contents of the deque [ g , h , i ] d [ 0 ] # peek at leftmost item g d [ - 1 ] # peek at rightmost item i list ( reversed ( d )) # list the contents of a deque in reverse [ i , h , g ] h in d # search the deque True d . extend ( jkl ) # add multiple elements at once d deque ([ g , h , i , j , k , l ]) d . rotate ( 1 ) # right rotation d deque ([ l , g , h , i , j , k ]) d . rotate ( - 1 ) # left rotation d deque ([ g , h , i , j , k , l ]) deque ( reversed ( d )) # make a new deque in reverse order deque ([ l , k , j , i , h , g ]) d . clear () # empty the deque d . pop () # cannot pop from an empty deque Traceback ( most recent call last ): File pyshell#6 , line 1 , in - toplevel - d . pop () IndexError : pop from an empty deque d . extendleft ( abc ) # extendleft() reverses the input order d deque ([ c , b , a ]) \u63a5\u4e0b\u6765\uff0c\u4ecb\u7ecd\u4e00\u4e9bdeque\u7684\u4f7f\u7528\u65b9\u6cd5 \u6709\u754c\u957f\u5ea6deques\u63d0\u4f9b\u7c7b\u4f3c\u4e8eUnix\u4e2d\u7684 tail \u8fc7\u6ee4\u5668\u7684\u529f\u80fd\uff1a 1 2 3 4 def tail ( filename , n = 10 ): Return the last n lines of a file with open ( filename ) as f : return deque ( f , n ) \u4f7f\u7528deques\u7684\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u901a\u8fc7\u5411\u53f3\u8ffd\u52a0\u5e76\u5f39\u51fa\u5230\u5de6\u4fa7\u6765\u7ef4\u62a4\u4e00\u7cfb\u5217\u6700\u8fd1\u6dfb\u52a0\u7684\u5143\u7d20\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 from collections import deque import itertools def moving_average ( iterable , n = 3 ): # moving_average([40, 30, 50, 46, 39, 44]) -- 40.0 42.0 45.0 43.0 # http://en.wikipedia.org/wiki/Moving_average it = iter ( iterable ) d = deque ( itertools . islice ( it , n - 1 )) d . appendleft ( 0 ) s = sum ( d ) for elem in it : s += elem - d . popleft () d . append ( elem ) yield s / n if __name__ == __main__ : for i in moving_average ([ 40 , 30 , 50 , 46 , 39 , 44 ]): print ( i ) \u7ed3\u679c\uff1a 40.0 42.0 45.0 43.0 \u53ef\u4ee5\u4f7f\u7528\u5b58\u50a8\u5728\u53cc\u7aef\u961f\u5217\u4e2d\u7684\u8f93\u5165\u8fed\u4ee3\u5668\u6765\u5b9e\u73b0\u5faa\u73af\u8c03\u5ea6\u7a0b\u5e8f\u3002 \u503c\u4ece\u4f4d\u7f6e\u96f6\u5904\u7684\u6d3b\u52a8\u8fed\u4ee3\u5668\u4ea7\u751f\u3002 \u5982\u679c\u8be5\u8fed\u4ee3\u5668\u8017\u5c3d\uff0c\u53ef\u4ee5\u4f7f\u7528popleft()\u5220\u9664\u5b83; \u5426\u5219\uff0c\u5b83\u53ef\u4ee5\u4f7f\u7528rotate()\u65b9\u6cd5\u5faa\u73af\u56de\u5230\u6700\u540e\uff1a 1 2 3 4 5 6 7 8 9 10 11 def roundrobin ( * iterables ): roundrobin( ABC , D , EF ) -- A D E B F C iterators = deque ( map ( iter , iterables )) while iterators : try : while True : yield next ( iterators [ 0 ]) iterators . rotate ( - 1 ) except StopIteration : # Remove an exhausted iterator. iterators . popleft () rotate() \u65b9\u6cd5\u63d0\u4f9b\u4e86\u4e00\u79cd\u5b9e\u73b0\u53cc\u7aef\u5207\u7247\u548c\u5220\u9664\u7684\u65b9\u6cd5\u3002 \u4f8b\u5982\uff0c del d[n] \u7684\u7eafPython\u5b9e\u73b0\u4f9d\u8d56\u4e8e rotate() \u65b9\u6cd5\u6765\u5b9a\u4f4d\u8981\u5f39\u51fa\u7684\u5143\u7d20\uff1a 1 2 3 4 def delete_nth ( d , n ): d . rotate ( - n ) d . popleft () d . rotate ( n ) \u8981\u5b9e\u73b0\u53cc\u7aef\u5207\u7247\uff0c\u8bf7\u4f7f\u7528\u7c7b\u4f3c\u7684\u65b9\u6cd5\u5e94\u7528 rotate() \u5c06\u76ee\u6807\u5143\u7d20\u7f6e\u4e8e\u53cc\u7aef\u961f\u5217\u7684\u5de6\u4fa7\u3002 \u4f7f\u7528 popleft() \u5220\u9664\u65e7\u6761\u76ee\uff0c\u4f7f\u7528 extend() \u6dfb\u52a0\u65b0\u6761\u76ee\uff0c\u7136\u540e\u53cd\u8f6c\u65cb\u8f6c\u3002 \u901a\u8fc7\u8be5\u65b9\u6cd5\u7684\u5fae\u5c0f\u53d8\u5316\uff0c\u53ef\u4ee5\u8f7b\u677e\u5b9e\u73b0Forth\u6837\u5f0f\u5806\u6808\u64cd\u4f5c\uff0c\u4f8b\u5982dup\uff0cdrop\uff0cswap\uff0cover\uff0cpick\uff0crot\u548croll\u3002","title":"collections.deque"},{"location":"Python/python_collections_deque/#deque","text":"\u5b9e\u73b0\uff1a 1 class collections . deque ([ iterable [, maxlen ]]) \u8fd4\u56de\u4e00\u4e2a\u65b0\u7684deque\uff08\u53cc\u7aef\u961f\u5217\uff09\u5bf9\u8c61\uff0c\u5b83\u521d\u59cb\u5316\u81ea iterable \u3002 \u5982\u679c\u672a\u6307\u5b9aiterable\uff0c\u5219\u65b0\u7684deque\u4e3a\u7a7a\u3002 Deques\u662f\u5806\u6808\u548c\u961f\u5217\u7684\u6cdb\u5316(\u540d\u79f0\u53d1\u97f3\u4e3a\u201cdeck\u201d\uff0c\u662f\u201c\u53cc\u7aef\u961f\u5217\u201d\u7684\u7f29\u5199)\u3002Deques\u652f\u6301\u4ecedeque\u7684\u4efb\u610f\u4e00\u4fa7\u7ebf\u7a0b\u5b89\u5168\u3001\u5185\u5b58\u9ad8\u6548\u7684 appends \u548c pop \uff0c\u5728\u4efb\u4f55\u65b9\u5411\u4e0a\u7684\u6027\u80fd\u90fd\u5927\u81f4\u76f8\u540c\u90fd\u662fO(1)\u3002 \u5c3d\u7ba1 list \u5bf9\u8c61\u652f\u6301\u7c7b\u4f3c\u7684\u64cd\u4f5c\uff0c\u4f46\u5b83\u4eec\u9488\u5bf9\u5feb\u901f\u56fa\u5b9a\u957f\u5ea6\u64cd\u4f5c\u8fdb\u884c\u4e86\u4f18\u5316\uff0c\u5e76\u5bfc\u81f4pop(0)\u548cinsert(0\uff0cv)\u64cd\u4f5c\u6709O(n)\u5185\u5b58\u79fb\u52a8\u6210\u672c\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u6539\u53d8\u4e86\u5e95\u5c42\u6570\u636e\u8868\u793a\u7684\u5927\u5c0f\u548c\u4f4d\u7f6e\u3002 \u5982\u679c\u672a\u6307\u5b9a maxlen \u6216\u4e3aNone\uff0c\u5219deques\u53ef\u80fd\u4f1a\u589e\u957f\u5230\u4efb\u610f\u957f\u5ea6\u3002 \u5426\u5219\uff0c\u53cc\u7aef\u961f\u5217\u9650\u5236\u4e3a\u6307\u5b9a\u7684\u6700\u5927\u957f\u5ea6\u3002 \u4e00\u65e6\u6709\u754c\u957f\u5ea6\u53cc\u7aef\u961f\u5217\u5df2\u6ee1\uff0c\u5f53\u6dfb\u52a0\u65b0\u9879\u65f6\uff0c\u5219\u4f1a\u4ece\u5bf9\u65b9\u7aef\u4e22\u5f03\u76f8\u5e94\u6570\u91cf\u7684\u9879\u3002 \u6709\u754c\u957f\u5ea6deques\u63d0\u4f9b\u7c7b\u4f3c\u4e8eUnix\u4e2d\u7684 tail \u8fc7\u6ee4\u5668\u7684\u529f\u80fd\u3002 \u5b83\u4eec\u8fd8\u53ef\u7528\u4e8e\u8ddf\u8e2a\u4ec5\u6d89\u53ca\u6700\u8fd1\u6d3b\u52a8\u7684\u4e8b\u52a1\u548c\u5176\u4ed6\u6570\u636e\u6c60\u3002 Deque\u5bf9\u8c61\u652f\u6301\u4ee5\u4e0b\u65b9\u6cd5\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 append ( x ) # \u4ecedeque\u7684\u53f3\u8fb9\u52a0\u5165x appendleft ( x ) #\u4ecedeque\u7684\u5de6\u8fb9\u52a0\u5165x clear () #\u6e05\u9664deque\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\uff0c\u4f7f\u5176\u957f\u5ea6\u4e3a0 copy () # \u521b\u5efa\u4e00\u4e2adeque\u7684\u6d45\u62f7\u8d1d count ( x ) # deque\u4e2d\u5143\u7d20\u7b49\u4e8ex\u7684\u6570\u91cf extend ( iterable ) # \u4ece\u53f3\u4fa7\u6269\u5c55deque extendleft ( iterable ) # \u4ece\u5de6\u4fa7\u6269\u5c55deque\u3002\u4f46\u662f\uff0c\u5de6\u8fb9\u6269\u5c55\u7684\u5e8f\u5217\u662f\u53cd\u8f6citerable\u7684\u987a\u5e8f index ( x [, start [, stop ]]) # \u8fd4\u56dedeque\u4e2d\u7684x\u4f4d\u7f6e\uff08\u5728\u7d22\u5f15\u5f00\u59cb\u65f6\u6216\u7d22\u5f15\u505c\u6b62\u4e4b\u524d\uff09\u3002\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5339\u914d\u7684\u5bf9\u8c61\uff0c\u5982\u679c\u6ca1\u627e\u5230\uff0c\u4f1a\u629b\u51fa`ValueError` insert ( i , x ) # \u5c06x\u63d2\u5165\u5230deque\u7684\u4f4d\u7f6ei\u3002\u5982\u679c\u63d2\u5165\u540e\u5bfc\u81f4deque\u8d85\u8fc7`maxlen`\uff0c\u4f1a\u629b\u51fa`IndexError` pop () # \u4ecedeque\u7684\u53f3\u4fa7\u79fb\u9664\u5e76\u8fd4\u56de\u4e00\u4e2a\u5143\u7d20\u3002 \u5982\u679c\u6ca1\u6709\u5143\u7d20\uff0c\u5219\u4f1a\u629b\u51faIndexError\u3002 popleft () # \u4ecedeque\u7684\u5de6\u4fa7\u79fb\u9664\u5e76\u8fd4\u56de\u4e00\u4e2a\u5143\u7d20\u3002 \u5982\u679c\u6ca1\u6709\u5143\u7d20\uff0c\u5219\u4f1a\u629b\u51faIndexError\u3002 remove ( value ) # \u5220\u9664\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u503c\u3002 \u5982\u679c\u672a\u627e\u5230\uff0c\u5219\u4f1a\u629b\u51faValueError reverse () # \u5728\u539f\u4f4d\u53cd\u8f6cdeque\u7684\u5143\u7d20\uff0c\u7136\u540e\u8fd4\u56deNone rotate ( n = 1 ) # \u5411\u53f3\u65cb\u8f6cdeque n\u6b65\u3002 \u5982\u679cn\u4e3a\u8d1f\u6570\uff0c\u5219\u5411\u5de6\u65cb\u8f6c\u3002 # \u5f53\u53cc\u7aef\u961f\u5217\u4e0d\u4e3a\u7a7a\u65f6\uff0c\u5411\u53f3\u65cb\u8f6c\u4e00\u6b65\u76f8\u5f53\u4e8ed.appendleft(d.pop())\uff0c\u5411\u5de6\u65cb\u8f6c\u4e00\u6b65\u76f8\u5f53\u4e8ed.append(d.popleft())\u3002 Deque\u5bf9\u8c61\u8fd8\u63d0\u4f9b\u4e00\u4e2a\u53ea\u8bfb\u5c5e\u6027\uff1a 1 maxlen # deque\u7684\u5927\u5c0f\uff0c\u5982\u679c\u65e0\u754c\uff0c\u5219\u4e3aNone \u9664\u4e0a\u8ff0\u4e4b\u5916\uff0cdeques\u652f\u6301\u8fed\u4ee3\uff0cpickling, len(d), reverse(d), copy.copy(d), copy.deepcopy(d), \u4f7f\u7528 in \u8fd0\u7b97\u7b26\u8fdb\u884c\u6210\u5458\u8d44\u683c\u6d4b\u8bd5\uff0c\u4ee5\u53ca\u4e0b\u6807\u5f15\u7528\uff0c\u4f8b\u5982d[-1]\u3002 \u7d22\u5f15\u8bbf\u95ee\u5728\u4e24\u7aef\u90fd\u662fO(1), \u4f46\u5728\u4e2d\u95f4\u51cf\u6162\u5230O(n)\u3002 \u5bf9\u4e8e\u5feb\u901f\u968f\u673a\u8bbf\u95ee\uff0c\u8bf7\u6539\u7528list\u3002 \u6817\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 from collections import deque d = deque ( ghi ) # make a new deque with three items for elem in d : # iterate over the deque s elements ... print ( elem . upper ()) G H I d . append ( j ) # add a new entry to the right side d . appendleft ( f ) # add a new entry to the left side d # show the representation of the deque deque ([ f , g , h , i , j ]) d . pop () # return and remove the rightmost item j d . popleft () # return and remove the leftmost item f list ( d ) # list the contents of the deque [ g , h , i ] d [ 0 ] # peek at leftmost item g d [ - 1 ] # peek at rightmost item i list ( reversed ( d )) # list the contents of a deque in reverse [ i , h , g ] h in d # search the deque True d . extend ( jkl ) # add multiple elements at once d deque ([ g , h , i , j , k , l ]) d . rotate ( 1 ) # right rotation d deque ([ l , g , h , i , j , k ]) d . rotate ( - 1 ) # left rotation d deque ([ g , h , i , j , k , l ]) deque ( reversed ( d )) # make a new deque in reverse order deque ([ l , k , j , i , h , g ]) d . clear () # empty the deque d . pop () # cannot pop from an empty deque Traceback ( most recent call last ): File pyshell#6 , line 1 , in - toplevel - d . pop () IndexError : pop from an empty deque d . extendleft ( abc ) # extendleft() reverses the input order d deque ([ c , b , a ]) \u63a5\u4e0b\u6765\uff0c\u4ecb\u7ecd\u4e00\u4e9bdeque\u7684\u4f7f\u7528\u65b9\u6cd5 \u6709\u754c\u957f\u5ea6deques\u63d0\u4f9b\u7c7b\u4f3c\u4e8eUnix\u4e2d\u7684 tail \u8fc7\u6ee4\u5668\u7684\u529f\u80fd\uff1a 1 2 3 4 def tail ( filename , n = 10 ): Return the last n lines of a file with open ( filename ) as f : return deque ( f , n ) \u4f7f\u7528deques\u7684\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u901a\u8fc7\u5411\u53f3\u8ffd\u52a0\u5e76\u5f39\u51fa\u5230\u5de6\u4fa7\u6765\u7ef4\u62a4\u4e00\u7cfb\u5217\u6700\u8fd1\u6dfb\u52a0\u7684\u5143\u7d20\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 from collections import deque import itertools def moving_average ( iterable , n = 3 ): # moving_average([40, 30, 50, 46, 39, 44]) -- 40.0 42.0 45.0 43.0 # http://en.wikipedia.org/wiki/Moving_average it = iter ( iterable ) d = deque ( itertools . islice ( it , n - 1 )) d . appendleft ( 0 ) s = sum ( d ) for elem in it : s += elem - d . popleft () d . append ( elem ) yield s / n if __name__ == __main__ : for i in moving_average ([ 40 , 30 , 50 , 46 , 39 , 44 ]): print ( i ) \u7ed3\u679c\uff1a 40.0 42.0 45.0 43.0 \u53ef\u4ee5\u4f7f\u7528\u5b58\u50a8\u5728\u53cc\u7aef\u961f\u5217\u4e2d\u7684\u8f93\u5165\u8fed\u4ee3\u5668\u6765\u5b9e\u73b0\u5faa\u73af\u8c03\u5ea6\u7a0b\u5e8f\u3002 \u503c\u4ece\u4f4d\u7f6e\u96f6\u5904\u7684\u6d3b\u52a8\u8fed\u4ee3\u5668\u4ea7\u751f\u3002 \u5982\u679c\u8be5\u8fed\u4ee3\u5668\u8017\u5c3d\uff0c\u53ef\u4ee5\u4f7f\u7528popleft()\u5220\u9664\u5b83; \u5426\u5219\uff0c\u5b83\u53ef\u4ee5\u4f7f\u7528rotate()\u65b9\u6cd5\u5faa\u73af\u56de\u5230\u6700\u540e\uff1a 1 2 3 4 5 6 7 8 9 10 11 def roundrobin ( * iterables ): roundrobin( ABC , D , EF ) -- A D E B F C iterators = deque ( map ( iter , iterables )) while iterators : try : while True : yield next ( iterators [ 0 ]) iterators . rotate ( - 1 ) except StopIteration : # Remove an exhausted iterator. iterators . popleft () rotate() \u65b9\u6cd5\u63d0\u4f9b\u4e86\u4e00\u79cd\u5b9e\u73b0\u53cc\u7aef\u5207\u7247\u548c\u5220\u9664\u7684\u65b9\u6cd5\u3002 \u4f8b\u5982\uff0c del d[n] \u7684\u7eafPython\u5b9e\u73b0\u4f9d\u8d56\u4e8e rotate() \u65b9\u6cd5\u6765\u5b9a\u4f4d\u8981\u5f39\u51fa\u7684\u5143\u7d20\uff1a 1 2 3 4 def delete_nth ( d , n ): d . rotate ( - n ) d . popleft () d . rotate ( n ) \u8981\u5b9e\u73b0\u53cc\u7aef\u5207\u7247\uff0c\u8bf7\u4f7f\u7528\u7c7b\u4f3c\u7684\u65b9\u6cd5\u5e94\u7528 rotate() \u5c06\u76ee\u6807\u5143\u7d20\u7f6e\u4e8e\u53cc\u7aef\u961f\u5217\u7684\u5de6\u4fa7\u3002 \u4f7f\u7528 popleft() \u5220\u9664\u65e7\u6761\u76ee\uff0c\u4f7f\u7528 extend() \u6dfb\u52a0\u65b0\u6761\u76ee\uff0c\u7136\u540e\u53cd\u8f6c\u65cb\u8f6c\u3002 \u901a\u8fc7\u8be5\u65b9\u6cd5\u7684\u5fae\u5c0f\u53d8\u5316\uff0c\u53ef\u4ee5\u8f7b\u677e\u5b9e\u73b0Forth\u6837\u5f0f\u5806\u6808\u64cd\u4f5c\uff0c\u4f8b\u5982dup\uff0cdrop\uff0cswap\uff0cover\uff0cpick\uff0crot\u548croll\u3002","title":"deque"},{"location":"Python/python_collections_namedtuple/","text":"collection\u6a21\u5757\u5b9e\u73b0\u4e86\u4e13\u95e8\u7684\u5bb9\u5668\u6570\u636e\u7c7b\u578b\uff0c\u4e3aPython\u7684\u901a\u7528\u5185\u7f6e\u5bb9\u5668 dict \uff0c list \uff0c set \u548c tuple \u63d0\u4f9b\u4e86\u66ff\u4ee3\u65b9\u6848\u3002\u63a5\u4e0b\u6765\uff0c\u5c06\u5206\u522b\u4ecb\u7ecd\u4ed6\u4eec\u3002 namedtuple() \u5305\u542b\u547d\u540d\u5b57\u6bb5\u7684\u5143\u7ec4\u5de5\u5382\u65b9\u6cd5 \u547d\u540d\u5143\u7ec4\u4e3a\u5143\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u8d4b\u4e88\u542b\u4e49\uff0c\u5e76\u5141\u8bb8\u66f4\u53ef\u8bfb\uff0c\u81ea\u6587\u6863\u4ee3\u7801\u3002 \u5b83\u4eec\u53ef\u4ee5\u5728\u4f7f\u7528\u5e38\u89c4\u5143\u7ec4\u7684\u4efb\u4f55\u5730\u65b9\u4f7f\u7528\uff0c\u5e76\u4e14\u5b83\u4eec\u6dfb\u52a0\u4e86\u6309\u540d\u79f0\u800c\u4e0d\u662f\u4f4d\u7f6e\u7d22\u5f15\u8bbf\u95ee\u5b57\u6bb5\u7684\u529f\u80fd\u3002 \u5b9e\u73b0\uff1a 1 collections . namedtuple ( typename , field_names , * , rename = False , defaults = None , module = None ) \u8fd4\u56de\u4e00\u4e2a\u540d\u4e3a typename \u7684\u65b0\u5143\u7ec4\u5b50\u7c7b\u3002 \u65b0\u5b50\u7c7b\u7528\u4e8e\u521b\u5efa\u7c7b\u4f3c\u5143\u7ec4\u7684\u5bf9\u8c61\uff0c\u8fd9\u4e9b\u5bf9\u8c61\u5177\u6709\u53ef\u901a\u8fc7\u5c5e\u6027\u67e5\u627e\u8bbf\u95ee\u7684\u5b57\u6bb5\u4ee5\u53ca\u53ef\u7d22\u5f15\u548c\u53ef\u8fed\u4ee3\u7684\u5b57\u6bb5\u3002 \u5b50\u7c7b\u7684\u5b9e\u4f8b\u8fd8\u6709\u4e00\u4e2a\u6709\u7528\u7684\u6587\u6863\u5b57\u7b26\u4e32\uff08\u5e26\u6709 typename \u548c field_names \uff09\u548c\u4e00\u4e2a\u6709\u7528\u7684 __repr __() \u65b9\u6cd5\uff0c\u5b83\u4ee5 name = value \u683c\u5f0f\u5217\u51fa\u5143\u7ec4\u5185\u5bb9\u3002 field_names \u662f\u4e00\u7cfb\u5217\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982 ['x'\uff0c'y'] \u3002 \u6216\u8005\uff0c field_names \u53ef\u4ee5\u662f\u5355\u4e2a\u5b57\u7b26\u4e32\uff0c\u6bcf\u4e2a\u5b57\u6bb5\u540d\u7531 \u7a7a\u683c \u548c / \u6216 \u9017\u53f7 \u5206\u9694\uff0c\u4f8b\u5982 'x y' \u6216 'x\uff0cy' \u3002 \u9664\u4e86\u4ee5\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u540d\u79f0\u5916\uff0c\u4efb\u4f55\u6709\u6548\u7684Python\u6807\u8bc6\u7b26\u90fd\u53ef\u7528\u4e8e\u5b57\u6bb5\u540d\u3002\u6709\u6548\u6807\u8bc6\u7b26\u7531\u5b57\u6bcd\uff0c\u6570\u5b57\u548c\u4e0b\u5212\u7ebf\u7ec4\u6210\uff0c\u4f46\u4e0d\u4ee5\u6570\u5b57\u6216\u4e0b\u5212\u7ebf\u5f00\u5934\uff0c\u4e5f\u4e0d\u80fd\u662f\u7c7b\uff0cfor\uff0creturn\uff0cglobal\uff0cpass\u6216raise\u7b49\u5173\u952e\u5b57\u3002 \u5982\u679c rename \u4e3a true \uff0c\u5219\u65e0\u6548\u7684\u5b57\u6bb5\u540d\u79f0\u5c06\u81ea\u52a8\u66ff\u6362\u4e3a\u4f4d\u7f6e\u540d\u79f0\u3002 \u4f8b\u5982\uff0c ['abc'\uff0c'def'\uff0c'ghi'\uff0c'abc'] \u88ab\u8f6c\u6362\u4e3a ['abc'\uff0c'_1'\uff0c'ghi'\uff0c'_3'] \uff0c\u6d88\u9664\u4e86\u5173\u952e\u5b57 def \u548c\u91cd\u590d\u7684\u5b57\u6bb5\u540d abc \u3002 defaults \u53ef\u4ee5\u662fNone\u6216\u53ef\u8fed\u4ee3\u7684\u9ed8\u8ba4\u503c\u3002 \u7531\u4e8e\u5177\u6709\u9ed8\u8ba4\u503c\u7684\u5b57\u6bb5\u5fc5\u987b\u4f4d\u4e8e\u6ca1\u6709\u9ed8\u8ba4\u503c\u7684\u4efb\u4f55\u5b57\u6bb5\u4e4b\u540e\uff0c\u56e0\u6b64\u9ed8\u8ba4\u503c\u5c06\u5e94\u7528\u4e8e\u6700\u53f3\u4fa7\u7684\u53c2\u6570\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u5b57\u6bb5\u540d\u662f['x'\uff0c'y'\uff0c'z']\u5e76\u4e14\u9ed8\u8ba4\u503c\u662f\uff081,2\uff09\uff0c\u5219x\u5c06\u662f\u5fc5\u9700\u53c2\u6570\uff0cy\u5c06\u9ed8\u8ba4\u4e3a1\uff0cz\u5c06\u9ed8\u8ba4\u4e3a2\u3002 \u5982\u679c\u5b9a\u4e49\u4e86 module \uff0c\u5219\u5c06\u547d\u540d\u5143\u7ec4\u7684 __module__ \u5c5e\u6027\u8bbe\u7f6e\u4e3a\u8be5\u503c\u3002 \u547d\u540d\u7684\u5143\u7ec4\u5b9e\u4f8b\u6ca1\u6709\u6bcf\u4e2a\u5b9e\u4f8b\u7684\u5b57\u5178\uff0c\u56e0\u6b64\u5b83\u4eec\u662f\u8f7b\u91cf\u7ea7\u7684\uff0c\u5e76\u4e14\u4e0d\u9700\u8981\u6bd4\u5e38\u89c4\u5143\u7ec4\u66f4\u591a\u7684\u5185\u5b58\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 # Basic example Point = namedtuple ( Point , [ x , y ]) p = Point ( 11 , y = 22 ) # instantiate with positional or keyword arguments p [ 0 ] + p [ 1 ] # indexable like the plain tuple (11, 22) 33 x , y = p # unpack like a regular tuple x , y ( 11 , 22 ) p . x + p . y # fields also accessible by name 33 p # readable __repr__ with a name=value style Point ( x = 11 , y = 22 ) \u547d\u540d\u5143\u7ec4\u5bf9\u4e8e\u5c06\u5b57\u6bb5\u540d\u79f0\u5206\u914d\u7ed9csv\u6216sqlite3\u6a21\u5757\u8fd4\u56de\u7684\u7ed3\u679c\u5143\u7ec4\u7279\u522b\u6709\u7528\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 EmployeeRecord = namedtuple ( EmployeeRecord , name, age, title, department, paygrade ) import csv for emp in map ( EmployeeRecord . _make , csv . reader ( open ( employees.csv , rb ))): print ( emp . name , emp . title ) import sqlite3 conn = sqlite3 . connect ( /companydata ) cursor = conn . cursor () cursor . execute ( SELECT name, age, title, department, paygrade FROM employees ) for emp in map ( EmployeeRecord . _make , cursor . fetchall ()): print ( emp . name , emp . title ) \u9664\u4e86\u4ece\u5143\u7ec4\u7ee7\u627f\u7684\u65b9\u6cd5\u4e4b\u5916\uff0c\u547d\u540d\u5143\u7ec4\u8fd8\u652f\u6301\u4e09\u4e2a\u989d\u5916\u7684\u65b9\u6cd5\u548c\u4e24\u4e2a\u5c5e\u6027\u3002 \u4e3a\u9632\u6b62\u4e0e\u5b57\u6bb5\u540d\u79f0\u51b2\u7a81\uff0c\u65b9\u6cd5\u548c\u5c5e\u6027\u540d\u79f0\u4ee5\u4e0b\u5212\u7ebf\u5f00\u5934\u3002 classmethod somenamedtuple._make(iterable) \u4ece\u73b0\u6709\u5e8f\u5217\u6216\u53ef\u8fed\u4ee3\u5bf9\u8c61\u751f\u6210\u65b0\u7684\u5b9e\u4f8b 1 2 3 t = [11, 22] Point._make(t) Point(x=11, y=22) somenamedtuple._asdict() \u8fd4\u56de\u4e00\u4e2a\u65b0\u7684OrderedDict\uff0c\u5b83\u5c06\u5b57\u6bb5\u540d\u79f0\u6620\u5c04\u5230\u5b83\u4eec\u5bf9\u5e94\u7684\u503c\uff1a 1 2 3 p = Point(x=11, y=22) p._asdict() OrderedDict([( x , 11), ( y , 22)]) somenamedtuple._replace(**kwargs) \u8fd4\u56denamedtuple\u7684\u65b0\u5b9e\u4f8b\uff0c\u7528\u65b0\u503c\u66ff\u6362\u7279\u5b9a\u5b57\u6bb5\uff1a 1 2 3 4 5 6 7 p = Point(x=11, y=22) p._replace(x=33) Point(x=33, y=22) id(p._replace(x=66)) 4572244008 id(p) 4569821544 somenamedtuple._fields \u5217\u51fa\u5b57\u6bb5\u540d\u79f0\u7684\u5b57\u7b26\u4e32\u5143\u7ec4\u3002 \u7528\u4e8e\u5185\u7701\u548c\u4ece\u73b0\u6709\u547d\u540d\u5143\u7ec4\u521b\u5efa\u65b0\u7684\u547d\u540d\u5143\u7ec4\u7c7b\u578b\u3002 1 2 3 4 5 6 p._fields # view the field names ( x , y ) Color = namedtuple( Color , red green blue ) Pixel = namedtuple( Pixel , Point._fields + Color._fields) Pixel(11, 22, 128, 255, 0) Pixel(x=11, y=22, red=128, green=255, blue=0) somenamedtuple._fields_defaults \u5b57\u5178\u5c06\u5b57\u6bb5\u540d\u79f0\u6620\u5c04\u5230\u9ed8\u8ba4\u503c\u3002 1 2 3 4 5 Account = namedtuple( Account , [ type , balance ], defaults=[0]) Account._fields_defaults { balance : 0} Account( premium ) Account(type= premium , balance=0) \u8981\u68c0\u7d22\u4e00\u4e2a\u5bf9\u8c61\u7684\u5b57\u6bb5\uff0c\u4f7f\u7528 getattr() \u65b9\u6cd5\uff1a 1 2 getattr ( p , x ) 11 \u8981\u5c06\u5b57\u5178\u8f6c\u5316\u4e3a\u4e00\u4e2a\u547d\u540d\u5143\u7ec4\uff0c\u4f7f\u7528 **x \u7684\u65b9\u5f0f\u8d4b\u503c: 1 2 3 d = { x : 11 , y : 22 } Point ( ** d ) Point ( x = 11 , y = 22 ) \u7531\u4e8e\u547d\u540d\u5143\u7ec4\u662f\u5e38\u89c4Python\u7c7b\uff0c\u56e0\u6b64\u5f88\u5bb9\u6613\u4f7f\u7528\u5b50\u7c7b\u6dfb\u52a0\u6216\u66f4\u6539\u529f\u80fd\u3002 \u4ee5\u4e0b\u662f\u6dfb\u52a0\u8ba1\u7b97\u5b57\u6bb5\u548c\u56fa\u5b9a\u5bbd\u5ea6\u6253\u5370\u683c\u5f0f\u7684\u65b9\u6cd5\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 class Point(namedtuple( Point , [ x , y ])): ... __slots__ = () ... @property ... def hypot(self): ... return (self.x ** 2 + self.y ** 2) ** 0.5 ... def __str__(self): ... return Point: x=%6.3f y=%6.3f hypot=%6.3f % (self.x, self.y, self.hypot) for p in Point(3, 4), Point(14, 5/7): ... print(p) Point: x= 3.000 y= 4.000 hypot= 5.000 Point: x=14.000 y= 0.714 hypot=14.018 \u4e0a\u9762\u663e\u793a\u7684\u5b50\u7c7b\u5c06__slots__\u8bbe\u7f6e\u4e3a\u7a7a\u5143\u7ec4\u3002 \u8fd9\u6709\u52a9\u4e8e\u9632\u6b62\u521b\u5efa\u5b9e\u4f8b\u5b57\u5178\uff0c\u4ece\u800c\u964d\u4f4e\u5185\u5b58\u9700\u6c42\u3002 \u5b50\u7c7b\u5316\u5bf9\u4e8e\u6dfb\u52a0\u65b0\u7684\u5b58\u50a8\u5b57\u6bb5\u6ca1\u6709\u7528\u3002 \u76f8\u53cd\uff0c\u53ea\u9700\u4ece_fields\u5c5e\u6027\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u547d\u540d\u5143\u7ec4\u7c7b\u578b\uff1a 1 Point3D = namedtuple( Point3D , Point._fields + ( z ,)) \u53ef\u4ee5\u901a\u8fc7\u76f4\u63a5\u5206\u914d __doc__ \u5b57\u6bb5\u6765\u81ea\u5b9a\u4e49\u6587\u6863\u5b57\u7b26\u4e32\uff1a 1 2 3 4 5 Book = namedtuple( Book , [ id , title , authors ]) Book.__doc__ += : Hardcover book in active collection Book.id.__doc__ = 13-digit ISBN Book.title.__doc__ = Title of first printing Book.authors.__doc__ = List of authors sorted by last name \u901a\u8fc7\u4f7f\u7528 _replace() \u5bf9\u5b9a\u5236\u7684\u5df2\u7ecf\u6709\u9ed8\u8ba4\u503c\u7684\u539f\u578b\u5b9e\u4f8b\u8fdb\u884c\u6539\u9020 1 2 3 4 Account = namedtuple( Account , owner balance transaction_count ) default_account = Account( owner name , 0.0, 0) johns_account = default_account._replace(owner= John ) janes_account = default_account._replace(owner= Jane )","title":"collections.namedtuple"},{"location":"Python/python_collections_namedtuple/#namedtuple","text":"\u5305\u542b\u547d\u540d\u5b57\u6bb5\u7684\u5143\u7ec4\u5de5\u5382\u65b9\u6cd5 \u547d\u540d\u5143\u7ec4\u4e3a\u5143\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u8d4b\u4e88\u542b\u4e49\uff0c\u5e76\u5141\u8bb8\u66f4\u53ef\u8bfb\uff0c\u81ea\u6587\u6863\u4ee3\u7801\u3002 \u5b83\u4eec\u53ef\u4ee5\u5728\u4f7f\u7528\u5e38\u89c4\u5143\u7ec4\u7684\u4efb\u4f55\u5730\u65b9\u4f7f\u7528\uff0c\u5e76\u4e14\u5b83\u4eec\u6dfb\u52a0\u4e86\u6309\u540d\u79f0\u800c\u4e0d\u662f\u4f4d\u7f6e\u7d22\u5f15\u8bbf\u95ee\u5b57\u6bb5\u7684\u529f\u80fd\u3002 \u5b9e\u73b0\uff1a 1 collections . namedtuple ( typename , field_names , * , rename = False , defaults = None , module = None ) \u8fd4\u56de\u4e00\u4e2a\u540d\u4e3a typename \u7684\u65b0\u5143\u7ec4\u5b50\u7c7b\u3002 \u65b0\u5b50\u7c7b\u7528\u4e8e\u521b\u5efa\u7c7b\u4f3c\u5143\u7ec4\u7684\u5bf9\u8c61\uff0c\u8fd9\u4e9b\u5bf9\u8c61\u5177\u6709\u53ef\u901a\u8fc7\u5c5e\u6027\u67e5\u627e\u8bbf\u95ee\u7684\u5b57\u6bb5\u4ee5\u53ca\u53ef\u7d22\u5f15\u548c\u53ef\u8fed\u4ee3\u7684\u5b57\u6bb5\u3002 \u5b50\u7c7b\u7684\u5b9e\u4f8b\u8fd8\u6709\u4e00\u4e2a\u6709\u7528\u7684\u6587\u6863\u5b57\u7b26\u4e32\uff08\u5e26\u6709 typename \u548c field_names \uff09\u548c\u4e00\u4e2a\u6709\u7528\u7684 __repr __() \u65b9\u6cd5\uff0c\u5b83\u4ee5 name = value \u683c\u5f0f\u5217\u51fa\u5143\u7ec4\u5185\u5bb9\u3002 field_names \u662f\u4e00\u7cfb\u5217\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982 ['x'\uff0c'y'] \u3002 \u6216\u8005\uff0c field_names \u53ef\u4ee5\u662f\u5355\u4e2a\u5b57\u7b26\u4e32\uff0c\u6bcf\u4e2a\u5b57\u6bb5\u540d\u7531 \u7a7a\u683c \u548c / \u6216 \u9017\u53f7 \u5206\u9694\uff0c\u4f8b\u5982 'x y' \u6216 'x\uff0cy' \u3002 \u9664\u4e86\u4ee5\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u540d\u79f0\u5916\uff0c\u4efb\u4f55\u6709\u6548\u7684Python\u6807\u8bc6\u7b26\u90fd\u53ef\u7528\u4e8e\u5b57\u6bb5\u540d\u3002\u6709\u6548\u6807\u8bc6\u7b26\u7531\u5b57\u6bcd\uff0c\u6570\u5b57\u548c\u4e0b\u5212\u7ebf\u7ec4\u6210\uff0c\u4f46\u4e0d\u4ee5\u6570\u5b57\u6216\u4e0b\u5212\u7ebf\u5f00\u5934\uff0c\u4e5f\u4e0d\u80fd\u662f\u7c7b\uff0cfor\uff0creturn\uff0cglobal\uff0cpass\u6216raise\u7b49\u5173\u952e\u5b57\u3002 \u5982\u679c rename \u4e3a true \uff0c\u5219\u65e0\u6548\u7684\u5b57\u6bb5\u540d\u79f0\u5c06\u81ea\u52a8\u66ff\u6362\u4e3a\u4f4d\u7f6e\u540d\u79f0\u3002 \u4f8b\u5982\uff0c ['abc'\uff0c'def'\uff0c'ghi'\uff0c'abc'] \u88ab\u8f6c\u6362\u4e3a ['abc'\uff0c'_1'\uff0c'ghi'\uff0c'_3'] \uff0c\u6d88\u9664\u4e86\u5173\u952e\u5b57 def \u548c\u91cd\u590d\u7684\u5b57\u6bb5\u540d abc \u3002 defaults \u53ef\u4ee5\u662fNone\u6216\u53ef\u8fed\u4ee3\u7684\u9ed8\u8ba4\u503c\u3002 \u7531\u4e8e\u5177\u6709\u9ed8\u8ba4\u503c\u7684\u5b57\u6bb5\u5fc5\u987b\u4f4d\u4e8e\u6ca1\u6709\u9ed8\u8ba4\u503c\u7684\u4efb\u4f55\u5b57\u6bb5\u4e4b\u540e\uff0c\u56e0\u6b64\u9ed8\u8ba4\u503c\u5c06\u5e94\u7528\u4e8e\u6700\u53f3\u4fa7\u7684\u53c2\u6570\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u5b57\u6bb5\u540d\u662f['x'\uff0c'y'\uff0c'z']\u5e76\u4e14\u9ed8\u8ba4\u503c\u662f\uff081,2\uff09\uff0c\u5219x\u5c06\u662f\u5fc5\u9700\u53c2\u6570\uff0cy\u5c06\u9ed8\u8ba4\u4e3a1\uff0cz\u5c06\u9ed8\u8ba4\u4e3a2\u3002 \u5982\u679c\u5b9a\u4e49\u4e86 module \uff0c\u5219\u5c06\u547d\u540d\u5143\u7ec4\u7684 __module__ \u5c5e\u6027\u8bbe\u7f6e\u4e3a\u8be5\u503c\u3002 \u547d\u540d\u7684\u5143\u7ec4\u5b9e\u4f8b\u6ca1\u6709\u6bcf\u4e2a\u5b9e\u4f8b\u7684\u5b57\u5178\uff0c\u56e0\u6b64\u5b83\u4eec\u662f\u8f7b\u91cf\u7ea7\u7684\uff0c\u5e76\u4e14\u4e0d\u9700\u8981\u6bd4\u5e38\u89c4\u5143\u7ec4\u66f4\u591a\u7684\u5185\u5b58\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 # Basic example Point = namedtuple ( Point , [ x , y ]) p = Point ( 11 , y = 22 ) # instantiate with positional or keyword arguments p [ 0 ] + p [ 1 ] # indexable like the plain tuple (11, 22) 33 x , y = p # unpack like a regular tuple x , y ( 11 , 22 ) p . x + p . y # fields also accessible by name 33 p # readable __repr__ with a name=value style Point ( x = 11 , y = 22 ) \u547d\u540d\u5143\u7ec4\u5bf9\u4e8e\u5c06\u5b57\u6bb5\u540d\u79f0\u5206\u914d\u7ed9csv\u6216sqlite3\u6a21\u5757\u8fd4\u56de\u7684\u7ed3\u679c\u5143\u7ec4\u7279\u522b\u6709\u7528\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 EmployeeRecord = namedtuple ( EmployeeRecord , name, age, title, department, paygrade ) import csv for emp in map ( EmployeeRecord . _make , csv . reader ( open ( employees.csv , rb ))): print ( emp . name , emp . title ) import sqlite3 conn = sqlite3 . connect ( /companydata ) cursor = conn . cursor () cursor . execute ( SELECT name, age, title, department, paygrade FROM employees ) for emp in map ( EmployeeRecord . _make , cursor . fetchall ()): print ( emp . name , emp . title ) \u9664\u4e86\u4ece\u5143\u7ec4\u7ee7\u627f\u7684\u65b9\u6cd5\u4e4b\u5916\uff0c\u547d\u540d\u5143\u7ec4\u8fd8\u652f\u6301\u4e09\u4e2a\u989d\u5916\u7684\u65b9\u6cd5\u548c\u4e24\u4e2a\u5c5e\u6027\u3002 \u4e3a\u9632\u6b62\u4e0e\u5b57\u6bb5\u540d\u79f0\u51b2\u7a81\uff0c\u65b9\u6cd5\u548c\u5c5e\u6027\u540d\u79f0\u4ee5\u4e0b\u5212\u7ebf\u5f00\u5934\u3002 classmethod somenamedtuple._make(iterable) \u4ece\u73b0\u6709\u5e8f\u5217\u6216\u53ef\u8fed\u4ee3\u5bf9\u8c61\u751f\u6210\u65b0\u7684\u5b9e\u4f8b 1 2 3 t = [11, 22] Point._make(t) Point(x=11, y=22) somenamedtuple._asdict() \u8fd4\u56de\u4e00\u4e2a\u65b0\u7684OrderedDict\uff0c\u5b83\u5c06\u5b57\u6bb5\u540d\u79f0\u6620\u5c04\u5230\u5b83\u4eec\u5bf9\u5e94\u7684\u503c\uff1a 1 2 3 p = Point(x=11, y=22) p._asdict() OrderedDict([( x , 11), ( y , 22)]) somenamedtuple._replace(**kwargs) \u8fd4\u56denamedtuple\u7684\u65b0\u5b9e\u4f8b\uff0c\u7528\u65b0\u503c\u66ff\u6362\u7279\u5b9a\u5b57\u6bb5\uff1a 1 2 3 4 5 6 7 p = Point(x=11, y=22) p._replace(x=33) Point(x=33, y=22) id(p._replace(x=66)) 4572244008 id(p) 4569821544 somenamedtuple._fields \u5217\u51fa\u5b57\u6bb5\u540d\u79f0\u7684\u5b57\u7b26\u4e32\u5143\u7ec4\u3002 \u7528\u4e8e\u5185\u7701\u548c\u4ece\u73b0\u6709\u547d\u540d\u5143\u7ec4\u521b\u5efa\u65b0\u7684\u547d\u540d\u5143\u7ec4\u7c7b\u578b\u3002 1 2 3 4 5 6 p._fields # view the field names ( x , y ) Color = namedtuple( Color , red green blue ) Pixel = namedtuple( Pixel , Point._fields + Color._fields) Pixel(11, 22, 128, 255, 0) Pixel(x=11, y=22, red=128, green=255, blue=0) somenamedtuple._fields_defaults \u5b57\u5178\u5c06\u5b57\u6bb5\u540d\u79f0\u6620\u5c04\u5230\u9ed8\u8ba4\u503c\u3002 1 2 3 4 5 Account = namedtuple( Account , [ type , balance ], defaults=[0]) Account._fields_defaults { balance : 0} Account( premium ) Account(type= premium , balance=0) \u8981\u68c0\u7d22\u4e00\u4e2a\u5bf9\u8c61\u7684\u5b57\u6bb5\uff0c\u4f7f\u7528 getattr() \u65b9\u6cd5\uff1a 1 2 getattr ( p , x ) 11 \u8981\u5c06\u5b57\u5178\u8f6c\u5316\u4e3a\u4e00\u4e2a\u547d\u540d\u5143\u7ec4\uff0c\u4f7f\u7528 **x \u7684\u65b9\u5f0f\u8d4b\u503c: 1 2 3 d = { x : 11 , y : 22 } Point ( ** d ) Point ( x = 11 , y = 22 ) \u7531\u4e8e\u547d\u540d\u5143\u7ec4\u662f\u5e38\u89c4Python\u7c7b\uff0c\u56e0\u6b64\u5f88\u5bb9\u6613\u4f7f\u7528\u5b50\u7c7b\u6dfb\u52a0\u6216\u66f4\u6539\u529f\u80fd\u3002 \u4ee5\u4e0b\u662f\u6dfb\u52a0\u8ba1\u7b97\u5b57\u6bb5\u548c\u56fa\u5b9a\u5bbd\u5ea6\u6253\u5370\u683c\u5f0f\u7684\u65b9\u6cd5\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 class Point(namedtuple( Point , [ x , y ])): ... __slots__ = () ... @property ... def hypot(self): ... return (self.x ** 2 + self.y ** 2) ** 0.5 ... def __str__(self): ... return Point: x=%6.3f y=%6.3f hypot=%6.3f % (self.x, self.y, self.hypot) for p in Point(3, 4), Point(14, 5/7): ... print(p) Point: x= 3.000 y= 4.000 hypot= 5.000 Point: x=14.000 y= 0.714 hypot=14.018 \u4e0a\u9762\u663e\u793a\u7684\u5b50\u7c7b\u5c06__slots__\u8bbe\u7f6e\u4e3a\u7a7a\u5143\u7ec4\u3002 \u8fd9\u6709\u52a9\u4e8e\u9632\u6b62\u521b\u5efa\u5b9e\u4f8b\u5b57\u5178\uff0c\u4ece\u800c\u964d\u4f4e\u5185\u5b58\u9700\u6c42\u3002 \u5b50\u7c7b\u5316\u5bf9\u4e8e\u6dfb\u52a0\u65b0\u7684\u5b58\u50a8\u5b57\u6bb5\u6ca1\u6709\u7528\u3002 \u76f8\u53cd\uff0c\u53ea\u9700\u4ece_fields\u5c5e\u6027\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u547d\u540d\u5143\u7ec4\u7c7b\u578b\uff1a 1 Point3D = namedtuple( Point3D , Point._fields + ( z ,)) \u53ef\u4ee5\u901a\u8fc7\u76f4\u63a5\u5206\u914d __doc__ \u5b57\u6bb5\u6765\u81ea\u5b9a\u4e49\u6587\u6863\u5b57\u7b26\u4e32\uff1a 1 2 3 4 5 Book = namedtuple( Book , [ id , title , authors ]) Book.__doc__ += : Hardcover book in active collection Book.id.__doc__ = 13-digit ISBN Book.title.__doc__ = Title of first printing Book.authors.__doc__ = List of authors sorted by last name \u901a\u8fc7\u4f7f\u7528 _replace() \u5bf9\u5b9a\u5236\u7684\u5df2\u7ecf\u6709\u9ed8\u8ba4\u503c\u7684\u539f\u578b\u5b9e\u4f8b\u8fdb\u884c\u6539\u9020 1 2 3 4 Account = namedtuple( Account , owner balance transaction_count ) default_account = Account( owner name , 0.0, 0) johns_account = default_account._replace(owner= John ) janes_account = default_account._replace(owner= Jane )","title":"namedtuple()"},{"location":"Python/python_collections_ordereddict/","text":"OrderedDict OrderedDict\u548cDict\u4e00\u6837\uff0c\u4f46\u662f\u5b83\u8bb0\u4f4f\u4e86item\u63d2\u5165\u5230\u5b57\u5178\u7684\u987a\u5e8f\u3002\u5f53\u5bf9\u6709\u5e8f\u5b57\u5178\u8fdb\u884c\u8fed\u4ee3\u65f6\uff0citem\u4f1a\u6309\u7167\u7b2c\u4e00\u6b21\u63d2\u5165\u5230\u5b57\u5178\u7684\u987a\u5e8f\u8fd4\u56de\u3002 \u5b9e\u73b0\uff1a 1 class collections . OrderedDict ([ items ]) OrderedDict\u662fdict\u7684\u5b50\u7c7b\uff0c\u652f\u6301dict\u7684\u65b9\u6cd5\u3002OrderedDict\u662f\u4e00\u4e2a\u80fd\u8bb0\u4f4f\u63d2\u5165key\u7684\u987a\u5e8f\u7684dict\u3002\u5982\u679c\u6709\u65b0\u7684item\u8986\u76d6\u73b0\u6709item\u65f6\uff0c\u4f4d\u7f6e\u4e0d\u53d8\u3002\u4f46\u5982\u679c\u662f\u5220\u9664\u8be5item\uff0c\u518d\u6b21\u63d2\u5165\u540e\uff0c\u5c06\u4f1a\u79fb\u5230\u6700\u540e\u3002 popitem(last=True) \u8be5\u65b9\u6cd5\u8fd4\u56dekey-value\u952e\u503c\u5bf9\uff0c\u5e76\u5220\u9664\u8be5\u952e\u503c\u5bf9\u3002\u5f53 last \u4e3a True \u65f6\uff0c\u662f\u6309\u7167LIFO(\u540e\u8fdb\u5148\u51fa)\u7684\u987a\u5e8f\u5f39\u51fa\uff1b\u5982\u679c last \u4e3a False \uff0c\u662f\u6309\u7167FIFO(\u5148\u8fdb\u5148\u51fa)\u7684\u987a\u5e8f\u5f39\u51fa 1 2 3 4 5 6 7 8 9 10 11 12 13 from collections import OrderedDict od = OrderedDict(a=1, b=2) od OrderedDict([( a , 1), ( b , 2)]) od.popitem(last=True) ( b , 2) od = OrderedDict(a=1, b=2) od OrderedDict([( a , 1), ( b , 2)]) od.popitem(last=False) ( a , 1) od OrderedDict([( b , 2)]) move_to_end(key, last=True) \u5c06\u73b0\u6709\u952e\u79fb\u52a8\u5230\u6709\u5e8f\u5b57\u5178\u7684\u4efb\u4e00\u7aef\u3002 \u5982\u679c last \u4e3a True \uff08\u9ed8\u8ba4\u503c\uff09\uff0c\u5219\u5c06item\u79fb\u52a8\u5230\u53f3\u7aef;\u5982\u679c last \u4e3a False \uff0c\u5219\u5c06item\u79fb\u52a8\u5230\u5f00\u5934\u3002 \u5982\u679ckey\u4e0d\u5b58\u5728\uff0c\u5219\u5f15\u53d1 KeyError \uff1a 1 2 3 4 5 6 7 8 9 d = OrderedDict.fromkeys( abcde ) d OrderedDict([( a , None), ( b , None), ( c , None), ( d , None), ( e , None)]) d.move_to_end( b ) d OrderedDict([( a , None), ( c , None), ( d , None), ( e , None), ( b , None)]) d.move_to_end( b , last=False) d OrderedDict([( b , None), ( a , None), ( c , None), ( d , None), ( e , None)]) \u9664\u4e86\u5e38\u7528\u65b9\u6cd5\u5916\uff0cOrderedDict\u8fd8\u652f\u6301 reversed() \u6765\u53cd\u8f6c 1 2 3 4 5 6 7 8 9 10 11 reversed ( d ) odict_iterator object at 0x10f813888 for i in reversed ( d ): print ( i ) e d c a b \u7531\u4e8eOrderedDict\u4f1a\u8bb0\u4f4f\u63d2\u5165\u7684\u987a\u5e8f\uff0c\u56e0\u6b64\u5b83\u53ef\u4ee5\u7ed3\u5408\u6392\u5e8f\u4e00\u8d77\u4f7f\u7528 1 2 3 4 5 6 7 8 d = { banana : 3 , apple : 4 , pear : 1 , orange : 2 } t = [ 1 , - 1 , 0 ] OrderedDict ( sorted ( d . items (), key = lambda t : t [ 0 ])) OrderedDict ([( apple , 4 ), ( banana , 3 ), ( orange , 2 ), ( pear , 1 )]) OrderedDict ( sorted ( d . items (), key = lambda t : t [ 1 ])) OrderedDict ([( pear , 1 ), ( orange , 2 ), ( banana , 3 ), ( apple , 4 )]) OrderedDict ( sorted ( d . items (), key = lambda t : len ( t [ 0 ]))) OrderedDict ([( pear , 1 ), ( apple , 4 ), ( banana , 3 ), ( orange , 2 )]) \u5f53\u5220\u9664\u6392\u5e8f\u540e\u7684OrderedDict\u7684item\u65f6\uff0c\u987a\u5e8f\u4e0d\u4f1a\u53d8\uff1b\u4f46\u5982\u679c\u662f\u63d2\u5165\u65b0\u7684item\u5230OrderedDict\u4e2d\uff0citem\u4f1a\u76f4\u63a5\u52a0\u5728\u6700\u540e\uff0c\u5e76\u4e0d\u4f1a\u6839\u636e\u6392\u5e8f\u63d2\u5165\u3002 \u5982\u679c\u60f3\u81ea\u5b9a\u4e49\u4e00\u4e2aOrderedDict\uff0c\u5f53\u51fa\u73b0key\u503c\u76f8\u540c\u7684item\u60f3\u63d2\u5165\u65f6\uff0c\u5e0c\u671b\u53ef\u4ee5\u63d2\u5165\uff0c\u800c\u4e0d\u662f\u8986\u76d6\uff0c\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a 1 2 3 4 5 6 7 class LastUpdatedOrderedDict ( OrderedDict ): Store items in the order the keys were last added def __setitem__ ( self , key , value ): if key in self : del self [ key ] OrderedDict . __setitem__ ( self , key , value ) \u6211\u4eec\u4e5f\u53ef\u4ee5\u540c\u65f6\u7ee7\u627f Counter \u548c OrderedDict \u3002\u901a\u8fc7\u8fd9\u4e2a\u591a\u7ee7\u627f\uff0c\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e2a\u6839\u636e\u7b2c\u4e00\u6b21\u9047\u5230\u7684\u4e0d\u540c\u5143\u7d20\u7684\u987a\u5e8f\u6765\u5bf9\u5143\u7d20\u8fdb\u884c\u8ba1\u6570\u3002\u53ef\u80fd\u8fd9\u6837\u8bf4\u8d77\u6765\u6709\u4e9b\u7ed5\u5634\u4e5f\u5f88\u7cca\u6d82\uff0c\u8fd8\u662f\u4e0a\u4ee3\u7801\u5427\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from collections import ChainMap , Counter , OrderedDict class OrderedCounter ( Counter , OrderedDict ): Counter that remembers the order elements are first encountered def __repr__ ( self ): return %s ( %r ) % ( self . __class__ . __name__ , OrderedDict ( self )) def __reduce__ ( self ): return self . __class__ , ( OrderedDict ( self ),) if __name__ == __main__ : oc = OrderedCounter ( adddddbracadabra ) print ( oc ) OrderedCounter ( OrderedDict ([( a , 5 ), ( d , 6 ), ( b , 2 ), ( r , 2 ), ( c , 1 )])) \u539f\u7406\u662f\u8fd9\u6837\u7684\uff1a \u8c03\u7528\u7c7b\u65b9\u6cd5\u65f6\uff0cPython\u5fc5\u987b\u627e\u5230\u8981\u6267\u884c\u7684\u6b63\u786e\u65b9\u6cd5\u3002\u6709\u4e00\u4e2a\u5b9a\u4e49\u4e86\u641c\u7d22\u7c7b\u987a\u5e8f\u7684\u4e00\u4e2a\u6392\u5e8f\uff0c\u79f0\u4e3a\u65b9\u6cd5\u89e3\u6790\u987a\u5e8f\u6216 mro \u3002 mro \u53ef\u4ee5\u901a\u8fc7 __mro__ \u67e5\u770b\uff1a 1 2 3 print ( OrderedCounter . __mro__ ) ( class __main__ . OrderedCounter , class collections . Counter , class collections . OrderedDict , class dict , class object ) \u5f53OrderedDict\u7684\u5b9e\u4f8b\u8c03\u7528 __setitem __() \u65f6\uff0c\u5b83\u6309\u987a\u5e8f\u641c\u7d22\u7c7b\uff1a OrderedCounter \uff0c Counter \uff0c OrderedDict (\u5728\u8fd9\u4e2a\u7c7b\u627e\u5230\u4e86\u8c03\u7528\u7684\u65b9\u6cd5)\u3002 \u6240\u4ee5\u50cf oc['a'] = 0 \u8fd9\u6837\u7684\u8bed\u53e5\u6700\u7ec8\u4f1a\u8c03\u7528 OrderedDict.__setitem__() \u3002 \u76f8\u53cd\uff0c __getitem__ \u4e0d\u4f1a\u88ab mro \u4e2d\u7684\u4efb\u4f55\u5b50\u7c7b\u8986\u76d6\uff0c\u56e0\u6b64 count = oc['a'] \u7531 dict.__getitem__() \u5904\u7406\u3002 1 2 3 oc = OrderedCounter () oc [ a ] = 1 # this call uses OrderedDict.__setitem__ count = oc [ a ] # this call uses dict.__getitem__ \u5bf9\u4e8e\u50cf oc.update('foobar') \u8fd9\u6837\u7684\u8bed\u53e5\uff0c\u4f1a\u53d1\u751f\u66f4\u6709\u8da3\u7684\u8c03\u7528\u5e8f\u5217\u3002\u9996\u5148\uff0c\u8c03\u7528 Counter.update() \u3002 Counter.update() \u7684\u4ee3\u7801\u4f7f\u7528 self[elem] = count + self_get(elem, 0) \uff0c\u7136\u540e\u5b83\u53d8\u6210\u5bf9 OrderedDict.__setitem__() \u7684\u8c03\u7528\u3002 \u5e76\u4e14\u8be5\u4ee3\u7801\u8c03\u7528 dict.__setitem__() \u3002 \u6ce8\u610f: \u5982\u679c\u57fa\u7c7b\u987a\u5e8f\u98a0\u5012\uff0c\u5219\u4e0d\u518d\u6709\u6548\u3002\u56e0\u4e3amro\u4e0d\u540c\uff0c\u4ece\u800c\u5bfc\u81f4\u8c03\u7528\u8fc7\u7a0b\u4e2d\u4f1a\u8c03\u7528\u9519\u8bef\u7684\u65b9\u6cd5\u3002","title":"collections.OrderedDict"},{"location":"Python/python_collections_ordereddict/#ordereddict","text":"OrderedDict\u548cDict\u4e00\u6837\uff0c\u4f46\u662f\u5b83\u8bb0\u4f4f\u4e86item\u63d2\u5165\u5230\u5b57\u5178\u7684\u987a\u5e8f\u3002\u5f53\u5bf9\u6709\u5e8f\u5b57\u5178\u8fdb\u884c\u8fed\u4ee3\u65f6\uff0citem\u4f1a\u6309\u7167\u7b2c\u4e00\u6b21\u63d2\u5165\u5230\u5b57\u5178\u7684\u987a\u5e8f\u8fd4\u56de\u3002 \u5b9e\u73b0\uff1a 1 class collections . OrderedDict ([ items ]) OrderedDict\u662fdict\u7684\u5b50\u7c7b\uff0c\u652f\u6301dict\u7684\u65b9\u6cd5\u3002OrderedDict\u662f\u4e00\u4e2a\u80fd\u8bb0\u4f4f\u63d2\u5165key\u7684\u987a\u5e8f\u7684dict\u3002\u5982\u679c\u6709\u65b0\u7684item\u8986\u76d6\u73b0\u6709item\u65f6\uff0c\u4f4d\u7f6e\u4e0d\u53d8\u3002\u4f46\u5982\u679c\u662f\u5220\u9664\u8be5item\uff0c\u518d\u6b21\u63d2\u5165\u540e\uff0c\u5c06\u4f1a\u79fb\u5230\u6700\u540e\u3002 popitem(last=True) \u8be5\u65b9\u6cd5\u8fd4\u56dekey-value\u952e\u503c\u5bf9\uff0c\u5e76\u5220\u9664\u8be5\u952e\u503c\u5bf9\u3002\u5f53 last \u4e3a True \u65f6\uff0c\u662f\u6309\u7167LIFO(\u540e\u8fdb\u5148\u51fa)\u7684\u987a\u5e8f\u5f39\u51fa\uff1b\u5982\u679c last \u4e3a False \uff0c\u662f\u6309\u7167FIFO(\u5148\u8fdb\u5148\u51fa)\u7684\u987a\u5e8f\u5f39\u51fa 1 2 3 4 5 6 7 8 9 10 11 12 13 from collections import OrderedDict od = OrderedDict(a=1, b=2) od OrderedDict([( a , 1), ( b , 2)]) od.popitem(last=True) ( b , 2) od = OrderedDict(a=1, b=2) od OrderedDict([( a , 1), ( b , 2)]) od.popitem(last=False) ( a , 1) od OrderedDict([( b , 2)]) move_to_end(key, last=True) \u5c06\u73b0\u6709\u952e\u79fb\u52a8\u5230\u6709\u5e8f\u5b57\u5178\u7684\u4efb\u4e00\u7aef\u3002 \u5982\u679c last \u4e3a True \uff08\u9ed8\u8ba4\u503c\uff09\uff0c\u5219\u5c06item\u79fb\u52a8\u5230\u53f3\u7aef;\u5982\u679c last \u4e3a False \uff0c\u5219\u5c06item\u79fb\u52a8\u5230\u5f00\u5934\u3002 \u5982\u679ckey\u4e0d\u5b58\u5728\uff0c\u5219\u5f15\u53d1 KeyError \uff1a 1 2 3 4 5 6 7 8 9 d = OrderedDict.fromkeys( abcde ) d OrderedDict([( a , None), ( b , None), ( c , None), ( d , None), ( e , None)]) d.move_to_end( b ) d OrderedDict([( a , None), ( c , None), ( d , None), ( e , None), ( b , None)]) d.move_to_end( b , last=False) d OrderedDict([( b , None), ( a , None), ( c , None), ( d , None), ( e , None)]) \u9664\u4e86\u5e38\u7528\u65b9\u6cd5\u5916\uff0cOrderedDict\u8fd8\u652f\u6301 reversed() \u6765\u53cd\u8f6c 1 2 3 4 5 6 7 8 9 10 11 reversed ( d ) odict_iterator object at 0x10f813888 for i in reversed ( d ): print ( i ) e d c a b \u7531\u4e8eOrderedDict\u4f1a\u8bb0\u4f4f\u63d2\u5165\u7684\u987a\u5e8f\uff0c\u56e0\u6b64\u5b83\u53ef\u4ee5\u7ed3\u5408\u6392\u5e8f\u4e00\u8d77\u4f7f\u7528 1 2 3 4 5 6 7 8 d = { banana : 3 , apple : 4 , pear : 1 , orange : 2 } t = [ 1 , - 1 , 0 ] OrderedDict ( sorted ( d . items (), key = lambda t : t [ 0 ])) OrderedDict ([( apple , 4 ), ( banana , 3 ), ( orange , 2 ), ( pear , 1 )]) OrderedDict ( sorted ( d . items (), key = lambda t : t [ 1 ])) OrderedDict ([( pear , 1 ), ( orange , 2 ), ( banana , 3 ), ( apple , 4 )]) OrderedDict ( sorted ( d . items (), key = lambda t : len ( t [ 0 ]))) OrderedDict ([( pear , 1 ), ( apple , 4 ), ( banana , 3 ), ( orange , 2 )]) \u5f53\u5220\u9664\u6392\u5e8f\u540e\u7684OrderedDict\u7684item\u65f6\uff0c\u987a\u5e8f\u4e0d\u4f1a\u53d8\uff1b\u4f46\u5982\u679c\u662f\u63d2\u5165\u65b0\u7684item\u5230OrderedDict\u4e2d\uff0citem\u4f1a\u76f4\u63a5\u52a0\u5728\u6700\u540e\uff0c\u5e76\u4e0d\u4f1a\u6839\u636e\u6392\u5e8f\u63d2\u5165\u3002 \u5982\u679c\u60f3\u81ea\u5b9a\u4e49\u4e00\u4e2aOrderedDict\uff0c\u5f53\u51fa\u73b0key\u503c\u76f8\u540c\u7684item\u60f3\u63d2\u5165\u65f6\uff0c\u5e0c\u671b\u53ef\u4ee5\u63d2\u5165\uff0c\u800c\u4e0d\u662f\u8986\u76d6\uff0c\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a 1 2 3 4 5 6 7 class LastUpdatedOrderedDict ( OrderedDict ): Store items in the order the keys were last added def __setitem__ ( self , key , value ): if key in self : del self [ key ] OrderedDict . __setitem__ ( self , key , value ) \u6211\u4eec\u4e5f\u53ef\u4ee5\u540c\u65f6\u7ee7\u627f Counter \u548c OrderedDict \u3002\u901a\u8fc7\u8fd9\u4e2a\u591a\u7ee7\u627f\uff0c\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e2a\u6839\u636e\u7b2c\u4e00\u6b21\u9047\u5230\u7684\u4e0d\u540c\u5143\u7d20\u7684\u987a\u5e8f\u6765\u5bf9\u5143\u7d20\u8fdb\u884c\u8ba1\u6570\u3002\u53ef\u80fd\u8fd9\u6837\u8bf4\u8d77\u6765\u6709\u4e9b\u7ed5\u5634\u4e5f\u5f88\u7cca\u6d82\uff0c\u8fd8\u662f\u4e0a\u4ee3\u7801\u5427\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from collections import ChainMap , Counter , OrderedDict class OrderedCounter ( Counter , OrderedDict ): Counter that remembers the order elements are first encountered def __repr__ ( self ): return %s ( %r ) % ( self . __class__ . __name__ , OrderedDict ( self )) def __reduce__ ( self ): return self . __class__ , ( OrderedDict ( self ),) if __name__ == __main__ : oc = OrderedCounter ( adddddbracadabra ) print ( oc ) OrderedCounter ( OrderedDict ([( a , 5 ), ( d , 6 ), ( b , 2 ), ( r , 2 ), ( c , 1 )])) \u539f\u7406\u662f\u8fd9\u6837\u7684\uff1a \u8c03\u7528\u7c7b\u65b9\u6cd5\u65f6\uff0cPython\u5fc5\u987b\u627e\u5230\u8981\u6267\u884c\u7684\u6b63\u786e\u65b9\u6cd5\u3002\u6709\u4e00\u4e2a\u5b9a\u4e49\u4e86\u641c\u7d22\u7c7b\u987a\u5e8f\u7684\u4e00\u4e2a\u6392\u5e8f\uff0c\u79f0\u4e3a\u65b9\u6cd5\u89e3\u6790\u987a\u5e8f\u6216 mro \u3002 mro \u53ef\u4ee5\u901a\u8fc7 __mro__ \u67e5\u770b\uff1a 1 2 3 print ( OrderedCounter . __mro__ ) ( class __main__ . OrderedCounter , class collections . Counter , class collections . OrderedDict , class dict , class object ) \u5f53OrderedDict\u7684\u5b9e\u4f8b\u8c03\u7528 __setitem __() \u65f6\uff0c\u5b83\u6309\u987a\u5e8f\u641c\u7d22\u7c7b\uff1a OrderedCounter \uff0c Counter \uff0c OrderedDict (\u5728\u8fd9\u4e2a\u7c7b\u627e\u5230\u4e86\u8c03\u7528\u7684\u65b9\u6cd5)\u3002 \u6240\u4ee5\u50cf oc['a'] = 0 \u8fd9\u6837\u7684\u8bed\u53e5\u6700\u7ec8\u4f1a\u8c03\u7528 OrderedDict.__setitem__() \u3002 \u76f8\u53cd\uff0c __getitem__ \u4e0d\u4f1a\u88ab mro \u4e2d\u7684\u4efb\u4f55\u5b50\u7c7b\u8986\u76d6\uff0c\u56e0\u6b64 count = oc['a'] \u7531 dict.__getitem__() \u5904\u7406\u3002 1 2 3 oc = OrderedCounter () oc [ a ] = 1 # this call uses OrderedDict.__setitem__ count = oc [ a ] # this call uses dict.__getitem__ \u5bf9\u4e8e\u50cf oc.update('foobar') \u8fd9\u6837\u7684\u8bed\u53e5\uff0c\u4f1a\u53d1\u751f\u66f4\u6709\u8da3\u7684\u8c03\u7528\u5e8f\u5217\u3002\u9996\u5148\uff0c\u8c03\u7528 Counter.update() \u3002 Counter.update() \u7684\u4ee3\u7801\u4f7f\u7528 self[elem] = count + self_get(elem, 0) \uff0c\u7136\u540e\u5b83\u53d8\u6210\u5bf9 OrderedDict.__setitem__() \u7684\u8c03\u7528\u3002 \u5e76\u4e14\u8be5\u4ee3\u7801\u8c03\u7528 dict.__setitem__() \u3002 \u6ce8\u610f: \u5982\u679c\u57fa\u7c7b\u987a\u5e8f\u98a0\u5012\uff0c\u5219\u4e0d\u518d\u6709\u6548\u3002\u56e0\u4e3amro\u4e0d\u540c\uff0c\u4ece\u800c\u5bfc\u81f4\u8c03\u7528\u8fc7\u7a0b\u4e2d\u4f1a\u8c03\u7528\u9519\u8bef\u7684\u65b9\u6cd5\u3002","title":"OrderedDict"},{"location":"Python/python_functools/","text":"\u53c2\u8003\u6587\u6863 https://zhuanlan.zhihu.com/p/27643991 https://docs.python.org/3.7/library/functools.html#functools.lru_cache https://segmentfault.com/a/1190000009398663 functools.cmp_to_key(func) \u5c06\u65e7\u5f0f\u6bd4\u8f83\u51fd\u6570\u8f6c\u6362\u4e3a\u5173\u952e\u5b57\u51fd\u6570\u3002\u4e0e\u63a5\u53d7\u5b57\u5173\u952e\u51fd\u6570(\u5982sort()\u3001min()\u3001max()\u3001heapq. nbiggest()\u3001heapq.nsmallest()\u3001itertools.groupby())\u7684\u5de5\u5177\u4e00\u8d77\u4f7f\u7528\u3002\u8be5\u51fd\u6570\u4e3b\u8981\u7528\u4e8e\u4ecePython 2\u8f6c\u6362\u8fc7\u6765\u7684\u7a0b\u5e8f\u7684\u8f6c\u6362\u5de5\u5177\uff0cPython 2\u652f\u6301\u4f7f\u7528\u6bd4\u8f83\u51fd\u6570\u3002 \u6bd4\u8f83\u51fd\u6570\u662f\u4efb\u4f55\u53ef\u8c03\u7528\u7684\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff0c\u8fdb\u884c\u6bd4\u8f83\uff0c\u7136\u540e\u8fd4\u56de\u8d1f\u6570(\u5c0f\u4e8e)\u3001\u96f6(\u76f8\u7b49)\u6216\u6b63\u6570(\u5927\u4e8e)\u3002\u952e\u51fd\u6570\u662f\u4e00\u4e2a\u53ef\u8c03\u7528\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\u5e76\u8fd4\u56de\u53e6\u4e00\u4e2a\u503c\u4f5c\u4e3a\u6392\u5e8f\u952e\u3002 \u653e\u4e0a\u4e00\u6ce2\u6e90\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 ################################################################################ ### cmp_to_key() function converter ################################################################################ def cmp_to_key ( mycmp ): Convert a cmp= function into a key= function class K ( object ): __slots__ = [ obj ] def __init__ ( self , obj ): self . obj = obj def __lt__ ( self , other ): return mycmp ( self . obj , other . obj ) 0 def __gt__ ( self , other ): return mycmp ( self . obj , other . obj ) 0 def __eq__ ( self , other ): return mycmp ( self . obj , other . obj ) == 0 def __le__ ( self , other ): return mycmp ( self . obj , other . obj ) = 0 def __ge__ ( self , other ): return mycmp ( self . obj , other . obj ) = 0 __hash__ = None return K \u5199\u4e00\u4e2ademo\uff0c\u770b\u4e00\u4e0b\u8fd0\u884c\u6d41\u7a0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 import functools class MyObject : def __init__ ( self , val ): self . val = val def __str__ ( self ): return MyObject({}) . format ( self . val ) def compare_obj ( a , b ): Old-style comparison function. print ( comparing {} and {} . format ( a , b )) if a . val b . val : return - 1 elif a . val b . val : return 1 return 0 # \u6392\u5e8f\u7684key get_key = functools . cmp_to_key ( compare_obj ) def get_key_wrapper ( o ): Wrapper function for get_key to allow for print statements. new_key = get_key ( o ) print ( key_wrapper({}) - {!r} . format ( o , new_key )) return new_key objs = [ MyObject ( x ) for x in range ( 5 , 0 , - 1 )] for o in sorted ( objs , key = get_key_wrapper ): print ( o ) \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c cmp_to_key() \u5c06\u76f4\u63a5\u4f7f\u7528\uff0c\u4f46\u5728\u672c\u4f8b\u4e2d\u5f15\u5165\u4e86\u4e00\u4e2a\u989d\u5916\u7684\u5305\u88c5\u51fd\u6570\uff0c\u4ee5\u5728\u8c03\u7528\u5173\u952e\u51fd\u6570\u65f6\u8f93\u51fa\u66f4\u591a\u4fe1\u606f\u3002 \u8f93\u51fa\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 key_wrapper(MyObject(5)) - functools.KeyWrapper object at 0x10692e510 key_wrapper(MyObject(4)) - functools.KeyWrapper object at 0x10692e4f0 key_wrapper(MyObject(3)) - functools.KeyWrapper object at 0x10692e4d0 key_wrapper(MyObject(2)) - functools.KeyWrapper object at 0x10692e470 key_wrapper(MyObject(1)) - functools.KeyWrapper object at 0x10692e490 comparing MyObject(4) and MyObject(5) comparing MyObject(3) and MyObject(4) comparing MyObject(2) and MyObject(3) comparing MyObject(1) and MyObject(2) MyObject(1) MyObject(2) MyObject(3) MyObject(4) MyObject(5) @functools.lru_cache(maxsize=128, typed=False) \u8fd9\u4e2a\u88c5\u9970\u5668\u5b9e\u73b0\u4e86\u5907\u5fd8\u7684\u529f\u80fd\uff0c\u662f\u4e00\u9879\u4f18\u5316\u6280\u672f\uff0c\u628a\u8017\u65f6\u7684\u51fd\u6570\u7684\u7ed3\u679c\u4fdd\u5b58\u8d77\u6765\uff0c\u907f\u514d\u4f20\u5165\u76f8\u540c\u7684\u53c2\u6570\u65f6\u91cd\u590d\u8ba1\u7b97\u3002lru \u662f\uff08least recently used\uff09\u7684\u7f29\u5199\uff0c\u5373\u6700\u8fd1\u6700\u5c11\u4f7f\u7528\u539f\u5219\u3002\u8868\u660e\u7f13\u5b58\u4e0d\u4f1a\u65e0\u9650\u5236\u589e\u957f\uff0c\u4e00\u6bb5\u65f6\u95f4\u4e0d\u7528\u7684\u7f13\u5b58\u6761\u76ee\u4f1a\u88ab\u6254\u6389\u3002 \u8fd9\u4e2a\u88c5\u9970\u5668\u652f\u6301\u4f20\u5165\u53c2\u6570\uff0c\u8fd8\u80fd\u6709\u8fd9\u79cd\u64cd\u4f5c\u7684\uff1fmaxsize \u662f\u4fdd\u5b58\u6700\u8fd1\u591a\u5c11\u4e2a\u8c03\u7528\u7684\u7ed3\u679c\uff0c\u6700\u597d\u8bbe\u7f6e\u4e3a 2 \u7684\u500d\u6570\uff0c\u9ed8\u8ba4\u4e3a 128\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a None \u7684\u8bdd\u5c31\u76f8\u5f53\u4e8e\u662f maxsize \u4e3a\u6b63\u65e0\u7a77\u4e86\u3002\u8fd8\u6709\u4e00\u4e2a\u53c2\u6570\u662f type\uff0c\u5982\u679c type \u8bbe\u7f6e\u4e3a true\uff0c\u5373\u628a\u4e0d\u540c\u53c2\u6570\u7c7b\u578b\u5f97\u5230\u7684\u7ed3\u679c\u5206\u5f00\u4fdd\u5b58\uff0c\u5982 f(3) \u548c f(3.0) \u4f1a\u88ab\u533a\u5206\u5f00\u3002 \u7531\u4e8e\u5b57\u5178\u7528\u4e8e\u7f13\u5b58\u7ed3\u679c\uff0c\u56e0\u6b64\u51fd\u6570\u7684\u4f4d\u7f6e\u548c\u5173\u952e\u5b57\u53c2\u6570\u5fc5\u987b\u662fhashable\u7684\u3002 \u5982\u679cmaxsize\u8bbe\u7f6e\u4e3aNone\uff0c\u5219\u7981\u7528LRU\u7279\u6027\uff0c\u7f13\u5b58\u53ef\u4ee5\u65e0\u9650\u5236\u589e\u957f\u3002\u5f53maxsize\u4e3a2\u6b21\u65b9\u65f6\uff0cLRU\u7279\u6027\u8868\u73b0\u6700\u4f73\u3002 \u5982\u679c\u5c06\u7c7b\u578b\u8bbe\u7f6e\u4e3atrue\uff0c\u5219\u5c06\u5206\u522b\u7f13\u5b58\u4e0d\u540c\u7c7b\u578b\u7684\u51fd\u6570\u53c2\u6570\u3002\u4f8b\u5982\uff0cf(3)\u548cf(3.0)\u5c06\u88ab\u89c6\u4e3a\u5177\u6709\u4e0d\u540c\u7ed3\u679c\u7684\u4e0d\u540c\u8c03\u7528\u3002 \u4e3a\u4e86\u5e2e\u52a9\u5ea6\u91cf\u7f13\u5b58\u7684\u6709\u6548\u6027\u5e76\u8c03\u4f18maxsize\u53c2\u6570\uff0c\u5c01\u88c5\u7684\u51fd\u6570\u4f7f\u7528cache_info()\u51fd\u6570\u8fdb\u884c\u68c0\u6d4b\uff0c\u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u547d\u540d\u5143\u7ec4\uff0c\u663e\u793ahits(\u547d\u4e2d), misses(\u672a\u547d\u4e2d)\u3001maxsize\u548ccurrsize\u3002\u5728\u591a\u7ebf\u7a0b\u73af\u5883\u4e2d\uff0c\u5f97\u5931\u662f\u8fd1\u4f3c\u7684\u3002 decorator\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2acache_clear()\u51fd\u6570\uff0c\u7528\u4e8e\u6e05\u9664\u6216\u4f7f\u7f13\u5b58\u5931\u6548\u3002 \u539f\u59cb\u7684\u5e95\u5c42\u51fd\u6570\u53ef\u4ee5\u901a\u8fc7__wrapped__\u5c5e\u6027\u8bbf\u95ee\u3002\u8fd9\u5bf9\u4e8e\u5185\u7701\u3001\u7ed5\u8fc7\u7f13\u5b58\u6216\u4f7f\u7528\u4e0d\u540c\u7684\u7f13\u5b58\u91cd\u65b0\u5305\u88c5\u51fd\u6570\u975e\u5e38\u6709\u7528\u3002 \u5199\u4e86\u4e2a\u51fd\u6570\u8ffd\u8e2a\u7ed3\u679c 1 2 3 4 5 6 7 def track ( func ): @functools.wraps ( func ) def inner ( * args ): result = func ( * args ) print ( {} -- ({}) -- {} . format ( func . __name__ , args [ 0 ], result )) return result return inner \u9012\u5f52\u51fd\u6570\u9002\u5408\u4f7f\u7528\u8fd9\u4e2a\u88c5\u9970\u5668\uff0c\u90a3\u5c31\u62ff\u7ecf\u5178\u7684\u6590\u6ce2\u90a3\u5951\u6570\u5217\u6765\u6d4b\u8bd5\u5427 \u4e0d\u4f7f\u7528\u7f13\u5b58 1 2 3 4 5 @track def fib ( n ): if n 2 : return n return fib ( n - 2 ) + fib ( n - 1 ) \u4f7f\u7528\u7f13\u5b58 1 2 3 4 5 6 @functools.lru_cache () @track def fib_with_cache ( n ): if n 2 : return n return fib_with_cache ( n - 2 ) + fib_with_cache ( n - 1 ) \u6d4b\u8bd5\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 fib(10) fib -- (0) -- 0 fib -- (1) -- 1 fib -- (2) -- 1 fib -- (1) -- 1 fib -- (0) -- 0 fib -- (1) -- 1 fib -- (2) -- 1 fib -- (3) -- 2 fib -- (4) -- 3 fib -- (1) -- 1 fib -- (0) -- 0 fib -- (1) -- 1 fib -- (2) -- 1 fib -- (3) -- 2 fib -- (0) -- 0 fib -- (1) -- 1 fib -- (2) -- 1 fib -- (1) -- 1 fib -- (0) -- 0 fib -- (1) -- 1 fib -- (2) -- 1 fib -- (3) -- 2 fib -- (4) -- 3 fib -- (5) -- 5 fib -- (6) -- 8 fib -- (1) -- 1 fib -- (0) -- 0 fib -- (1) -- 1 fib -- (2) -- 1 fib -- (3) -- 2 fib -- (0) -- 0 fib -- (1) -- 1 fib -- (2) -- 1 fib -- (1) -- 1 fib -- (0) -- 0 fib -- (1) -- 1 fib -- (2) -- 1 fib -- (3) -- 2 fib -- (4) -- 3 fib -- (5) -- 5 fib -- (0) -- 0 \u00b7\u00b7\u00b7\u00b7\u7701\u7565\u00b7\u00b7\u00b7\u00b7 \u65f6\u95f4\u82b1\u8d39\uff1a0:00:00.001295 1 2 3 4 5 6 7 8 9 10 11 12 13 14 fib_with_cache(10) fib_with_cache -- (0) -- 0 fib_with_cache -- (1) -- 1 fib_with_cache -- (2) -- 1 fib_with_cache -- (3) -- 2 fib_with_cache -- (4) -- 3 fib_with_cache -- (5) -- 5 fib_with_cache -- (6) -- 8 fib_with_cache -- (7) -- 13 fib_with_cache -- (8) -- 21 fib_with_cache -- (9) -- 34 fib_with_cache -- (10) -- 55 \u65f6\u95f4\u82b1\u8d39\uff1a0:00:00.000117 \u53ef\u4ee5\u5f88\u660e\u663e\u7684\u770b\u5230\uff0c\u4f7f\u7528\u7f13\u5b58\u7684\u65f6\u5019\uff0c\u53ea\u8c03\u7528\u4e86 11 \u6b21\u5c31\u5f97\u51fa\u4e86\u7ed3\u679c\uff0c\u5e76\u4e14\u82b1\u8d39\u65f6\u95f4\u53ea\u4e3a 0.000117 \u79d2 \u6211\u4eec\u518d\u628a\u6570\u5b57\u8c03\u5927\uff0c\u4f20\u5165\u7684\u53c2\u6570\u6539\u4e3a 31 1 2 3 fib(31) \u65f6\u95f4\u82b1\u8d39\uff1a0:00:41.323180 1 2 3 fib_with_cache(31) \u65f6\u95f4\u82b1\u8d39\uff1a0:00:00.000282 \u65f6\u95f4\u76f8\u5dee\u5c45\u7136\u5982\u6b64\u4e4b\u591a\uff01 \u8fd9\u4e2a\u88c5\u9970\u5668\u8fd8\u63d0\u4f9b cache_clear() \u7528\u4e8e\u6e05\u7406\u7f13\u5b58\uff0c\u4ee5\u53ca cache_info() \u7528\u4e8e\u67e5\u770b\u7f13\u5b58\u4fe1\u606f \u5b98\u65b9\u8fd8\u63d0\u4f9b\u4e86\u53e6\u5916\u4e00\u4e2a\u4f8b\u5b50\uff0c\u7528\u4e8e\u7f13\u5b58\u9759\u6001\u7f51\u9875\u7684\u5185\u5bb9 1 2 3 4 5 6 7 8 9 @lru_cache ( maxsize = 32 ) def get_pep ( num ): Retrieve text of a Python Enhancement Proposal resource = http://www.python.org/dev/peps/pep- %04d / % num try : with urllib . request . urlopen ( resource ) as s : return s . read () except urllib . error . HTTPError : return Not Found @functools.total_ordering \u7ed9\u5b9a\u4e00\u4e2a\u7c7b\u5b9a\u4e49\u4e00\u4e2a\u6216\u591a\u4e2a\u4e30\u5bcc\u7684\u6bd4\u8f83\u6392\u5e8f\u65b9\u6cd5\uff0c\u8fd9\u4e2a\u7c7b\u88c5\u9970\u5668\u63d0\u4f9b\u5176\u4f59\u7684\u65b9\u6cd5\u3002\u8fd9\u7b80\u5316\u4e86\u6307\u5b9a\u6240\u6709\u53ef\u80fd\u7684\u4e30\u5bcc\u6bd4\u8f83\u64cd\u4f5c\u6240\u6d89\u53ca\u7684\u5de5\u4f5c: \u5982\u679c\u4f60\u5df2\u7ecf\u5b9a\u4e49\u4e86 eq \u65b9\u6cd5\uff0c\u4ee5\u53ca lt \u3001 le \u3001 gt \u6216\u8005 ge () \u5176\u4e2d\u4e4b\u4e00\uff0c \u5373\u53ef\u81ea\u52a8\u751f\u6210\u5176\u5b83\u6bd4\u8f83\u65b9\u6cd5\u3002 \u4e0a\u4e00\u6ce2\u6e90\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 _convert = { __lt__ : [( __gt__ , _gt_from_lt ), ( __le__ , _le_from_lt ), ( __ge__ , _ge_from_lt )], __le__ : [( __ge__ , _ge_from_le ), ( __lt__ , _lt_from_le ), ( __gt__ , _gt_from_le )], __gt__ : [( __lt__ , _lt_from_gt ), ( __ge__ , _ge_from_gt ), ( __le__ , _le_from_gt )], __ge__ : [( __le__ , _le_from_ge ), ( __gt__ , _gt_from_ge ), ( __lt__ , _lt_from_ge )] } def total_ordering ( cls ): Class decorator that fills in missing ordering methods # Find user-defined comparisons (not those inherited from object). roots = { op for op in _convert if getattr ( cls , op , None ) is not getattr ( object , op , None )} if not roots : raise ValueError ( must define at least one ordering operation: = = ) root = max ( roots ) # prefer __lt__ to __le__ to __gt__ to __ge__ for opname , opfunc in _convert [ root ]: if opname not in roots : opfunc . __name__ = opname setattr ( cls , opname , opfunc ) return cls \u6765\u4e00\u4e2ademo: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 from functools import total_ordering @total_ordering class Door ( object ): def __init__ ( self ): self . value = 0 self . first_name = self . last_name = def __eq__ ( self , other ): print ( === my eq=== ) return ( self . first_name , self . last_name ) == ( other . first_name , other . last_name ) def __gt__ ( self , other ): print ( === my total_ordering=== ) return ( self . first_name , self . last_name ) ( other . first_name , other . last_name ) a = Door () b = Door () a . first_name = ouyang a . last_name = guoge b . first_name = aaaa b . last_name = bbbb print ( a == b ) print ( a b ) print ( a b ) print ( a = b ) print ( a = b ) \u7ed3\u679c\u8f93\u51fa\u4e3a\uff1a 1 2 3 4 5 6 7 8 9 10 === my eq=== False === my total_ordering=== True === my total_ordering=== False === my total_ordering=== False === my total_ordering=== True functools.partial(func, *args, **keywords) \u8be5\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5c40\u90e8\u5bf9\u8c61\uff0c\u5f53\u88ab\u8c03\u7528\u65f6\uff0c\u5b83\u7684\u884c\u4e3a\u5c06\u50cf\u51fd\u6570\u8c03\u7528\u4e00\u6837\uff0c\u5e26\u6709\u4f4d\u7f6e\u53c2\u6570args\u548c\u5173\u952e\u5b57\u53c2\u6570\u5173\u952e\u5b57\u3002\u5982\u679c\u5411\u8c03\u7528\u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u53c2\u6570\uff0c\u5b83\u4eec\u5c06\u88ab\u9644\u52a0\u5230args\u4e2d\u3002\u5982\u679c\u63d0\u4f9b\u4e86\u989d\u5916\u7684\u5173\u952e\u5b57\u53c2\u6570\uff0c\u5b83\u4eec\u5c06\u6269\u5c55\u5e76\u8986\u76d6\u5173\u952e\u5b57\u3002\u5927\u81f4\u76f8\u5f53\u4e8e: 1 2 3 4 5 6 7 8 9 def partial ( func , * args , ** keywords ): def newfunc ( * fargs , ** fkeywords ): newkeywords = keywords . copy () newkeywords . update ( fkeywords ) return func ( * args , * fargs , ** newkeywords ) newfunc . func = func newfunc . args = args newfunc . keywords = keywords return newfunc partial()\u7528\u4e8e\u90e8\u5206\u51fd\u6570\u5e94\u7528\u7a0b\u5e8f\uff0c\u8be5\u5e94\u7528\u7a0b\u5e8f\u201c\u51bb\u7ed3\u201d\u51fd\u6570\u53c2\u6570\u548c/\u6216\u5173\u952e\u5b57\u7684\u4e00\u90e8\u5206\uff0c\u4ece\u800c\u751f\u6210\u4e00\u4e2a\u5e26\u6709\u7b80\u5316\u7b7e\u540d\u7684\u65b0\u5bf9\u8c61\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u4f7f\u7528partial()\u521b\u5efa\u4e00\u4e2a\u53ef\u8c03\u7528\u7684\u51fd\u6570\uff0c\u5176\u884c\u4e3a\u7c7b\u4f3c\u4e8eint()\u51fd\u6570\uff0c\u5176\u4e2d\u57fa\u53c2\u6570\u9ed8\u8ba4\u4e3a2: 1 2 3 4 5 from functools import partial basetwo = partial ( int , base = 2 ) basetwo . __doc__ = Convert base 2 string to an int. basetwo ( 10010 ) 18 \u4e0a\u4e00\u6ce2\u6e90\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 ################################################################################ ### partial() argument application ################################################################################ # Purely functional, no descriptor behaviour class partial : New function with partial application of the given arguments and keywords. __slots__ = func , args , keywords , __dict__ , __weakref__ def __new__ ( * args , ** keywords ): if not args : raise TypeError ( descriptor __new__ of partial needs an argument ) if len ( args ) 2 : raise TypeError ( type partial takes at least one argument ) cls , func , * args = args if not callable ( func ): raise TypeError ( the first argument must be callable ) args = tuple ( args ) if hasattr ( func , func ): args = func . args + args tmpkw = func . keywords . copy () tmpkw . update ( keywords ) keywords = tmpkw del tmpkw func = func . func self = super ( partial , cls ) . __new__ ( cls ) self . func = func self . args = args self . keywords = keywords return self def __call__ ( * args , ** keywords ): if not args : raise TypeError ( descriptor __call__ of partial needs an argument ) self , * args = args newkeywords = self . keywords . copy () newkeywords . update ( keywords ) return self . func ( * self . args , * args , ** newkeywords ) @recursive_repr () def __repr__ ( self ): qualname = type ( self ) . __qualname__ args = [ repr ( self . func )] args . extend ( repr ( x ) for x in self . args ) args . extend ( f {k}={v!r} for ( k , v ) in self . keywords . items ()) if type ( self ) . __module__ == functools : return f functools.{qualname}({ , .join(args)}) return f {qualname}({ , .join(args)}) def __reduce__ ( self ): return type ( self ), ( self . func ,), ( self . func , self . args , self . keywords or None , self . __dict__ or None ) def __setstate__ ( self , state ): if not isinstance ( state , tuple ): raise TypeError ( argument to __setstate__ must be a tuple ) if len ( state ) != 4 : raise TypeError ( f expected 4 items in state, got {len(state)} ) func , args , kwds , namespace = state if ( not callable ( func ) or not isinstance ( args , tuple ) or ( kwds is not None and not isinstance ( kwds , dict )) or ( namespace is not None and not isinstance ( namespace , dict ))): raise TypeError ( invalid partial state ) args = tuple ( args ) # just in case it s a subclass if kwds is None : kwds = {} elif type ( kwds ) is not dict : # XXX does it need to be *exactly* dict? kwds = dict ( kwds ) if namespace is None : namespace = {} self . __dict__ = namespace self . func = func self . args = args self . keywords = kwds try : from _functools import partial except ImportError : pass \u901a\u8fc7\u4e0b\u9762\u8fd9\u4e2a\u7b80\u5355\u7684demo\uff0c\u4f1a\u66f4\u4e00\u76ee\u4e86\u7136\uff1a 1 2 3 4 5 6 7 from functools import partial def add ( x , y ): return x + y add_y = partial ( add , 3 ) # add_y \u662f\u4e00\u4e2a\u51fd\u6570 add_y ( 4 ) # \u7ed3\u679c\u662f 7 **functools.partialmethod(func, args, **keywords) * \u8fd4\u56de\u4e00\u4e2a\u65b0\u7684partialmethod\u63cf\u8ff0\u7b26\uff0c\u5b83\u7684\u884c\u4e3a\u7c7b\u4f3c\u4e8epartial\uff0c\u53ea\u662f\u5b83\u88ab\u8bbe\u8ba1\u4e3a\u4f5c\u4e3a\u65b9\u6cd5\u5b9a\u4e49\u4f7f\u7528\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u8c03\u7528\u3002 func\u5fc5\u987b\u662f\u63cf\u8ff0\u7b26\u6216\u53ef\u8c03\u7528\u5bf9\u8c61(\u4e0e\u666e\u901a\u51fd\u6570\u4e00\u6837\uff0c\u8fd9\u4e24\u79cd\u5bf9\u8c61\u90fd\u4f5c\u4e3a\u63cf\u8ff0\u7b26\u5904\u7406)\u3002 \u5f53func\u662f\u4e00\u4e2a\u63cf\u8ff0\u7b26(\u4f8b\u5982\u6b63\u5e38\u7684Python\u51fd\u6570\u3001classmethod()\u3001staticmethod()\u3001abstractmethod()\u6216partialmethod\u7684\u53e6\u4e00\u4e2a\u5b9e\u4f8b)\u65f6\uff0c\u5bf9__get__ \u7684\u8c03\u7528\u88ab\u59d4\u6258\u7ed9\u5e95\u5c42\u63cf\u8ff0\u7b26\uff0c\u7ed3\u679c\u8fd4\u56de\u4e00\u4e2a\u9002\u5f53\u7684\u90e8\u5206\u5bf9\u8c61\u3002 \u5f53func\u662f\u975e\u63cf\u8ff0\u7b26\u53ef\u8c03\u7528\u65f6\uff0c\u4f1a\u52a8\u6001\u521b\u5efa\u4e00\u4e2a\u5408\u9002\u7684\u7ed1\u5b9a\u65b9\u6cd5\u3002\u5f53\u4f5c\u4e3a\u65b9\u6cd5\u4f7f\u7528\u65f6\uff0c\u8fd9\u5c31\u50cf\u4e00\u4e2a\u666e\u901a\u7684Python\u51fd\u6570:self\u53c2\u6570\u5c06\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u53c2\u6570\u63d2\u5165\uff0c\u751a\u81f3\u5728\u63d0\u4f9b\u7ed9partialmethod\u6784\u9020\u51fd\u6570\u7684args\u548c\u5173\u952e\u5b57\u4e4b\u524d\u3002 \u4e3e\u4e2a\u6817\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Cell(object): ... def __init__(self): ... self._alive = False ... @property ... def alive(self): ... return self._alive ... def set_state(self, state): ... self._alive = bool(state) ... set_alive = partialmethod(set_state, True) ... set_dead = partialmethod(set_state, False) ... c = Cell() c.alive False c.set_alive() c.alive True functools.reduce(function, iterable[, initializer]) \u5c06\u4e24\u4e2a\u53c2\u6570\u7684\u51fd\u6570\u7d2f\u52a0\u5230\u5e8f\u5217\u7684\u9879\u4e0a\uff0c\u4ece\u5de6\u5230\u53f3\uff0c\u4f7f\u5e8f\u5217\u51cf\u5c11\u5230\u4e00\u4e2a\u503c\u3002\u4f8b\u5982, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) \u8ba1\u7b97 ((((1 + 2)+(3)+ 4)+ 5) \u3002\u5de6\u8fb9\u7684\u53c2\u6570x\u662f\u7d2f\u8ba1\u503c\uff0c\u53f3\u8fb9\u7684\u53c2\u6570y\u662f\u5e8f\u5217\u7684\u66f4\u65b0\u503c\u3002\u5982\u679c\u5b58\u5728\u53ef\u9009\u521d\u59cb\u5316\u5668\uff0c\u5219\u8be5\u521d\u59cb\u5316\u5668\u5c06\u653e\u7f6e\u5728\u8ba1\u7b97\u4e2d\u5e8f\u5217\u9879\u7684\u524d\u9762\uff0c\u5e76\u5728\u5e8f\u5217\u4e3a\u7a7a\u65f6\u5145\u5f53\u7f3a\u7701\u503c\u3002\u5982\u679c\u521d\u59cb\u503c\u8bbe\u5b9a\u9879\u672a\u7ed9\u5b9a\uff0c\u4e14\u5e8f\u5217\u4ec5\u5305\u542b\u4e00\u4e2a\u9879\uff0c\u5219\u8fd4\u56de\u7b2c\u4e00\u4e2a\u9879\u3002 \u76f8\u5f53\u4e8e\uff1a 1 2 3 4 5 6 7 8 9 def reduce ( function , iterable , initializer = None ): it = iter ( iterable ) if initializer is None : value = next ( it ) else : value = initializer for element in it : value = function ( value , element ) return value @functools.singledispatch \u4f7f\u7528\u8fc7\u522b\u7684\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\uff0c\u5982 java \u7b49\uff0c\u80af\u5b9a\u719f\u6089\u5404\u79cd\u65b9\u6cd5\u7684\u91cd\u8f7d\uff0c\u4f46\u662f\u5bf9\u4e8e Python \u6765\u8bf4\u662f\u4e0d\u652f\u6301\u65b9\u6cd5\u7684\u91cd\u8f7d\u7684\uff0c\u4e0d\u8fc7\u5176\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u80fd\u5c06\u666e\u901a\u51fd\u6570\u53d8\u4e3a\u6cdb\u51fd\u6570\uff08generic function\uff09 \u6bd4\u5982\u4f60\u8981\u9488\u5bf9\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u8fdb\u884c\u4e0d\u540c\u7684\u5904\u7406\uff0c\u800c\u53c8\u4e0d\u60f3\u5c06\u5b83\u4eec\u5199\u5230\u4e00\u8d77\uff0c\u90a3\u5c31\u53ef\u4ee5\u4f7f\u7528@singledispatch \u88c5\u9970\u5668\u4e86 \u4e3e\u4e2a\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import functools @functools.singledispatch def typecheck ( text ): pass @typecheck.register ( str ) def _ ( text ): print ( type ( text )) print ( str-- ) @typecheck.register ( list ) def _ ( text ): print ( type ( text )) print ( list-- ) @typecheck.register ( int ) def _ ( text ): print ( type ( text )) print ( int-- ) if __name__ == __main__ : a = [ 1 , 2 , 3 , 4 ] typecheck ( a ) \u770b\u4e00\u4e0b\u7ed3\u679c\uff1a 1 2 class list list-- \u6362\u51e0\u4e2a\u503c\u8bd5\u4e00\u4e0b\uff1a 1 2 3 4 a = 1 class int int-- 1 2 3 4 a = aaaa class str str-- singledispatch\u673a\u5236\u4e00\u4e2a\u663e\u8457\u7279\u5f81\u662f\uff0c\u53ef\u4ee5\u5728\u7cfb\u7edf\u7684\u4efb\u4f55\u5730\u65b9\u548c\u4efb\u4f55\u6a21\u5757\u4e2d\u6ce8\u518c\u4e13\u95e8\u7684\u51fd\u6570\uff0c\u5982\u679c\u540e\u6765\u6a21\u5757\u4e2d\u589e\u52a0\u4e86\u65b0\u7684\u7c7b\u578b\uff0c\u53ef\u4ee5\u8f7b\u677e\u5730\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u4e13\u95e8\u51fd\u6570\u6765\u5904\u7406\u65b0\u7c7b\u578b\u3002\u5f88\u50cf\u8bbe\u8ba1\u6a21\u5f0f\u4e2d\u7684\u7b56\u7565\u6a21\u5f0f functools.update_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES) \u8fd9\u4e2a\u51fd\u6570\u5c31\u662f\u7528\u6765\u66f4\u65b0\u4fee\u9970\u5668\u51fd\u6570\u7684\uff0c\u5177\u4f53\u66f4\u65b0\u4e9b\u4ec0\u4e48\u5462\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u628a\u5b83\u7684\u6e90\u7801\u642c\u8fc7\u6765\u770b\u4e00\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 WRAPPER_ASSIGNMENTS = ( __module__ , __name__ , __qualname__ , __doc__ , __annotations__ ) WRAPPER_UPDATES = ( __dict__ ,) def update_wrapper ( wrapper , wrapped , assigned = WRAPPER_ASSIGNMENTS , updated = WRAPPER_UPDATES ): for attr in assigned : try : value = getattr ( wrapped , attr ) except AttributeError : pass else : setattr ( wrapper , attr , value ) for attr in updated : getattr ( wrapper , attr ) . update ( getattr ( wrapped , attr , {})) wrapper . __wrapped__ = wrapped return wrapper \u5927\u5bb6\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u4e2a\u51fd\u6570\u7684\u4f5c\u7528\u5c31\u662f\u4ece \u88ab\u4fee\u9970\u7684\u51fd\u6570(wrapped) \u4e2d\u53d6\u51fa\u4e00\u4e9b\u5c5e\u6027\u503c\u6765\uff0c\u8d4b\u503c\u7ed9 \u4fee\u9970\u5668\u51fd\u6570(wrapper) \u3002\u4e3a\u4ec0\u4e48\u8981\u8fd9\u4e48\u505a\u5462\uff0c\u6211\u4eec\u770b\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u3002 \u9996\u5148\u6211\u4eec\u5199\u4e2a\u81ea\u5b9a\u4e49\u7684\u4fee\u9970\u5668\uff0c\u6ca1\u6709\u4efb\u4f55\u7684\u529f\u80fd\uff0c\u4ec5\u6709\u6587\u6863\u5b57\u7b26\u4e32\uff0c\u5982\u4e0b\u6240\u793a\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 def wrapper ( f ): def wrapper_function ( * args , ** kwargs ): \u8fd9\u4e2a\u662f\u4fee\u9970\u51fd\u6570 return f ( * args , ** kwargs ) return wrapper_function @wrapper def wrapped (): \u8fd9\u4e2a\u662f\u88ab\u4fee\u9970\u7684\u51fd\u6570 print ( wrapped ) print ( wrapped . __doc__ ) # \u8f93\u51fa`\u8fd9\u4e2a\u662f\u4fee\u9970\u51fd\u6570` print ( wrapped . __name__ ) # \u8f93\u51fa`wrapper_function` \u4ece\u4e0a\u9762\u7684\u4f8b\u5b50\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u6211\u60f3\u8981\u83b7\u53d6 wrapped \u8fd9\u4e2a\u88ab\u4fee\u9970\u51fd\u6570\u7684\u6587\u6863\u5b57\u7b26\u4e32\uff0c\u4f46\u662f\u5374\u83b7\u53d6\u6210\u4e86 wrapper_function \u7684\u6587\u6863\u5b57\u7b26\u4e32\uff0c wrapped \u51fd\u6570\u7684\u540d\u5b57\u4e5f\u53d8\u6210\u4e86 wrapper_function \u51fd\u6570\u7684\u540d\u5b57\u3002\u8fd9\u662f\u56e0\u4e3a\u7ed9 wrapped \u6dfb\u52a0\u4e0a @wrapper \u4fee\u9970\u5668\u76f8\u5f53\u4e8e\u6267\u884c\u4e86\u4e00\u53e5 wrapped = wrapper(wrapped) \uff0c\u6267\u884c\u5b8c\u8fd9\u6761\u8bed\u53e5\u4e4b\u540e\uff0c wrapped \u51fd\u6570\u5c31\u53d8\u6210\u4e86 wrapper_function \u51fd\u6570\u3002\u9047\u5230\u8fd9\u79cd\u60c5\u51b5\u8be5\u600e\u4e48\u529e\u5462\uff0c\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u624b\u52a8\u5730\u5728 wrapper \u51fd\u6570\u4e2d\u66f4\u6539 wrapper_function \u7684 __doc__ \u548c __name__ \u5c5e\u6027\uff0c\u4f46\u806a\u660e\u7684\u4f60\u80af\u5b9a\u4e5f\u60f3\u5230\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7528 update_wrapper \u51fd\u6570\u6765\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\u3002 \u6211\u4eec\u5bf9\u4e0a\u9762\u5b9a\u4e49\u7684\u4fee\u9970\u5668\u7a0d\u4f5c\u4fee\u6539\uff0c\u6dfb\u52a0\u4e86\u4e00\u53e5update_wrapper(wrapper_function, f)\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from functools import update_wrapper def wrapper ( f ): def wrapper_function ( * args , ** kwargs ): \u8fd9\u4e2a\u662f\u4fee\u9970\u51fd\u6570 return f ( * args , ** kwargs ) update_wrapper ( wrapper_function , f ) # \u6dfb\u52a0\u4e86\u8fd9\u6761\u8bed\u53e5 return wrapper_function @wrapper def wrapped (): \u8fd9\u4e2a\u662f\u88ab\u4fee\u9970\u7684\u51fd\u6570 print ( wrapped ) print ( wrapped . __doc__ ) # \u8f93\u51fa`\u8fd9\u4e2a\u662f\u88ab\u4fee\u9970\u7684\u51fd\u6570` print ( wrapped . __name__ ) # \u8f93\u51fa`wrapped` \u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c __doc__ \u548c __name__ \u5c5e\u6027\u5df2\u7ecf\u80fd\u591f\u6309\u6211\u4eec\u9884\u60f3\u7684\u90a3\u6837\u663e\u793a\u4e86\uff0c\u9664\u6b64\u4e4b\u5916\uff0c update_wrapper \u51fd\u6570\u4e5f\u5bf9 __module__ \u548c __dict__ \u7b49\u5c5e\u6027\u8fdb\u884c\u4e86\u66f4\u6539\u548c\u66f4\u65b0\u3002 @functools.wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES) \u770b\u4e00\u4e0b\u6e90\u7801\uff1a 1 2 3 4 5 6 7 8 WRAPPER_ASSIGNMENTS = ( __module__ , __name__ , __qualname__ , __doc__ , __annotations__ ) WRAPPER_UPDATES = ( __dict__ ,) def wraps ( wrapped , assigned = WRAPPER_ASSIGNMENTS , updated = WRAPPER_UPDATES ): return partial ( update_wrapper , wrapped = wrapped , assigned = assigned , updated = updated ) \u6ca1\u9519\uff0c\u5c31\u662f\u8fd9\u4e48\u7684\u7b80\u5355\uff0c\u53ea\u6709\u8fd9\u4e48\u4e00\u53e5\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0cwraps\u51fd\u6570\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u4fee\u9970\u5668\u7248\u7684update_wrapper\u51fd\u6570\uff0c\u5b83\u7684\u529f\u80fd\u548cupdate_wrapper\u662f\u4e00\u6a21\u4e00\u6837\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u6211\u4eec\u4e0a\u9762\u7684\u81ea\u5b9a\u4e49\u4fee\u9970\u5668\u7684\u4f8b\u5b50\uff0c\u505a\u51fa\u4e00\u4e2a\u66f4\u65b9\u4fbf\u9605\u8bfb\u7684\u7248\u672c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from functools import wraps def wrapper ( f ): @wraps ( f ) def wrapper_function ( * args , ** kwargs ): \u8fd9\u4e2a\u662f\u4fee\u9970\u51fd\u6570 return f ( * args , ** kwargs ) return wrapper_function @wrapper def wrapped (): \u8fd9\u4e2a\u662f\u88ab\u4fee\u9970\u7684\u51fd\u6570 print ( wrapped ) print ( wrapped . __doc__ ) # \u8f93\u51fa`\u8fd9\u4e2a\u662f\u88ab\u4fee\u9970\u7684\u51fd\u6570` print ( wrapped . __name__ ) # \u8f93\u51fa`wrapped` wraps \u4fee\u9970\u5668\uff0c\u5176\u5b9e\u5c31\u662f\u5c06**\u88ab\u4fee\u9970\u7684\u51fd\u6570(wrapped) \u7684\u4e00\u4e9b\u5c5e\u6027\u503c\u8d4b\u503c\u7ed9**\u4fee\u9970\u5668\u51fd\u6570(wrapper) \uff0c\u6700\u7ec8\u8ba9\u5c5e\u6027\u7684\u663e\u793a\u66f4\u7b26\u5408\u6211\u4eec\u7684\u76f4\u89c9\u3002","title":"functools"},{"location":"Python/python_functools/#functoolscmp_to_keyfunc","text":"\u5c06\u65e7\u5f0f\u6bd4\u8f83\u51fd\u6570\u8f6c\u6362\u4e3a\u5173\u952e\u5b57\u51fd\u6570\u3002\u4e0e\u63a5\u53d7\u5b57\u5173\u952e\u51fd\u6570(\u5982sort()\u3001min()\u3001max()\u3001heapq. nbiggest()\u3001heapq.nsmallest()\u3001itertools.groupby())\u7684\u5de5\u5177\u4e00\u8d77\u4f7f\u7528\u3002\u8be5\u51fd\u6570\u4e3b\u8981\u7528\u4e8e\u4ecePython 2\u8f6c\u6362\u8fc7\u6765\u7684\u7a0b\u5e8f\u7684\u8f6c\u6362\u5de5\u5177\uff0cPython 2\u652f\u6301\u4f7f\u7528\u6bd4\u8f83\u51fd\u6570\u3002 \u6bd4\u8f83\u51fd\u6570\u662f\u4efb\u4f55\u53ef\u8c03\u7528\u7684\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff0c\u8fdb\u884c\u6bd4\u8f83\uff0c\u7136\u540e\u8fd4\u56de\u8d1f\u6570(\u5c0f\u4e8e)\u3001\u96f6(\u76f8\u7b49)\u6216\u6b63\u6570(\u5927\u4e8e)\u3002\u952e\u51fd\u6570\u662f\u4e00\u4e2a\u53ef\u8c03\u7528\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\u5e76\u8fd4\u56de\u53e6\u4e00\u4e2a\u503c\u4f5c\u4e3a\u6392\u5e8f\u952e\u3002 \u653e\u4e0a\u4e00\u6ce2\u6e90\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 ################################################################################ ### cmp_to_key() function converter ################################################################################ def cmp_to_key ( mycmp ): Convert a cmp= function into a key= function class K ( object ): __slots__ = [ obj ] def __init__ ( self , obj ): self . obj = obj def __lt__ ( self , other ): return mycmp ( self . obj , other . obj ) 0 def __gt__ ( self , other ): return mycmp ( self . obj , other . obj ) 0 def __eq__ ( self , other ): return mycmp ( self . obj , other . obj ) == 0 def __le__ ( self , other ): return mycmp ( self . obj , other . obj ) = 0 def __ge__ ( self , other ): return mycmp ( self . obj , other . obj ) = 0 __hash__ = None return K \u5199\u4e00\u4e2ademo\uff0c\u770b\u4e00\u4e0b\u8fd0\u884c\u6d41\u7a0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 import functools class MyObject : def __init__ ( self , val ): self . val = val def __str__ ( self ): return MyObject({}) . format ( self . val ) def compare_obj ( a , b ): Old-style comparison function. print ( comparing {} and {} . format ( a , b )) if a . val b . val : return - 1 elif a . val b . val : return 1 return 0 # \u6392\u5e8f\u7684key get_key = functools . cmp_to_key ( compare_obj ) def get_key_wrapper ( o ): Wrapper function for get_key to allow for print statements. new_key = get_key ( o ) print ( key_wrapper({}) - {!r} . format ( o , new_key )) return new_key objs = [ MyObject ( x ) for x in range ( 5 , 0 , - 1 )] for o in sorted ( objs , key = get_key_wrapper ): print ( o ) \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c cmp_to_key() \u5c06\u76f4\u63a5\u4f7f\u7528\uff0c\u4f46\u5728\u672c\u4f8b\u4e2d\u5f15\u5165\u4e86\u4e00\u4e2a\u989d\u5916\u7684\u5305\u88c5\u51fd\u6570\uff0c\u4ee5\u5728\u8c03\u7528\u5173\u952e\u51fd\u6570\u65f6\u8f93\u51fa\u66f4\u591a\u4fe1\u606f\u3002 \u8f93\u51fa\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 key_wrapper(MyObject(5)) - functools.KeyWrapper object at 0x10692e510 key_wrapper(MyObject(4)) - functools.KeyWrapper object at 0x10692e4f0 key_wrapper(MyObject(3)) - functools.KeyWrapper object at 0x10692e4d0 key_wrapper(MyObject(2)) - functools.KeyWrapper object at 0x10692e470 key_wrapper(MyObject(1)) - functools.KeyWrapper object at 0x10692e490 comparing MyObject(4) and MyObject(5) comparing MyObject(3) and MyObject(4) comparing MyObject(2) and MyObject(3) comparing MyObject(1) and MyObject(2) MyObject(1) MyObject(2) MyObject(3) MyObject(4) MyObject(5)","title":"functools.cmp_to_key(func)"},{"location":"Python/python_functools/#functoolslru_cachemaxsize128-typedfalse","text":"\u8fd9\u4e2a\u88c5\u9970\u5668\u5b9e\u73b0\u4e86\u5907\u5fd8\u7684\u529f\u80fd\uff0c\u662f\u4e00\u9879\u4f18\u5316\u6280\u672f\uff0c\u628a\u8017\u65f6\u7684\u51fd\u6570\u7684\u7ed3\u679c\u4fdd\u5b58\u8d77\u6765\uff0c\u907f\u514d\u4f20\u5165\u76f8\u540c\u7684\u53c2\u6570\u65f6\u91cd\u590d\u8ba1\u7b97\u3002lru \u662f\uff08least recently used\uff09\u7684\u7f29\u5199\uff0c\u5373\u6700\u8fd1\u6700\u5c11\u4f7f\u7528\u539f\u5219\u3002\u8868\u660e\u7f13\u5b58\u4e0d\u4f1a\u65e0\u9650\u5236\u589e\u957f\uff0c\u4e00\u6bb5\u65f6\u95f4\u4e0d\u7528\u7684\u7f13\u5b58\u6761\u76ee\u4f1a\u88ab\u6254\u6389\u3002 \u8fd9\u4e2a\u88c5\u9970\u5668\u652f\u6301\u4f20\u5165\u53c2\u6570\uff0c\u8fd8\u80fd\u6709\u8fd9\u79cd\u64cd\u4f5c\u7684\uff1fmaxsize \u662f\u4fdd\u5b58\u6700\u8fd1\u591a\u5c11\u4e2a\u8c03\u7528\u7684\u7ed3\u679c\uff0c\u6700\u597d\u8bbe\u7f6e\u4e3a 2 \u7684\u500d\u6570\uff0c\u9ed8\u8ba4\u4e3a 128\u3002\u5982\u679c\u8bbe\u7f6e\u4e3a None \u7684\u8bdd\u5c31\u76f8\u5f53\u4e8e\u662f maxsize \u4e3a\u6b63\u65e0\u7a77\u4e86\u3002\u8fd8\u6709\u4e00\u4e2a\u53c2\u6570\u662f type\uff0c\u5982\u679c type \u8bbe\u7f6e\u4e3a true\uff0c\u5373\u628a\u4e0d\u540c\u53c2\u6570\u7c7b\u578b\u5f97\u5230\u7684\u7ed3\u679c\u5206\u5f00\u4fdd\u5b58\uff0c\u5982 f(3) \u548c f(3.0) \u4f1a\u88ab\u533a\u5206\u5f00\u3002 \u7531\u4e8e\u5b57\u5178\u7528\u4e8e\u7f13\u5b58\u7ed3\u679c\uff0c\u56e0\u6b64\u51fd\u6570\u7684\u4f4d\u7f6e\u548c\u5173\u952e\u5b57\u53c2\u6570\u5fc5\u987b\u662fhashable\u7684\u3002 \u5982\u679cmaxsize\u8bbe\u7f6e\u4e3aNone\uff0c\u5219\u7981\u7528LRU\u7279\u6027\uff0c\u7f13\u5b58\u53ef\u4ee5\u65e0\u9650\u5236\u589e\u957f\u3002\u5f53maxsize\u4e3a2\u6b21\u65b9\u65f6\uff0cLRU\u7279\u6027\u8868\u73b0\u6700\u4f73\u3002 \u5982\u679c\u5c06\u7c7b\u578b\u8bbe\u7f6e\u4e3atrue\uff0c\u5219\u5c06\u5206\u522b\u7f13\u5b58\u4e0d\u540c\u7c7b\u578b\u7684\u51fd\u6570\u53c2\u6570\u3002\u4f8b\u5982\uff0cf(3)\u548cf(3.0)\u5c06\u88ab\u89c6\u4e3a\u5177\u6709\u4e0d\u540c\u7ed3\u679c\u7684\u4e0d\u540c\u8c03\u7528\u3002 \u4e3a\u4e86\u5e2e\u52a9\u5ea6\u91cf\u7f13\u5b58\u7684\u6709\u6548\u6027\u5e76\u8c03\u4f18maxsize\u53c2\u6570\uff0c\u5c01\u88c5\u7684\u51fd\u6570\u4f7f\u7528cache_info()\u51fd\u6570\u8fdb\u884c\u68c0\u6d4b\uff0c\u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u547d\u540d\u5143\u7ec4\uff0c\u663e\u793ahits(\u547d\u4e2d), misses(\u672a\u547d\u4e2d)\u3001maxsize\u548ccurrsize\u3002\u5728\u591a\u7ebf\u7a0b\u73af\u5883\u4e2d\uff0c\u5f97\u5931\u662f\u8fd1\u4f3c\u7684\u3002 decorator\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2acache_clear()\u51fd\u6570\uff0c\u7528\u4e8e\u6e05\u9664\u6216\u4f7f\u7f13\u5b58\u5931\u6548\u3002 \u539f\u59cb\u7684\u5e95\u5c42\u51fd\u6570\u53ef\u4ee5\u901a\u8fc7__wrapped__\u5c5e\u6027\u8bbf\u95ee\u3002\u8fd9\u5bf9\u4e8e\u5185\u7701\u3001\u7ed5\u8fc7\u7f13\u5b58\u6216\u4f7f\u7528\u4e0d\u540c\u7684\u7f13\u5b58\u91cd\u65b0\u5305\u88c5\u51fd\u6570\u975e\u5e38\u6709\u7528\u3002 \u5199\u4e86\u4e2a\u51fd\u6570\u8ffd\u8e2a\u7ed3\u679c 1 2 3 4 5 6 7 def track ( func ): @functools.wraps ( func ) def inner ( * args ): result = func ( * args ) print ( {} -- ({}) -- {} . format ( func . __name__ , args [ 0 ], result )) return result return inner \u9012\u5f52\u51fd\u6570\u9002\u5408\u4f7f\u7528\u8fd9\u4e2a\u88c5\u9970\u5668\uff0c\u90a3\u5c31\u62ff\u7ecf\u5178\u7684\u6590\u6ce2\u90a3\u5951\u6570\u5217\u6765\u6d4b\u8bd5\u5427 \u4e0d\u4f7f\u7528\u7f13\u5b58 1 2 3 4 5 @track def fib ( n ): if n 2 : return n return fib ( n - 2 ) + fib ( n - 1 ) \u4f7f\u7528\u7f13\u5b58 1 2 3 4 5 6 @functools.lru_cache () @track def fib_with_cache ( n ): if n 2 : return n return fib_with_cache ( n - 2 ) + fib_with_cache ( n - 1 ) \u6d4b\u8bd5\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 fib(10) fib -- (0) -- 0 fib -- (1) -- 1 fib -- (2) -- 1 fib -- (1) -- 1 fib -- (0) -- 0 fib -- (1) -- 1 fib -- (2) -- 1 fib -- (3) -- 2 fib -- (4) -- 3 fib -- (1) -- 1 fib -- (0) -- 0 fib -- (1) -- 1 fib -- (2) -- 1 fib -- (3) -- 2 fib -- (0) -- 0 fib -- (1) -- 1 fib -- (2) -- 1 fib -- (1) -- 1 fib -- (0) -- 0 fib -- (1) -- 1 fib -- (2) -- 1 fib -- (3) -- 2 fib -- (4) -- 3 fib -- (5) -- 5 fib -- (6) -- 8 fib -- (1) -- 1 fib -- (0) -- 0 fib -- (1) -- 1 fib -- (2) -- 1 fib -- (3) -- 2 fib -- (0) -- 0 fib -- (1) -- 1 fib -- (2) -- 1 fib -- (1) -- 1 fib -- (0) -- 0 fib -- (1) -- 1 fib -- (2) -- 1 fib -- (3) -- 2 fib -- (4) -- 3 fib -- (5) -- 5 fib -- (0) -- 0 \u00b7\u00b7\u00b7\u00b7\u7701\u7565\u00b7\u00b7\u00b7\u00b7 \u65f6\u95f4\u82b1\u8d39\uff1a0:00:00.001295 1 2 3 4 5 6 7 8 9 10 11 12 13 14 fib_with_cache(10) fib_with_cache -- (0) -- 0 fib_with_cache -- (1) -- 1 fib_with_cache -- (2) -- 1 fib_with_cache -- (3) -- 2 fib_with_cache -- (4) -- 3 fib_with_cache -- (5) -- 5 fib_with_cache -- (6) -- 8 fib_with_cache -- (7) -- 13 fib_with_cache -- (8) -- 21 fib_with_cache -- (9) -- 34 fib_with_cache -- (10) -- 55 \u65f6\u95f4\u82b1\u8d39\uff1a0:00:00.000117 \u53ef\u4ee5\u5f88\u660e\u663e\u7684\u770b\u5230\uff0c\u4f7f\u7528\u7f13\u5b58\u7684\u65f6\u5019\uff0c\u53ea\u8c03\u7528\u4e86 11 \u6b21\u5c31\u5f97\u51fa\u4e86\u7ed3\u679c\uff0c\u5e76\u4e14\u82b1\u8d39\u65f6\u95f4\u53ea\u4e3a 0.000117 \u79d2 \u6211\u4eec\u518d\u628a\u6570\u5b57\u8c03\u5927\uff0c\u4f20\u5165\u7684\u53c2\u6570\u6539\u4e3a 31 1 2 3 fib(31) \u65f6\u95f4\u82b1\u8d39\uff1a0:00:41.323180 1 2 3 fib_with_cache(31) \u65f6\u95f4\u82b1\u8d39\uff1a0:00:00.000282 \u65f6\u95f4\u76f8\u5dee\u5c45\u7136\u5982\u6b64\u4e4b\u591a\uff01 \u8fd9\u4e2a\u88c5\u9970\u5668\u8fd8\u63d0\u4f9b cache_clear() \u7528\u4e8e\u6e05\u7406\u7f13\u5b58\uff0c\u4ee5\u53ca cache_info() \u7528\u4e8e\u67e5\u770b\u7f13\u5b58\u4fe1\u606f \u5b98\u65b9\u8fd8\u63d0\u4f9b\u4e86\u53e6\u5916\u4e00\u4e2a\u4f8b\u5b50\uff0c\u7528\u4e8e\u7f13\u5b58\u9759\u6001\u7f51\u9875\u7684\u5185\u5bb9 1 2 3 4 5 6 7 8 9 @lru_cache ( maxsize = 32 ) def get_pep ( num ): Retrieve text of a Python Enhancement Proposal resource = http://www.python.org/dev/peps/pep- %04d / % num try : with urllib . request . urlopen ( resource ) as s : return s . read () except urllib . error . HTTPError : return Not Found","title":"@functools.lru_cache(maxsize=128, typed=False)"},{"location":"Python/python_functools/#functoolstotal_ordering","text":"\u7ed9\u5b9a\u4e00\u4e2a\u7c7b\u5b9a\u4e49\u4e00\u4e2a\u6216\u591a\u4e2a\u4e30\u5bcc\u7684\u6bd4\u8f83\u6392\u5e8f\u65b9\u6cd5\uff0c\u8fd9\u4e2a\u7c7b\u88c5\u9970\u5668\u63d0\u4f9b\u5176\u4f59\u7684\u65b9\u6cd5\u3002\u8fd9\u7b80\u5316\u4e86\u6307\u5b9a\u6240\u6709\u53ef\u80fd\u7684\u4e30\u5bcc\u6bd4\u8f83\u64cd\u4f5c\u6240\u6d89\u53ca\u7684\u5de5\u4f5c: \u5982\u679c\u4f60\u5df2\u7ecf\u5b9a\u4e49\u4e86 eq \u65b9\u6cd5\uff0c\u4ee5\u53ca lt \u3001 le \u3001 gt \u6216\u8005 ge () \u5176\u4e2d\u4e4b\u4e00\uff0c \u5373\u53ef\u81ea\u52a8\u751f\u6210\u5176\u5b83\u6bd4\u8f83\u65b9\u6cd5\u3002 \u4e0a\u4e00\u6ce2\u6e90\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 _convert = { __lt__ : [( __gt__ , _gt_from_lt ), ( __le__ , _le_from_lt ), ( __ge__ , _ge_from_lt )], __le__ : [( __ge__ , _ge_from_le ), ( __lt__ , _lt_from_le ), ( __gt__ , _gt_from_le )], __gt__ : [( __lt__ , _lt_from_gt ), ( __ge__ , _ge_from_gt ), ( __le__ , _le_from_gt )], __ge__ : [( __le__ , _le_from_ge ), ( __gt__ , _gt_from_ge ), ( __lt__ , _lt_from_ge )] } def total_ordering ( cls ): Class decorator that fills in missing ordering methods # Find user-defined comparisons (not those inherited from object). roots = { op for op in _convert if getattr ( cls , op , None ) is not getattr ( object , op , None )} if not roots : raise ValueError ( must define at least one ordering operation: = = ) root = max ( roots ) # prefer __lt__ to __le__ to __gt__ to __ge__ for opname , opfunc in _convert [ root ]: if opname not in roots : opfunc . __name__ = opname setattr ( cls , opname , opfunc ) return cls \u6765\u4e00\u4e2ademo: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 from functools import total_ordering @total_ordering class Door ( object ): def __init__ ( self ): self . value = 0 self . first_name = self . last_name = def __eq__ ( self , other ): print ( === my eq=== ) return ( self . first_name , self . last_name ) == ( other . first_name , other . last_name ) def __gt__ ( self , other ): print ( === my total_ordering=== ) return ( self . first_name , self . last_name ) ( other . first_name , other . last_name ) a = Door () b = Door () a . first_name = ouyang a . last_name = guoge b . first_name = aaaa b . last_name = bbbb print ( a == b ) print ( a b ) print ( a b ) print ( a = b ) print ( a = b ) \u7ed3\u679c\u8f93\u51fa\u4e3a\uff1a 1 2 3 4 5 6 7 8 9 10 === my eq=== False === my total_ordering=== True === my total_ordering=== False === my total_ordering=== False === my total_ordering=== True","title":"@functools.total_ordering"},{"location":"Python/python_functools/#functoolspartialfunc-args-keywords","text":"\u8be5\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5c40\u90e8\u5bf9\u8c61\uff0c\u5f53\u88ab\u8c03\u7528\u65f6\uff0c\u5b83\u7684\u884c\u4e3a\u5c06\u50cf\u51fd\u6570\u8c03\u7528\u4e00\u6837\uff0c\u5e26\u6709\u4f4d\u7f6e\u53c2\u6570args\u548c\u5173\u952e\u5b57\u53c2\u6570\u5173\u952e\u5b57\u3002\u5982\u679c\u5411\u8c03\u7528\u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u53c2\u6570\uff0c\u5b83\u4eec\u5c06\u88ab\u9644\u52a0\u5230args\u4e2d\u3002\u5982\u679c\u63d0\u4f9b\u4e86\u989d\u5916\u7684\u5173\u952e\u5b57\u53c2\u6570\uff0c\u5b83\u4eec\u5c06\u6269\u5c55\u5e76\u8986\u76d6\u5173\u952e\u5b57\u3002\u5927\u81f4\u76f8\u5f53\u4e8e: 1 2 3 4 5 6 7 8 9 def partial ( func , * args , ** keywords ): def newfunc ( * fargs , ** fkeywords ): newkeywords = keywords . copy () newkeywords . update ( fkeywords ) return func ( * args , * fargs , ** newkeywords ) newfunc . func = func newfunc . args = args newfunc . keywords = keywords return newfunc partial()\u7528\u4e8e\u90e8\u5206\u51fd\u6570\u5e94\u7528\u7a0b\u5e8f\uff0c\u8be5\u5e94\u7528\u7a0b\u5e8f\u201c\u51bb\u7ed3\u201d\u51fd\u6570\u53c2\u6570\u548c/\u6216\u5173\u952e\u5b57\u7684\u4e00\u90e8\u5206\uff0c\u4ece\u800c\u751f\u6210\u4e00\u4e2a\u5e26\u6709\u7b80\u5316\u7b7e\u540d\u7684\u65b0\u5bf9\u8c61\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u4f7f\u7528partial()\u521b\u5efa\u4e00\u4e2a\u53ef\u8c03\u7528\u7684\u51fd\u6570\uff0c\u5176\u884c\u4e3a\u7c7b\u4f3c\u4e8eint()\u51fd\u6570\uff0c\u5176\u4e2d\u57fa\u53c2\u6570\u9ed8\u8ba4\u4e3a2: 1 2 3 4 5 from functools import partial basetwo = partial ( int , base = 2 ) basetwo . __doc__ = Convert base 2 string to an int. basetwo ( 10010 ) 18 \u4e0a\u4e00\u6ce2\u6e90\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 ################################################################################ ### partial() argument application ################################################################################ # Purely functional, no descriptor behaviour class partial : New function with partial application of the given arguments and keywords. __slots__ = func , args , keywords , __dict__ , __weakref__ def __new__ ( * args , ** keywords ): if not args : raise TypeError ( descriptor __new__ of partial needs an argument ) if len ( args ) 2 : raise TypeError ( type partial takes at least one argument ) cls , func , * args = args if not callable ( func ): raise TypeError ( the first argument must be callable ) args = tuple ( args ) if hasattr ( func , func ): args = func . args + args tmpkw = func . keywords . copy () tmpkw . update ( keywords ) keywords = tmpkw del tmpkw func = func . func self = super ( partial , cls ) . __new__ ( cls ) self . func = func self . args = args self . keywords = keywords return self def __call__ ( * args , ** keywords ): if not args : raise TypeError ( descriptor __call__ of partial needs an argument ) self , * args = args newkeywords = self . keywords . copy () newkeywords . update ( keywords ) return self . func ( * self . args , * args , ** newkeywords ) @recursive_repr () def __repr__ ( self ): qualname = type ( self ) . __qualname__ args = [ repr ( self . func )] args . extend ( repr ( x ) for x in self . args ) args . extend ( f {k}={v!r} for ( k , v ) in self . keywords . items ()) if type ( self ) . __module__ == functools : return f functools.{qualname}({ , .join(args)}) return f {qualname}({ , .join(args)}) def __reduce__ ( self ): return type ( self ), ( self . func ,), ( self . func , self . args , self . keywords or None , self . __dict__ or None ) def __setstate__ ( self , state ): if not isinstance ( state , tuple ): raise TypeError ( argument to __setstate__ must be a tuple ) if len ( state ) != 4 : raise TypeError ( f expected 4 items in state, got {len(state)} ) func , args , kwds , namespace = state if ( not callable ( func ) or not isinstance ( args , tuple ) or ( kwds is not None and not isinstance ( kwds , dict )) or ( namespace is not None and not isinstance ( namespace , dict ))): raise TypeError ( invalid partial state ) args = tuple ( args ) # just in case it s a subclass if kwds is None : kwds = {} elif type ( kwds ) is not dict : # XXX does it need to be *exactly* dict? kwds = dict ( kwds ) if namespace is None : namespace = {} self . __dict__ = namespace self . func = func self . args = args self . keywords = kwds try : from _functools import partial except ImportError : pass \u901a\u8fc7\u4e0b\u9762\u8fd9\u4e2a\u7b80\u5355\u7684demo\uff0c\u4f1a\u66f4\u4e00\u76ee\u4e86\u7136\uff1a 1 2 3 4 5 6 7 from functools import partial def add ( x , y ): return x + y add_y = partial ( add , 3 ) # add_y \u662f\u4e00\u4e2a\u51fd\u6570 add_y ( 4 ) # \u7ed3\u679c\u662f 7","title":"functools.partial(func, *args, **keywords)"},{"location":"Python/python_functools/#functoolspartialmethodfunc-args-keywords-42","text":"\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684partialmethod\u63cf\u8ff0\u7b26\uff0c\u5b83\u7684\u884c\u4e3a\u7c7b\u4f3c\u4e8epartial\uff0c\u53ea\u662f\u5b83\u88ab\u8bbe\u8ba1\u4e3a\u4f5c\u4e3a\u65b9\u6cd5\u5b9a\u4e49\u4f7f\u7528\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u8c03\u7528\u3002 func\u5fc5\u987b\u662f\u63cf\u8ff0\u7b26\u6216\u53ef\u8c03\u7528\u5bf9\u8c61(\u4e0e\u666e\u901a\u51fd\u6570\u4e00\u6837\uff0c\u8fd9\u4e24\u79cd\u5bf9\u8c61\u90fd\u4f5c\u4e3a\u63cf\u8ff0\u7b26\u5904\u7406)\u3002 \u5f53func\u662f\u4e00\u4e2a\u63cf\u8ff0\u7b26(\u4f8b\u5982\u6b63\u5e38\u7684Python\u51fd\u6570\u3001classmethod()\u3001staticmethod()\u3001abstractmethod()\u6216partialmethod\u7684\u53e6\u4e00\u4e2a\u5b9e\u4f8b)\u65f6\uff0c\u5bf9__get__ \u7684\u8c03\u7528\u88ab\u59d4\u6258\u7ed9\u5e95\u5c42\u63cf\u8ff0\u7b26\uff0c\u7ed3\u679c\u8fd4\u56de\u4e00\u4e2a\u9002\u5f53\u7684\u90e8\u5206\u5bf9\u8c61\u3002 \u5f53func\u662f\u975e\u63cf\u8ff0\u7b26\u53ef\u8c03\u7528\u65f6\uff0c\u4f1a\u52a8\u6001\u521b\u5efa\u4e00\u4e2a\u5408\u9002\u7684\u7ed1\u5b9a\u65b9\u6cd5\u3002\u5f53\u4f5c\u4e3a\u65b9\u6cd5\u4f7f\u7528\u65f6\uff0c\u8fd9\u5c31\u50cf\u4e00\u4e2a\u666e\u901a\u7684Python\u51fd\u6570:self\u53c2\u6570\u5c06\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u53c2\u6570\u63d2\u5165\uff0c\u751a\u81f3\u5728\u63d0\u4f9b\u7ed9partialmethod\u6784\u9020\u51fd\u6570\u7684args\u548c\u5173\u952e\u5b57\u4e4b\u524d\u3002 \u4e3e\u4e2a\u6817\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Cell(object): ... def __init__(self): ... self._alive = False ... @property ... def alive(self): ... return self._alive ... def set_state(self, state): ... self._alive = bool(state) ... set_alive = partialmethod(set_state, True) ... set_dead = partialmethod(set_state, False) ... c = Cell() c.alive False c.set_alive() c.alive True","title":"**functools.partialmethod(func, args, **keywords) *"},{"location":"Python/python_functools/#functoolsreducefunction-iterable-initializer","text":"\u5c06\u4e24\u4e2a\u53c2\u6570\u7684\u51fd\u6570\u7d2f\u52a0\u5230\u5e8f\u5217\u7684\u9879\u4e0a\uff0c\u4ece\u5de6\u5230\u53f3\uff0c\u4f7f\u5e8f\u5217\u51cf\u5c11\u5230\u4e00\u4e2a\u503c\u3002\u4f8b\u5982, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) \u8ba1\u7b97 ((((1 + 2)+(3)+ 4)+ 5) \u3002\u5de6\u8fb9\u7684\u53c2\u6570x\u662f\u7d2f\u8ba1\u503c\uff0c\u53f3\u8fb9\u7684\u53c2\u6570y\u662f\u5e8f\u5217\u7684\u66f4\u65b0\u503c\u3002\u5982\u679c\u5b58\u5728\u53ef\u9009\u521d\u59cb\u5316\u5668\uff0c\u5219\u8be5\u521d\u59cb\u5316\u5668\u5c06\u653e\u7f6e\u5728\u8ba1\u7b97\u4e2d\u5e8f\u5217\u9879\u7684\u524d\u9762\uff0c\u5e76\u5728\u5e8f\u5217\u4e3a\u7a7a\u65f6\u5145\u5f53\u7f3a\u7701\u503c\u3002\u5982\u679c\u521d\u59cb\u503c\u8bbe\u5b9a\u9879\u672a\u7ed9\u5b9a\uff0c\u4e14\u5e8f\u5217\u4ec5\u5305\u542b\u4e00\u4e2a\u9879\uff0c\u5219\u8fd4\u56de\u7b2c\u4e00\u4e2a\u9879\u3002 \u76f8\u5f53\u4e8e\uff1a 1 2 3 4 5 6 7 8 9 def reduce ( function , iterable , initializer = None ): it = iter ( iterable ) if initializer is None : value = next ( it ) else : value = initializer for element in it : value = function ( value , element ) return value","title":"functools.reduce(function, iterable[, initializer])"},{"location":"Python/python_functools/#functoolssingledispatch","text":"\u4f7f\u7528\u8fc7\u522b\u7684\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\uff0c\u5982 java \u7b49\uff0c\u80af\u5b9a\u719f\u6089\u5404\u79cd\u65b9\u6cd5\u7684\u91cd\u8f7d\uff0c\u4f46\u662f\u5bf9\u4e8e Python \u6765\u8bf4\u662f\u4e0d\u652f\u6301\u65b9\u6cd5\u7684\u91cd\u8f7d\u7684\uff0c\u4e0d\u8fc7\u5176\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u88c5\u9970\u5668\uff0c\u80fd\u5c06\u666e\u901a\u51fd\u6570\u53d8\u4e3a\u6cdb\u51fd\u6570\uff08generic function\uff09 \u6bd4\u5982\u4f60\u8981\u9488\u5bf9\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u8fdb\u884c\u4e0d\u540c\u7684\u5904\u7406\uff0c\u800c\u53c8\u4e0d\u60f3\u5c06\u5b83\u4eec\u5199\u5230\u4e00\u8d77\uff0c\u90a3\u5c31\u53ef\u4ee5\u4f7f\u7528@singledispatch \u88c5\u9970\u5668\u4e86 \u4e3e\u4e2a\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import functools @functools.singledispatch def typecheck ( text ): pass @typecheck.register ( str ) def _ ( text ): print ( type ( text )) print ( str-- ) @typecheck.register ( list ) def _ ( text ): print ( type ( text )) print ( list-- ) @typecheck.register ( int ) def _ ( text ): print ( type ( text )) print ( int-- ) if __name__ == __main__ : a = [ 1 , 2 , 3 , 4 ] typecheck ( a ) \u770b\u4e00\u4e0b\u7ed3\u679c\uff1a 1 2 class list list-- \u6362\u51e0\u4e2a\u503c\u8bd5\u4e00\u4e0b\uff1a 1 2 3 4 a = 1 class int int-- 1 2 3 4 a = aaaa class str str-- singledispatch\u673a\u5236\u4e00\u4e2a\u663e\u8457\u7279\u5f81\u662f\uff0c\u53ef\u4ee5\u5728\u7cfb\u7edf\u7684\u4efb\u4f55\u5730\u65b9\u548c\u4efb\u4f55\u6a21\u5757\u4e2d\u6ce8\u518c\u4e13\u95e8\u7684\u51fd\u6570\uff0c\u5982\u679c\u540e\u6765\u6a21\u5757\u4e2d\u589e\u52a0\u4e86\u65b0\u7684\u7c7b\u578b\uff0c\u53ef\u4ee5\u8f7b\u677e\u5730\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u4e13\u95e8\u51fd\u6570\u6765\u5904\u7406\u65b0\u7c7b\u578b\u3002\u5f88\u50cf\u8bbe\u8ba1\u6a21\u5f0f\u4e2d\u7684\u7b56\u7565\u6a21\u5f0f","title":"@functools.singledispatch"},{"location":"Python/python_functools/#functoolsupdate_wrapperwrapper-wrapped-assignedwrapper_assignments-updatedwrapper_updates","text":"\u8fd9\u4e2a\u51fd\u6570\u5c31\u662f\u7528\u6765\u66f4\u65b0\u4fee\u9970\u5668\u51fd\u6570\u7684\uff0c\u5177\u4f53\u66f4\u65b0\u4e9b\u4ec0\u4e48\u5462\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u628a\u5b83\u7684\u6e90\u7801\u642c\u8fc7\u6765\u770b\u4e00\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 WRAPPER_ASSIGNMENTS = ( __module__ , __name__ , __qualname__ , __doc__ , __annotations__ ) WRAPPER_UPDATES = ( __dict__ ,) def update_wrapper ( wrapper , wrapped , assigned = WRAPPER_ASSIGNMENTS , updated = WRAPPER_UPDATES ): for attr in assigned : try : value = getattr ( wrapped , attr ) except AttributeError : pass else : setattr ( wrapper , attr , value ) for attr in updated : getattr ( wrapper , attr ) . update ( getattr ( wrapped , attr , {})) wrapper . __wrapped__ = wrapped return wrapper \u5927\u5bb6\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u4e2a\u51fd\u6570\u7684\u4f5c\u7528\u5c31\u662f\u4ece \u88ab\u4fee\u9970\u7684\u51fd\u6570(wrapped) \u4e2d\u53d6\u51fa\u4e00\u4e9b\u5c5e\u6027\u503c\u6765\uff0c\u8d4b\u503c\u7ed9 \u4fee\u9970\u5668\u51fd\u6570(wrapper) \u3002\u4e3a\u4ec0\u4e48\u8981\u8fd9\u4e48\u505a\u5462\uff0c\u6211\u4eec\u770b\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u3002 \u9996\u5148\u6211\u4eec\u5199\u4e2a\u81ea\u5b9a\u4e49\u7684\u4fee\u9970\u5668\uff0c\u6ca1\u6709\u4efb\u4f55\u7684\u529f\u80fd\uff0c\u4ec5\u6709\u6587\u6863\u5b57\u7b26\u4e32\uff0c\u5982\u4e0b\u6240\u793a\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 def wrapper ( f ): def wrapper_function ( * args , ** kwargs ): \u8fd9\u4e2a\u662f\u4fee\u9970\u51fd\u6570 return f ( * args , ** kwargs ) return wrapper_function @wrapper def wrapped (): \u8fd9\u4e2a\u662f\u88ab\u4fee\u9970\u7684\u51fd\u6570 print ( wrapped ) print ( wrapped . __doc__ ) # \u8f93\u51fa`\u8fd9\u4e2a\u662f\u4fee\u9970\u51fd\u6570` print ( wrapped . __name__ ) # \u8f93\u51fa`wrapper_function` \u4ece\u4e0a\u9762\u7684\u4f8b\u5b50\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u6211\u60f3\u8981\u83b7\u53d6 wrapped \u8fd9\u4e2a\u88ab\u4fee\u9970\u51fd\u6570\u7684\u6587\u6863\u5b57\u7b26\u4e32\uff0c\u4f46\u662f\u5374\u83b7\u53d6\u6210\u4e86 wrapper_function \u7684\u6587\u6863\u5b57\u7b26\u4e32\uff0c wrapped \u51fd\u6570\u7684\u540d\u5b57\u4e5f\u53d8\u6210\u4e86 wrapper_function \u51fd\u6570\u7684\u540d\u5b57\u3002\u8fd9\u662f\u56e0\u4e3a\u7ed9 wrapped \u6dfb\u52a0\u4e0a @wrapper \u4fee\u9970\u5668\u76f8\u5f53\u4e8e\u6267\u884c\u4e86\u4e00\u53e5 wrapped = wrapper(wrapped) \uff0c\u6267\u884c\u5b8c\u8fd9\u6761\u8bed\u53e5\u4e4b\u540e\uff0c wrapped \u51fd\u6570\u5c31\u53d8\u6210\u4e86 wrapper_function \u51fd\u6570\u3002\u9047\u5230\u8fd9\u79cd\u60c5\u51b5\u8be5\u600e\u4e48\u529e\u5462\uff0c\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u624b\u52a8\u5730\u5728 wrapper \u51fd\u6570\u4e2d\u66f4\u6539 wrapper_function \u7684 __doc__ \u548c __name__ \u5c5e\u6027\uff0c\u4f46\u806a\u660e\u7684\u4f60\u80af\u5b9a\u4e5f\u60f3\u5230\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7528 update_wrapper \u51fd\u6570\u6765\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\u3002 \u6211\u4eec\u5bf9\u4e0a\u9762\u5b9a\u4e49\u7684\u4fee\u9970\u5668\u7a0d\u4f5c\u4fee\u6539\uff0c\u6dfb\u52a0\u4e86\u4e00\u53e5update_wrapper(wrapper_function, f)\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from functools import update_wrapper def wrapper ( f ): def wrapper_function ( * args , ** kwargs ): \u8fd9\u4e2a\u662f\u4fee\u9970\u51fd\u6570 return f ( * args , ** kwargs ) update_wrapper ( wrapper_function , f ) # \u6dfb\u52a0\u4e86\u8fd9\u6761\u8bed\u53e5 return wrapper_function @wrapper def wrapped (): \u8fd9\u4e2a\u662f\u88ab\u4fee\u9970\u7684\u51fd\u6570 print ( wrapped ) print ( wrapped . __doc__ ) # \u8f93\u51fa`\u8fd9\u4e2a\u662f\u88ab\u4fee\u9970\u7684\u51fd\u6570` print ( wrapped . __name__ ) # \u8f93\u51fa`wrapped` \u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c __doc__ \u548c __name__ \u5c5e\u6027\u5df2\u7ecf\u80fd\u591f\u6309\u6211\u4eec\u9884\u60f3\u7684\u90a3\u6837\u663e\u793a\u4e86\uff0c\u9664\u6b64\u4e4b\u5916\uff0c update_wrapper \u51fd\u6570\u4e5f\u5bf9 __module__ \u548c __dict__ \u7b49\u5c5e\u6027\u8fdb\u884c\u4e86\u66f4\u6539\u548c\u66f4\u65b0\u3002","title":"functools.update_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)"},{"location":"Python/python_functools/#functoolswrapswrapped-assignedwrapper_assignments-updatedwrapper_updates","text":"\u770b\u4e00\u4e0b\u6e90\u7801\uff1a 1 2 3 4 5 6 7 8 WRAPPER_ASSIGNMENTS = ( __module__ , __name__ , __qualname__ , __doc__ , __annotations__ ) WRAPPER_UPDATES = ( __dict__ ,) def wraps ( wrapped , assigned = WRAPPER_ASSIGNMENTS , updated = WRAPPER_UPDATES ): return partial ( update_wrapper , wrapped = wrapped , assigned = assigned , updated = updated ) \u6ca1\u9519\uff0c\u5c31\u662f\u8fd9\u4e48\u7684\u7b80\u5355\uff0c\u53ea\u6709\u8fd9\u4e48\u4e00\u53e5\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0cwraps\u51fd\u6570\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u4fee\u9970\u5668\u7248\u7684update_wrapper\u51fd\u6570\uff0c\u5b83\u7684\u529f\u80fd\u548cupdate_wrapper\u662f\u4e00\u6a21\u4e00\u6837\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u6211\u4eec\u4e0a\u9762\u7684\u81ea\u5b9a\u4e49\u4fee\u9970\u5668\u7684\u4f8b\u5b50\uff0c\u505a\u51fa\u4e00\u4e2a\u66f4\u65b9\u4fbf\u9605\u8bfb\u7684\u7248\u672c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from functools import wraps def wrapper ( f ): @wraps ( f ) def wrapper_function ( * args , ** kwargs ): \u8fd9\u4e2a\u662f\u4fee\u9970\u51fd\u6570 return f ( * args , ** kwargs ) return wrapper_function @wrapper def wrapped (): \u8fd9\u4e2a\u662f\u88ab\u4fee\u9970\u7684\u51fd\u6570 print ( wrapped ) print ( wrapped . __doc__ ) # \u8f93\u51fa`\u8fd9\u4e2a\u662f\u88ab\u4fee\u9970\u7684\u51fd\u6570` print ( wrapped . __name__ ) # \u8f93\u51fa`wrapped` wraps \u4fee\u9970\u5668\uff0c\u5176\u5b9e\u5c31\u662f\u5c06**\u88ab\u4fee\u9970\u7684\u51fd\u6570(wrapped) \u7684\u4e00\u4e9b\u5c5e\u6027\u503c\u8d4b\u503c\u7ed9**\u4fee\u9970\u5668\u51fd\u6570(wrapper) \uff0c\u6700\u7ec8\u8ba9\u5c5e\u6027\u7684\u663e\u793a\u66f4\u7b26\u5408\u6211\u4eec\u7684\u76f4\u89c9\u3002","title":"@functools.wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)"},{"location":"Python/python_itertools/","text":"Python\u7684\u5185\u5efa\u6a21\u5757itertools\u63d0\u4f9b\u4e86\u975e\u5e38\u6709\u7528\u7684\u7528\u4e8e\u64cd\u4f5c\u8fed\u4ee3\u5bf9\u8c61\u7684\u51fd\u6570\u3002 itertools.count(start=0, step=1) \u521b\u5efa\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u751f\u6210\u4ecen\u5f00\u59cb\u7684\u8fde\u7eed\u6574\u6570\uff0c\u5982\u679c\u5ffd\u7565n\uff0c\u5219\u4ece0\u5f00\u59cb\u8ba1\u7b97\uff08\u6ce8\u610f\uff1a\u6b64\u8fed\u4ee3\u5668\u4e0d\u652f\u6301\u957f\u6574\u6570) \u5982\u679c\u8d85\u51fa\u4e86sys.maxint\uff0c\u8ba1\u6570\u5668\u5c06\u6ea2\u51fa\u5e76\u7ee7\u7eed\u4ece-sys.maxint-1\u5f00\u59cb\u8ba1\u7b97\u3002 \u5f53\u4f7f\u7528\u6d6e\u70b9\u6570\u8fdb\u884c\u8ba1\u6570\u65f6\uff0c\u6709\u65f6\u53ef\u4ee5\u901a\u8fc7\u66ff\u6362\u4e58\u6cd5\u4ee3\u7801\u6765\u5b9e\u73b0\u66f4\u9ad8\u7684\u51c6\u786e\u7387\uff0c\u4f8b\u5982\uff1a (start + step * i for i in count()) \u8be5\u65b9\u6cd5\u7b49\u4ef7\u4e8e\uff1a 1 2 3 4 5 6 7 def count ( start = 0 , step = 1 ): # count(10) -- 10 11 12 13 14 ... # count(2.5, 0.5) - 2.5 3.0 3.5 ... n = start while True : yield n n += step itertools.cycle(iterable) \u521b\u9020\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u590d\u5236\u4ece\u5f53\u524d\u8fed\u4ee3\u5668\u8fd4\u56de\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u5e76\u5c06\u5176\u4fdd\u5b58\u5230\u521b\u5efa\u7684\u8fed\u4ee3\u5668\u4e2d\u3002\u5f53\u5f53\u524d\u8fed\u4ee3\u5668\u8017\u5c3d\u65f6\uff0c\u4ece\u521b\u9020\u7684\u8fed\u4ee3\u5668\u5faa\u73af\u8fd4\u56de\u5143\u7d20\u3002 \u7b80\u5355\u7406\u89e3\u5c31\u662f\uff0c\u4f20\u5165\u4e00\u4e2a\u5e8f\u5217\uff0c\u65e0\u9650\u5faa\u73af\u4e0b\u53bb \u5927\u81f4\u76f8\u5f53\u4e8e: 1 2 3 4 5 6 7 8 9 def cycle ( iterable ): # cycle( ABCD ) -- A B C D A B C D A B C D ... saved = [] for element in iterable : yield element saved . append ( element ) while saved : for element in saved : yield element itertools.repeat(object[, times]) \u8ba9\u8fed\u4ee3\u5668\u4e00\u6b21\u53c8\u4e00\u6b21\u5730\u8fd4\u56de\u5bf9\u8c61\u3002\u65e0\u9650\u8fd0\u884c\uff0c\u9664\u975e\u6307\u5b9a\u4e86 times \u53c2\u6570\u63a7\u5236\u91cd\u590d\u6b21\u6570 \u5927\u81f4\u76f8\u5f53\u4e8e\uff1a 1 2 3 4 5 6 7 8 def repeat ( object , times = None ): # repeat(10, 3) -- 10 10 10 if times is None : while True : yield object else : for i in range ( times ): yield object repeat\u7684\u4e00\u4e2a\u5e38\u89c1\u7528\u6cd5\u662f\u63d0\u4f9b\u4e00\u4e2a\u7528\u4e8emap\u6216zip\u7684\u5e38\u6570\u6d41: 1 2 list(map(pow, range(10), repeat(2))) [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] itertools.accumulate(iterable[, func]) \u521b\u5efa\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u5b83\u8fd4\u56de\u8ba1\u7b97\u7684\u7d2f\u79ef\u548c\uff0c\u6216\u5176\u4ed6\u4e8c\u8fdb\u5236\u51fd\u6570\u7684\u8ba1\u7b97\u7ed3\u679c\uff08\u8fd9\u4e2a\u4e8c\u8fdb\u5236\u51fd\u6570\u53ef\u4ee5\u901a\u8fc7func\u53c2\u6570\u6307\u5b9a\uff09\u3002\u5982\u679c\u6307\u5b9a\u4e86func\u53c2\u6570\uff0c\u5fc5\u987b\u4fdd\u8bc1\u8fd9\u4e2a\u53c2\u6570\u5bf9\u5e94\u7684\u51fd\u6570\u53ef\u4ee5\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\u3002 \u5927\u81f4\u76f8\u5f53\u4e8e\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 def accumulate ( iterable , func = operator . add ): Return running totals # accumulate([1,2,3,4,5]) -- 1 3 6 10 15 # accumulate([1,2,3,4,5], operator.mul) -- 1 2 6 24 120 it = iter ( iterable ) try : total = next ( it ) except StopIteration : return yield total for element in it : total = func ( total , element ) yield total \u5982\u679c\u5f88\u96be\u7406\u89e3\uff0c\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\uff1a 1 \u5bf9\u4e8e\u9ed8\u8ba4func\u6765\u8bf4\uff0c\u7ed3\u679c\u5c31\u662f[p0, p0+p1, p0+p1+p2, \u2026] itertools.chain(*iterables) \u521b\u5efa\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u8be5\u8fed\u4ee3\u5668\u4ece\u7b2c\u4e00\u4e2a\u8fed\u4ee3\u8fd4\u56de\u5143\u7d20\uff0c\u76f4\u5230\u5b83\u88ab\u8017\u5c3d\uff0c\u7136\u540e\u7ee7\u7eed\u5230\u4e0b\u4e00\u4e2a\u8fed\u4ee3\uff0c\u76f4\u5230\u6240\u6709\u7684\u8fed\u4ee3\u90fd\u88ab\u8017\u5c3d\u3002\u7528\u4e8e\u5c06\u8fde\u7eed\u5e8f\u5217\u89c6\u4e3a\u5355\u4e2a\u5e8f\u5217\u3002 \u5927\u81f4\u76f8\u5f53\u4e8e: 1 2 3 4 5 def chain ( * iterables ): # chain( ABC , DEF ) -- A B C D E F for it in iterables : for element in it : yield element classmethod chain.from_iterable(iterable) \u6539\u53d8 chain() \u7684\u7ed3\u6784\uff0c\u4ece\u4e00\u4e2a\u61d2\u52a0\u8f7d\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u83b7\u53d6\u8f93\u5165\u503c\u3002\u5927\u81f4\u76f8\u5f53\u4e8e\uff1a 1 2 3 4 5 def from_iterable ( iterables ): # chain.from_iterable([ ABC , DEF ]) -- A B C D E F for it in iterables : for element in it : yield element itertools.compress(data, selectors) \u8fc7\u6ee4\u8fed\u4ee3\u5668\u4e2d\u7684\u5143\u7d20\uff0c\u53ea\u8fd4\u56de\u5728selectors\u4e2d\u8ba1\u7b97\u4e3a True \u7684\u5bf9\u5e94\u5143\u7d20\u3002\u5f53\u8fed\u4ee3\u5668\u6216\u9009\u62e9\u5668\u7ed3\u675f\u540e\uff0c\u5c31\u505c\u6b62\u3002 \u5927\u81f4\u76f8\u5f53\u4e8e\uff1a 1 2 3 def compress ( data , selectors ): # compress( ABCDEF , [1,0,1,0,1,1]) -- A C E F return ( d for d , s in zip ( data , selectors ) if s ) itertools.dropwhile(predicate, iterable) \u53bb\u9664predicate\u4e3atrue\u7684\u5143\u7d20\uff0c\u5f53\u7b2c\u4e00\u6b21\u9047\u5230predicate\u4e3afalse\u7684\u60c5\u51b5\u65f6\uff0c\u76f4\u63a5\u5c06\u5176\u4e0e\u540e\u9762\u7684\u5168\u90fd\u4e00\u8d77\u8fd4\u56de \u5927\u81f4\u76f8\u5f53\u4e8e\uff1a 1 2 3 4 5 6 7 8 9 def dropwhile ( predicate , iterable ): # dropwhile(lambda x: x 5, [1,4,6,4,1]) -- 6 4 1 iterable = iter ( iterable ) for x in iterable : if not predicate ( x ): yield x break for x in iterable : yield x itertools.filterfalse(predicate, iterable) \u4ece\u8fed\u4ee3\u5668\u4e2d\u8fc7\u6ee4\u51fa\u6240\u6709\u4f7fpredicate\u4e3a False \u7684\u5143\u7d20\uff0c\u5e76\u8fd4\u56de \u5927\u81f4\u76f8\u5f53\u4e8e\uff1a 1 2 3 4 5 6 7 def filterfalse ( predicate , iterable ): # filterfalse(lambda x: x%2, range(10)) -- 0 2 4 6 8 if predicate is None : predicate = bool for x in iterable : if not predicate ( x ): yield x itertools.groupby(iterable, key=None) \u521b\u5efa\u4e00\u4e2a\u4ece\u8fed\u4ee3\u4e2d\u8fd4\u56de\u8fde\u7eed\u952e\u548c\u7ec4\u7684\u8fed\u4ee3\u5668\u3002 \u5173\u952e\u662f\u8ba1\u7b97\u6bcf\u4e2a\u5143\u7d20\u7684\u952e\u503c\u7684\u51fd\u6570\u3002 \u5982\u679c\u672a\u6307\u5b9a\u6216\u4e3aNone\uff0c\u5219\u952e\u9ed8\u8ba4\u4e3a\u6807\u8bc6\u51fd\u6570\u5e76\u8fd4\u56de\u5143\u7d20\u4e0d\u53d8\u3002 \u901a\u5e38\uff0c\u8fed\u4ee3\u9700\u8981\u5728\u76f8\u540c\u7684\u952e\u51fd\u6570\u4e0a\u6392\u5e8f\u3002 groupby\uff08\uff09\u7684\u64cd\u4f5c\u7c7b\u4f3c\u4e8eUnix\u4e2d\u7684uniq\u8fc7\u6ee4\u5668\u3002 \u6bcf\u6b21\u952e\u51fd\u6570\u7684\u503c\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u5b83\u90fd\u4f1a\u751f\u6210\u4e00\u4e2a\u4e2d\u65ad\u6216\u65b0\u7ec4\uff08\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u901a\u5e38\u9700\u8981\u4f7f\u7528\u76f8\u540c\u7684\u952e\u51fd\u6570\u5bf9\u6570\u636e\u8fdb\u884c\u6392\u5e8f\uff09\u3002 \u8fd9\u79cd\u884c\u4e3a\u4e0d\u540c\u4e8eSQL\u7684GROUP BY\uff0c\u5b83\u805a\u5408\u4e86\u5e38\u89c1\u5143\u7d20\u800c\u4e0d\u7ba1\u5b83\u4eec\u7684\u8f93\u5165\u987a\u5e8f\u5982\u4f55\u3002 \u8fd4\u56de\u7684\u7ec4\u672c\u8eab\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u5b83\u4e0egroupby\uff08\uff09\u5171\u4eab\u5e95\u5c42\u7684iterable\u3002 \u7531\u4e8e\u6e90\u662f\u5171\u4eab\u7684\uff0c\u56e0\u6b64\u5f53groupby\uff08\uff09\u5bf9\u8c61\u88ab\u8fed\u4ee3\u65f6\uff0c\u524d\u4e00\u4e2a\u7ec4\u88ab\u8fed\u4ee3\u7684\u5c06\u4e0d\u518d\u53ef\u89c1\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u4ee5\u540e\u9700\u8981\u8be5\u6570\u636e\uff0c\u5219\u5e94\u5c06\u5176\u5b58\u50a8\u4e3a\u5217\u8868\uff1a 1 2 3 4 5 6 groups = [] uniquekeys = [] data = sorted ( data , key = keyfunc ) for k , g in groupby ( data , keyfunc ): groups . append ( list ( g )) # Store group iterator as a list uniquekeys . append ( k ) groupby() \u76f8\u5f53\u4e8e\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class groupby : # [k for k, g in groupby( AAAABBBCCDAABBB )] -- A B C D A B # [list(g) for k, g in groupby( AAAABBBCCD )] -- AAAA BBB CC D def __init__ ( self , iterable , key = None ): if key is None : key = lambda x : x self . keyfunc = key self . it = iter ( iterable ) self . tgtkey = self . currkey = self . currvalue = object () def __iter__ ( self ): return self def __next__ ( self ): self . id = object () while self . currkey == self . tgtkey : self . currvalue = next ( self . it ) # Exit on StopIteration self . currkey = self . keyfunc ( self . currvalue ) self . tgtkey = self . currkey return ( self . currkey , self . _grouper ( self . tgtkey , self . id )) def _grouper ( self , tgtkey , id ): while self . id is id and self . currkey == tgtkey : yield self . currvalue try : self . currvalue = next ( self . it ) except StopIteration : return self . currkey = self . keyfunc ( self . currvalue ) \u4e3e\u4e2a\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from itertools import groupby qs = [{ date : 1 },{ date : 2 }] [( name , list ( group )) for name , group in itertools . groupby ( qs , lambda p : p [ date ])] Out [ 77 ]: [( 1 , [{ date : 1 }]), ( 2 , [{ date : 2 }])] from itertools import * a = [ aa , ab , abc , bcd , abcde ] for i , k in groupby ( a , len ): ... print i , list ( k ) ... 2 [ aa , ab ] 3 [ abc , bcd ] 5 [ abcde ] itertools.islice(iterable, start, stop[, step])**\u548c**itertools.islice(iterable, stop) \u521b\u5efa\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u8be5\u8fed\u4ee3\u5668\u4eceiterable\u8fd4\u56de\u9009\u4e2d\u7684\u5143\u7d20\u3002\u5982\u679cstart\u662f\u975e\u96f6\u7684\uff0c\u5219\u8df3\u8fc7\u53ef\u8fed\u4ee3\u7684\u5143\u7d20\uff0c\u76f4\u5230\u5230\u8fbestart\u4e3a\u6b62\u3002\u4e4b\u540e\uff0c\u5143\u7d20\u4f1a\u8fde\u7eed\u8fd4\u56de\uff0c\u9664\u975estep\u8bbe\u7f6e\u5f97\u6bd4step\u9ad8\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u8df3\u8fc7\u9879\u3002\u5982\u679cstop\u4e3aNone\uff0c\u5219\u7ee7\u7eed\u8fed\u4ee3\uff0c\u76f4\u5230\u8fed\u4ee3\u5668\u8017\u5c3d\u4e3a\u6b62;\u5426\u5219\uff0c\u5b83\u5c06\u5728\u6307\u5b9a\u4f4d\u7f6e\u505c\u6b62\u3002\u4e0e\u5e38\u89c4\u5207\u7247\u4e0d\u540c\uff0cislice\uff08\uff09\u4e0d\u652f\u6301start\uff0cstop\u6216step\u7684\u8d1f\u503c\u3002\u53ef\u4ee5\u7528\u4e8e\u4ece\u5185\u90e8\u7ed3\u6784\u5df2\u88ab\u6241\u5e73\u5316\u7684\u6570\u636e\u4e2d\u63d0\u53d6\u76f8\u5173\u5b57\u6bb5(\u4f8b\u5982\uff0c\u591a\u884c\u62a5\u544a\u53ef\u80fd\u6bcf\u9694\u4e00\u884c\u5217\u51fa\u4e00\u4e2aname\u5b57\u6bb5)\u3002 \u5927\u81f4\u76f8\u5f53\u4e8e: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 def islice ( iterable , * args ): # islice( ABCDEFG , 2) -- A B # islice( ABCDEFG , 2, 4) -- C D # islice( ABCDEFG , 2, None) -- C D E F G # islice( ABCDEFG , 0, None, 2) -- A C E G s = slice ( * args ) start , stop , step = s . start or 0 , s . stop or sys . maxsize , s . step or 1 it = iter ( range ( start , stop , step )) try : nexti = next ( it ) except StopIteration : # Consume *iterable* up to the *start* position. for i , element in zip ( range ( start ), iterable ): pass return try : for i , element in enumerate ( iterable ): if i == nexti : yield element nexti = next ( it ) except StopIteration : # Consume to *stop*. for i , element in zip ( range ( i + 1 , stop ), iterable ): pass \u5982\u679cstart\u4e3aNone\uff0c\u90a3\u4e48\u8fed\u4ee3\u4ece0\u5f00\u59cb\u3002\u5982\u679cstep\u662fNone\uff0c\u90a3\u4e48step\u9ed8\u8ba4\u4e3a1\u3002 itertools.starmap(function, iterable) \u5c06 iterable \u4e2d\u7684\u6bcf\u4e00\u9879\uff0c\u6620\u5c04\u5230 function \u4e2d\uff0c\u5e76\u6267\u884c function \u5927\u81f4\u76f8\u5f53\u4e8e\uff1a 1 2 3 4 def starmap ( function , iterable ): # starmap(pow, [(2,5), (3,2), (10,3)]) -- 32 9 1000 for args in iterable : yield function ( * args ) itertools.takewhile(predicate, iterable) \u53ea\u8981\u4f7f predicate \u4e3atrue\uff0c\u5c31\u8fd4\u56de\u3002\u5f53\u9047\u5230\u7b2c\u4e00\u4e2a\u4e3a False \u7684\u503c\u5c31\u505c\u6b62\u3002\u4e0e dropwhile \u76f8\u53cd \u5927\u81f4\u76f8\u5f53\u4e8e\uff1a 1 2 3 4 5 6 7 def takewhile ( predicate , iterable ): # takewhile(lambda x: x 5, [1,4,6,4,1]) -- 1 4 for x in iterable : if predicate ( x ): yield x else : break itertools.tee(iterable, n=2) \u4ece\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u8fd4\u56den\u4e2a\u72ec\u7acb\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\u3002 \u4e0b\u9762\u7684\u4ee3\u7801\u4f1a\u89e3\u91ca tee \u505a\u4e86\u4ec0\u4e48\uff08\u867d\u7136\u5b9e\u9645\u7684\u89e3\u91ca\u4f1a\u66f4\u590d\u6742\u4e00\u4e9b\uff0c\u5e76\u4e14\u53ea\u662f\u7528\u4e86\u4e00\u4e2a\u5355\u72ec\u7684FIFO\u5148\u8fdb\u5148\u51fa\u961f\u5217\uff09\u3002 \u5927\u81f4\u76f8\u5f53\u4e8e\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def tee ( iterable , n = 2 ): it = iter ( iterable ) deques = [ collections . deque () for i in range ( n )] def gen ( mydeque ): while True : if not mydeque : # when the local deque is empty try : newval = next ( it ) # fetch a new value and except StopIteration : return for d in deques : # load it to all the deques d . append ( newval ) yield mydeque . popleft () return tuple ( gen ( d ) for d in deques ) \u5b9e\u9645\u8fd9\u6837\u7528\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from itertools import tee print ( tee ([ 1 , 2 , 3 ], 3 )) # == ( itertools._tee object at 0x10cf787c8 , itertools._tee object at 0x10cf78808 , itertools._tee object at 0x10cf78848 ) for a in tee ([ 1 , 2 , 3 ], 3 ): for i in a : print ( i , end = ) print () # 1 2 3 # 1 2 3 # 1 2 3 for a , b , c in tee ([ 1 , 2 , 3 ], 3 ): print ( a , b , c ) # 1 2 3 # 1 2 3 # 1 2 3 \u4e00\u65e6tee\uff08\uff09\u8fdb\u884c\u4e86\u62c6\u5206\uff0c\u539f\u59cb\u7684iteable\u4e0d\u5e94\u8be5\u5728\u5176\u4ed6\u4efb\u4f55\u5730\u65b9\u4f7f\u7528; \u5426\u5219\uff0c\u8fed\u4ee3\u53ef\u4ee5\u5728\u6ca1\u6709\u901a\u77e5tee\u5bf9\u8c61\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u3002 \u8fd9\u4e2aitertool\u53ef\u80fd\u9700\u8981\u5927\u91cf\u7684\u8f85\u52a9\u5b58\u50a8\uff08\u53d6\u51b3\u4e8e\u9700\u8981\u5b58\u50a8\u591a\u5c11\u4e34\u65f6\u6570\u636e\uff09\u3002 \u901a\u5e38\uff0c\u5982\u679c\u4e00\u4e2a\u8fed\u4ee3\u5668\u5728\u53e6\u4e00\u4e2a\u8fed\u4ee3\u5668\u542f\u52a8\u4e4b\u524d\u4f7f\u7528\u5927\u90e8\u5206\u6216\u5168\u90e8\u6570\u636e\uff0c\u5219\u4f7f\u7528list\uff08\uff09\u800c\u4e0d\u662ftee\uff08\uff09\u4f1a\u66f4\u5feb\u3002 itertools.zip_longest(*iterables, fillvalue=None) \u805a\u5408\u6bcf\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u5143\u7d20\u3002\u5982\u679c\u8fed\u4ee3\u7684\u957f\u5ea6\u4e0d\u5747\u5300\uff0c\u5219\u4f7f\u7528 fillvalue \u586b\u5145\u7f3a\u5931\u503c\u3002 \u8fed\u4ee3\u7ee7\u7eed\uff0c\u76f4\u5230\u6700\u957f\u7684\u53ef\u8fed\u4ee3\u7528\u5c3d\u3002 \u5927\u81f4\u76f8\u5f53\u4e8e\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def zip_longest ( * args , fillvalue = None ): # zip_longest( ABCD , xy , fillvalue= - ) -- Ax By C- D- iterators = [ iter ( it ) for it in args ] num_active = len ( iterators ) if not num_active : return while True : values = [] for i , it in enumerate ( iterators ): try : value = next ( it ) except StopIteration : num_active -= 1 if not num_active : return iterators [ i ] = repeat ( fillvalue ) value = fillvalue values . append ( value ) yield tuple ( values ) \u5982\u679c\u5176\u4e2d\u4e00\u4e2aiterables\u53ef\u80fd\u662f\u65e0\u9650\u7684\uff0c\u90a3\u4e48 zip_longest() \u51fd\u6570\u5e94\u8be5\u5305\u542b\u4e00\u4e9b\u9650\u5236\u8c03\u7528\u6b21\u6570\u7684\u4e1c\u897f\uff08\u4f8b\u5982 islice() \u6216 takewhile() \uff09\u3002 \u5982\u679c\u672a\u6307\u5b9a\uff0c\u5219fillvalue\u9ed8\u8ba4\u4e3aNone\u3002 itertools.product(*iterables, repeat=1) \u5bf9\u653e\u5165\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\u8fdb\u884c\u7b1b\u5361\u5c14\u79ef\u8fd0\u7b97\u3002 \u5927\u81f4\u76f8\u5f53\u4e8e\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u4e2d\u7684\u5d4c\u5957for\u5faa\u73af\u3002\u4f8b\u5982\uff0c product(A, B) \u7684\u8fd4\u56de\u548c ((x,y) for x in A for y in B) \u4e00\u6837 \u8981\u8ba1\u7b97iterable\u4e0e\u5176\u81ea\u8eab\u7684\u4e58\u79ef\uff0c\u8bf7\u4f7f\u7528\u53ef\u9009\u7684repeat\u5173\u952e\u5b57\u53c2\u6570\u6307\u5b9a\u91cd\u590d\u6b21\u6570\u3002 \u4f8b\u5982\uff0c product(A, repeat=4) \u76f8\u5f53\u4e8e product(A, A, A, A) \u6b64\u51fd\u6570\u5927\u81f4\u7b49\u540c\u4e8e\u4ee5\u4e0b\u4ee3\u7801\uff0c\u4f46\u5b9e\u9645\u5b9e\u73b0\u4e0d\u4f1a\u5728\u5185\u5b58\u4e2d\u6784\u5efa\u4e2d\u95f4\u7ed3\u679c\uff1a 1 2 3 4 5 6 7 8 9 def product ( * args , repeat = 1 ): # product( ABCD , xy ) -- Ax Ay Bx By Cx Cy Dx Dy # product(range(2), repeat=3) -- 000 001 010 011 100 101 110 111 pools = [ tuple ( pool ) for pool in args ] * repeat result = [[]] for pool in pools : result = [ x + [ y ] for x in result for y in pool ] for prod in result : yield tuple ( prod ) itertools.permutations(iterable, r=None) \u5bf9\u53ef\u8fed\u4ee3\u5bf9\u8c61\u8fdb\u884c\u7ec4\u5408\u6392\u5217\uff0c\u7ec4\u5408\u957f\u5ea6\u4e3a r \u5927\u81f4\u76f8\u5f53\u4e8e\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 def permutations ( iterable , r = None ): # permutations( ABCD , 2) -- AB AC AD BA BC BD CA CB CD DA DB DC # permutations(range(3)) -- 012 021 102 120 201 210 pool = tuple ( iterable ) n = len ( pool ) r = n if r is None else r if r n : return indices = list ( range ( n )) cycles = list ( range ( n , n - r , - 1 )) yield tuple ( pool [ i ] for i in indices [: r ]) while n : for i in reversed ( range ( r )): cycles [ i ] -= 1 if cycles [ i ] == 0 : indices [ i :] = indices [ i + 1 :] + indices [ i : i + 1 ] cycles [ i ] = n - i else : j = cycles [ i ] indices [ i ], indices [ - j ] = indices [ - j ], indices [ i ] yield tuple ( pool [ i ] for i in indices [: r ]) break else : return itertools.combinations(iterable, r) \u548c permutations \u7c7b\u4f3c\u3002\u4f46\u662f\u4e0d\u540c\u7684\u662f\uff0c\u4e0d\u4f1a\u6709\u5ffd\u7565\u5143\u7d20\u987a\u5e8f\u7684\u76f8\u540c\u7684\u7ec4\u5408 \u5176\u76f8\u5f53\u4e8e\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def combinations ( iterable , r ): # combinations( ABCD , 2) -- AB AC AD BC BD CD # combinations(range(4), 3) -- 012 013 023 123 pool = tuple ( iterable ) n = len ( pool ) if r n : return indices = list ( range ( r )) yield tuple ( pool [ i ] for i in indices ) while True : for i in reversed ( range ( r )): if indices [ i ] != i + n - r : break else : return indices [ i ] += 1 for j in range ( i + 1 , r ): indices [ j ] = indices [ j - 1 ] + 1 yield tuple ( pool [ i ] for i in indices ) itertools.combinations_with_replacement(iterable, r) \u548c combinations \u76f8\u4f3c\u3002\u4f46\u4e0d\u540c\u7684\u662f\uff0c\u6b64\u65b9\u6cd5\u8fd4\u56de\u7684\u7ec4\u5408\u4e2d\uff0c\u4f1a\u6709\u76f8\u540c\u5143\u7d20 \u5176\u5927\u81f4\u76f8\u5f53\u4e8e\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 def combinations_with_replacement ( iterable , r ): # combinations_with_replacement( ABC , 2) -- AA AB AC BB BC CC pool = tuple ( iterable ) n = len ( pool ) if not n and r : return indices = [ 0 ] * r yield tuple ( pool [ i ] for i in indices ) while True : for i in reversed ( range ( r )): if indices [ i ] != n - 1 : break else : return indices [ i :] = [ indices [ i ] + 1 ] * ( r - i ) yield tuple ( pool [ i ] for i in indices )","title":"itertools"},{"location":"Python/python_itertools/#itertoolscountstart0-step1","text":"\u521b\u5efa\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u751f\u6210\u4ecen\u5f00\u59cb\u7684\u8fde\u7eed\u6574\u6570\uff0c\u5982\u679c\u5ffd\u7565n\uff0c\u5219\u4ece0\u5f00\u59cb\u8ba1\u7b97\uff08\u6ce8\u610f\uff1a\u6b64\u8fed\u4ee3\u5668\u4e0d\u652f\u6301\u957f\u6574\u6570) \u5982\u679c\u8d85\u51fa\u4e86sys.maxint\uff0c\u8ba1\u6570\u5668\u5c06\u6ea2\u51fa\u5e76\u7ee7\u7eed\u4ece-sys.maxint-1\u5f00\u59cb\u8ba1\u7b97\u3002 \u5f53\u4f7f\u7528\u6d6e\u70b9\u6570\u8fdb\u884c\u8ba1\u6570\u65f6\uff0c\u6709\u65f6\u53ef\u4ee5\u901a\u8fc7\u66ff\u6362\u4e58\u6cd5\u4ee3\u7801\u6765\u5b9e\u73b0\u66f4\u9ad8\u7684\u51c6\u786e\u7387\uff0c\u4f8b\u5982\uff1a (start + step * i for i in count()) \u8be5\u65b9\u6cd5\u7b49\u4ef7\u4e8e\uff1a 1 2 3 4 5 6 7 def count ( start = 0 , step = 1 ): # count(10) -- 10 11 12 13 14 ... # count(2.5, 0.5) - 2.5 3.0 3.5 ... n = start while True : yield n n += step","title":"itertools.count(start=0, step=1)"},{"location":"Python/python_itertools/#itertoolscycleiterable","text":"\u521b\u9020\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u590d\u5236\u4ece\u5f53\u524d\u8fed\u4ee3\u5668\u8fd4\u56de\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u5e76\u5c06\u5176\u4fdd\u5b58\u5230\u521b\u5efa\u7684\u8fed\u4ee3\u5668\u4e2d\u3002\u5f53\u5f53\u524d\u8fed\u4ee3\u5668\u8017\u5c3d\u65f6\uff0c\u4ece\u521b\u9020\u7684\u8fed\u4ee3\u5668\u5faa\u73af\u8fd4\u56de\u5143\u7d20\u3002 \u7b80\u5355\u7406\u89e3\u5c31\u662f\uff0c\u4f20\u5165\u4e00\u4e2a\u5e8f\u5217\uff0c\u65e0\u9650\u5faa\u73af\u4e0b\u53bb \u5927\u81f4\u76f8\u5f53\u4e8e: 1 2 3 4 5 6 7 8 9 def cycle ( iterable ): # cycle( ABCD ) -- A B C D A B C D A B C D ... saved = [] for element in iterable : yield element saved . append ( element ) while saved : for element in saved : yield element","title":"itertools.cycle(iterable)"},{"location":"Python/python_itertools/#itertoolsrepeatobject-times","text":"\u8ba9\u8fed\u4ee3\u5668\u4e00\u6b21\u53c8\u4e00\u6b21\u5730\u8fd4\u56de\u5bf9\u8c61\u3002\u65e0\u9650\u8fd0\u884c\uff0c\u9664\u975e\u6307\u5b9a\u4e86 times \u53c2\u6570\u63a7\u5236\u91cd\u590d\u6b21\u6570 \u5927\u81f4\u76f8\u5f53\u4e8e\uff1a 1 2 3 4 5 6 7 8 def repeat ( object , times = None ): # repeat(10, 3) -- 10 10 10 if times is None : while True : yield object else : for i in range ( times ): yield object repeat\u7684\u4e00\u4e2a\u5e38\u89c1\u7528\u6cd5\u662f\u63d0\u4f9b\u4e00\u4e2a\u7528\u4e8emap\u6216zip\u7684\u5e38\u6570\u6d41: 1 2 list(map(pow, range(10), repeat(2))) [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]","title":"itertools.repeat(object[, times])"},{"location":"Python/python_itertools/#itertoolsaccumulateiterable-func","text":"\u521b\u5efa\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u5b83\u8fd4\u56de\u8ba1\u7b97\u7684\u7d2f\u79ef\u548c\uff0c\u6216\u5176\u4ed6\u4e8c\u8fdb\u5236\u51fd\u6570\u7684\u8ba1\u7b97\u7ed3\u679c\uff08\u8fd9\u4e2a\u4e8c\u8fdb\u5236\u51fd\u6570\u53ef\u4ee5\u901a\u8fc7func\u53c2\u6570\u6307\u5b9a\uff09\u3002\u5982\u679c\u6307\u5b9a\u4e86func\u53c2\u6570\uff0c\u5fc5\u987b\u4fdd\u8bc1\u8fd9\u4e2a\u53c2\u6570\u5bf9\u5e94\u7684\u51fd\u6570\u53ef\u4ee5\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\u3002 \u5927\u81f4\u76f8\u5f53\u4e8e\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 def accumulate ( iterable , func = operator . add ): Return running totals # accumulate([1,2,3,4,5]) -- 1 3 6 10 15 # accumulate([1,2,3,4,5], operator.mul) -- 1 2 6 24 120 it = iter ( iterable ) try : total = next ( it ) except StopIteration : return yield total for element in it : total = func ( total , element ) yield total \u5982\u679c\u5f88\u96be\u7406\u89e3\uff0c\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\uff1a 1 \u5bf9\u4e8e\u9ed8\u8ba4func\u6765\u8bf4\uff0c\u7ed3\u679c\u5c31\u662f[p0, p0+p1, p0+p1+p2, \u2026]","title":"itertools.accumulate(iterable[, func])"},{"location":"Python/python_itertools/#itertoolschain42iterables","text":"\u521b\u5efa\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u8be5\u8fed\u4ee3\u5668\u4ece\u7b2c\u4e00\u4e2a\u8fed\u4ee3\u8fd4\u56de\u5143\u7d20\uff0c\u76f4\u5230\u5b83\u88ab\u8017\u5c3d\uff0c\u7136\u540e\u7ee7\u7eed\u5230\u4e0b\u4e00\u4e2a\u8fed\u4ee3\uff0c\u76f4\u5230\u6240\u6709\u7684\u8fed\u4ee3\u90fd\u88ab\u8017\u5c3d\u3002\u7528\u4e8e\u5c06\u8fde\u7eed\u5e8f\u5217\u89c6\u4e3a\u5355\u4e2a\u5e8f\u5217\u3002 \u5927\u81f4\u76f8\u5f53\u4e8e: 1 2 3 4 5 def chain ( * iterables ): # chain( ABC , DEF ) -- A B C D E F for it in iterables : for element in it : yield element","title":"itertools.chain(*iterables)"},{"location":"Python/python_itertools/#classmethod-chainfrom_iterableiterable","text":"\u6539\u53d8 chain() \u7684\u7ed3\u6784\uff0c\u4ece\u4e00\u4e2a\u61d2\u52a0\u8f7d\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u83b7\u53d6\u8f93\u5165\u503c\u3002\u5927\u81f4\u76f8\u5f53\u4e8e\uff1a 1 2 3 4 5 def from_iterable ( iterables ): # chain.from_iterable([ ABC , DEF ]) -- A B C D E F for it in iterables : for element in it : yield element","title":"classmethod chain.from_iterable(iterable)"},{"location":"Python/python_itertools/#itertoolscompressdata-selectors","text":"\u8fc7\u6ee4\u8fed\u4ee3\u5668\u4e2d\u7684\u5143\u7d20\uff0c\u53ea\u8fd4\u56de\u5728selectors\u4e2d\u8ba1\u7b97\u4e3a True \u7684\u5bf9\u5e94\u5143\u7d20\u3002\u5f53\u8fed\u4ee3\u5668\u6216\u9009\u62e9\u5668\u7ed3\u675f\u540e\uff0c\u5c31\u505c\u6b62\u3002 \u5927\u81f4\u76f8\u5f53\u4e8e\uff1a 1 2 3 def compress ( data , selectors ): # compress( ABCDEF , [1,0,1,0,1,1]) -- A C E F return ( d for d , s in zip ( data , selectors ) if s )","title":"itertools.compress(data, selectors)"},{"location":"Python/python_itertools/#itertoolsdropwhilepredicate-iterable","text":"\u53bb\u9664predicate\u4e3atrue\u7684\u5143\u7d20\uff0c\u5f53\u7b2c\u4e00\u6b21\u9047\u5230predicate\u4e3afalse\u7684\u60c5\u51b5\u65f6\uff0c\u76f4\u63a5\u5c06\u5176\u4e0e\u540e\u9762\u7684\u5168\u90fd\u4e00\u8d77\u8fd4\u56de \u5927\u81f4\u76f8\u5f53\u4e8e\uff1a 1 2 3 4 5 6 7 8 9 def dropwhile ( predicate , iterable ): # dropwhile(lambda x: x 5, [1,4,6,4,1]) -- 6 4 1 iterable = iter ( iterable ) for x in iterable : if not predicate ( x ): yield x break for x in iterable : yield x","title":"itertools.dropwhile(predicate, iterable)"},{"location":"Python/python_itertools/#itertoolsfilterfalsepredicate-iterable","text":"\u4ece\u8fed\u4ee3\u5668\u4e2d\u8fc7\u6ee4\u51fa\u6240\u6709\u4f7fpredicate\u4e3a False \u7684\u5143\u7d20\uff0c\u5e76\u8fd4\u56de \u5927\u81f4\u76f8\u5f53\u4e8e\uff1a 1 2 3 4 5 6 7 def filterfalse ( predicate , iterable ): # filterfalse(lambda x: x%2, range(10)) -- 0 2 4 6 8 if predicate is None : predicate = bool for x in iterable : if not predicate ( x ): yield x","title":"itertools.filterfalse(predicate, iterable)"},{"location":"Python/python_itertools/#itertoolsgroupbyiterable-keynone","text":"\u521b\u5efa\u4e00\u4e2a\u4ece\u8fed\u4ee3\u4e2d\u8fd4\u56de\u8fde\u7eed\u952e\u548c\u7ec4\u7684\u8fed\u4ee3\u5668\u3002 \u5173\u952e\u662f\u8ba1\u7b97\u6bcf\u4e2a\u5143\u7d20\u7684\u952e\u503c\u7684\u51fd\u6570\u3002 \u5982\u679c\u672a\u6307\u5b9a\u6216\u4e3aNone\uff0c\u5219\u952e\u9ed8\u8ba4\u4e3a\u6807\u8bc6\u51fd\u6570\u5e76\u8fd4\u56de\u5143\u7d20\u4e0d\u53d8\u3002 \u901a\u5e38\uff0c\u8fed\u4ee3\u9700\u8981\u5728\u76f8\u540c\u7684\u952e\u51fd\u6570\u4e0a\u6392\u5e8f\u3002 groupby\uff08\uff09\u7684\u64cd\u4f5c\u7c7b\u4f3c\u4e8eUnix\u4e2d\u7684uniq\u8fc7\u6ee4\u5668\u3002 \u6bcf\u6b21\u952e\u51fd\u6570\u7684\u503c\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u5b83\u90fd\u4f1a\u751f\u6210\u4e00\u4e2a\u4e2d\u65ad\u6216\u65b0\u7ec4\uff08\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u901a\u5e38\u9700\u8981\u4f7f\u7528\u76f8\u540c\u7684\u952e\u51fd\u6570\u5bf9\u6570\u636e\u8fdb\u884c\u6392\u5e8f\uff09\u3002 \u8fd9\u79cd\u884c\u4e3a\u4e0d\u540c\u4e8eSQL\u7684GROUP BY\uff0c\u5b83\u805a\u5408\u4e86\u5e38\u89c1\u5143\u7d20\u800c\u4e0d\u7ba1\u5b83\u4eec\u7684\u8f93\u5165\u987a\u5e8f\u5982\u4f55\u3002 \u8fd4\u56de\u7684\u7ec4\u672c\u8eab\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u5b83\u4e0egroupby\uff08\uff09\u5171\u4eab\u5e95\u5c42\u7684iterable\u3002 \u7531\u4e8e\u6e90\u662f\u5171\u4eab\u7684\uff0c\u56e0\u6b64\u5f53groupby\uff08\uff09\u5bf9\u8c61\u88ab\u8fed\u4ee3\u65f6\uff0c\u524d\u4e00\u4e2a\u7ec4\u88ab\u8fed\u4ee3\u7684\u5c06\u4e0d\u518d\u53ef\u89c1\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u4ee5\u540e\u9700\u8981\u8be5\u6570\u636e\uff0c\u5219\u5e94\u5c06\u5176\u5b58\u50a8\u4e3a\u5217\u8868\uff1a 1 2 3 4 5 6 groups = [] uniquekeys = [] data = sorted ( data , key = keyfunc ) for k , g in groupby ( data , keyfunc ): groups . append ( list ( g )) # Store group iterator as a list uniquekeys . append ( k ) groupby() \u76f8\u5f53\u4e8e\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class groupby : # [k for k, g in groupby( AAAABBBCCDAABBB )] -- A B C D A B # [list(g) for k, g in groupby( AAAABBBCCD )] -- AAAA BBB CC D def __init__ ( self , iterable , key = None ): if key is None : key = lambda x : x self . keyfunc = key self . it = iter ( iterable ) self . tgtkey = self . currkey = self . currvalue = object () def __iter__ ( self ): return self def __next__ ( self ): self . id = object () while self . currkey == self . tgtkey : self . currvalue = next ( self . it ) # Exit on StopIteration self . currkey = self . keyfunc ( self . currvalue ) self . tgtkey = self . currkey return ( self . currkey , self . _grouper ( self . tgtkey , self . id )) def _grouper ( self , tgtkey , id ): while self . id is id and self . currkey == tgtkey : yield self . currvalue try : self . currvalue = next ( self . it ) except StopIteration : return self . currkey = self . keyfunc ( self . currvalue ) \u4e3e\u4e2a\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from itertools import groupby qs = [{ date : 1 },{ date : 2 }] [( name , list ( group )) for name , group in itertools . groupby ( qs , lambda p : p [ date ])] Out [ 77 ]: [( 1 , [{ date : 1 }]), ( 2 , [{ date : 2 }])] from itertools import * a = [ aa , ab , abc , bcd , abcde ] for i , k in groupby ( a , len ): ... print i , list ( k ) ... 2 [ aa , ab ] 3 [ abc , bcd ] 5 [ abcde ]","title":"itertools.groupby(iterable, key=None)"},{"location":"Python/python_itertools/#itertoolsisliceiterable-start-stop-stepitertoolsisliceiterable-stop","text":"\u521b\u5efa\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u8be5\u8fed\u4ee3\u5668\u4eceiterable\u8fd4\u56de\u9009\u4e2d\u7684\u5143\u7d20\u3002\u5982\u679cstart\u662f\u975e\u96f6\u7684\uff0c\u5219\u8df3\u8fc7\u53ef\u8fed\u4ee3\u7684\u5143\u7d20\uff0c\u76f4\u5230\u5230\u8fbestart\u4e3a\u6b62\u3002\u4e4b\u540e\uff0c\u5143\u7d20\u4f1a\u8fde\u7eed\u8fd4\u56de\uff0c\u9664\u975estep\u8bbe\u7f6e\u5f97\u6bd4step\u9ad8\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u8df3\u8fc7\u9879\u3002\u5982\u679cstop\u4e3aNone\uff0c\u5219\u7ee7\u7eed\u8fed\u4ee3\uff0c\u76f4\u5230\u8fed\u4ee3\u5668\u8017\u5c3d\u4e3a\u6b62;\u5426\u5219\uff0c\u5b83\u5c06\u5728\u6307\u5b9a\u4f4d\u7f6e\u505c\u6b62\u3002\u4e0e\u5e38\u89c4\u5207\u7247\u4e0d\u540c\uff0cislice\uff08\uff09\u4e0d\u652f\u6301start\uff0cstop\u6216step\u7684\u8d1f\u503c\u3002\u53ef\u4ee5\u7528\u4e8e\u4ece\u5185\u90e8\u7ed3\u6784\u5df2\u88ab\u6241\u5e73\u5316\u7684\u6570\u636e\u4e2d\u63d0\u53d6\u76f8\u5173\u5b57\u6bb5(\u4f8b\u5982\uff0c\u591a\u884c\u62a5\u544a\u53ef\u80fd\u6bcf\u9694\u4e00\u884c\u5217\u51fa\u4e00\u4e2aname\u5b57\u6bb5)\u3002 \u5927\u81f4\u76f8\u5f53\u4e8e: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 def islice ( iterable , * args ): # islice( ABCDEFG , 2) -- A B # islice( ABCDEFG , 2, 4) -- C D # islice( ABCDEFG , 2, None) -- C D E F G # islice( ABCDEFG , 0, None, 2) -- A C E G s = slice ( * args ) start , stop , step = s . start or 0 , s . stop or sys . maxsize , s . step or 1 it = iter ( range ( start , stop , step )) try : nexti = next ( it ) except StopIteration : # Consume *iterable* up to the *start* position. for i , element in zip ( range ( start ), iterable ): pass return try : for i , element in enumerate ( iterable ): if i == nexti : yield element nexti = next ( it ) except StopIteration : # Consume to *stop*. for i , element in zip ( range ( i + 1 , stop ), iterable ): pass \u5982\u679cstart\u4e3aNone\uff0c\u90a3\u4e48\u8fed\u4ee3\u4ece0\u5f00\u59cb\u3002\u5982\u679cstep\u662fNone\uff0c\u90a3\u4e48step\u9ed8\u8ba4\u4e3a1\u3002","title":"itertools.islice(iterable, start, stop[, step])**\u548c**itertools.islice(iterable, stop)"},{"location":"Python/python_itertools/#itertoolsstarmapfunction-iterable","text":"\u5c06 iterable \u4e2d\u7684\u6bcf\u4e00\u9879\uff0c\u6620\u5c04\u5230 function \u4e2d\uff0c\u5e76\u6267\u884c function \u5927\u81f4\u76f8\u5f53\u4e8e\uff1a 1 2 3 4 def starmap ( function , iterable ): # starmap(pow, [(2,5), (3,2), (10,3)]) -- 32 9 1000 for args in iterable : yield function ( * args )","title":"itertools.starmap(function, iterable)"},{"location":"Python/python_itertools/#itertoolstakewhilepredicate-iterable","text":"\u53ea\u8981\u4f7f predicate \u4e3atrue\uff0c\u5c31\u8fd4\u56de\u3002\u5f53\u9047\u5230\u7b2c\u4e00\u4e2a\u4e3a False \u7684\u503c\u5c31\u505c\u6b62\u3002\u4e0e dropwhile \u76f8\u53cd \u5927\u81f4\u76f8\u5f53\u4e8e\uff1a 1 2 3 4 5 6 7 def takewhile ( predicate , iterable ): # takewhile(lambda x: x 5, [1,4,6,4,1]) -- 1 4 for x in iterable : if predicate ( x ): yield x else : break","title":"itertools.takewhile(predicate, iterable)"},{"location":"Python/python_itertools/#itertoolsteeiterable-n2","text":"\u4ece\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u8fd4\u56den\u4e2a\u72ec\u7acb\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\u3002 \u4e0b\u9762\u7684\u4ee3\u7801\u4f1a\u89e3\u91ca tee \u505a\u4e86\u4ec0\u4e48\uff08\u867d\u7136\u5b9e\u9645\u7684\u89e3\u91ca\u4f1a\u66f4\u590d\u6742\u4e00\u4e9b\uff0c\u5e76\u4e14\u53ea\u662f\u7528\u4e86\u4e00\u4e2a\u5355\u72ec\u7684FIFO\u5148\u8fdb\u5148\u51fa\u961f\u5217\uff09\u3002 \u5927\u81f4\u76f8\u5f53\u4e8e\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def tee ( iterable , n = 2 ): it = iter ( iterable ) deques = [ collections . deque () for i in range ( n )] def gen ( mydeque ): while True : if not mydeque : # when the local deque is empty try : newval = next ( it ) # fetch a new value and except StopIteration : return for d in deques : # load it to all the deques d . append ( newval ) yield mydeque . popleft () return tuple ( gen ( d ) for d in deques ) \u5b9e\u9645\u8fd9\u6837\u7528\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from itertools import tee print ( tee ([ 1 , 2 , 3 ], 3 )) # == ( itertools._tee object at 0x10cf787c8 , itertools._tee object at 0x10cf78808 , itertools._tee object at 0x10cf78848 ) for a in tee ([ 1 , 2 , 3 ], 3 ): for i in a : print ( i , end = ) print () # 1 2 3 # 1 2 3 # 1 2 3 for a , b , c in tee ([ 1 , 2 , 3 ], 3 ): print ( a , b , c ) # 1 2 3 # 1 2 3 # 1 2 3 \u4e00\u65e6tee\uff08\uff09\u8fdb\u884c\u4e86\u62c6\u5206\uff0c\u539f\u59cb\u7684iteable\u4e0d\u5e94\u8be5\u5728\u5176\u4ed6\u4efb\u4f55\u5730\u65b9\u4f7f\u7528; \u5426\u5219\uff0c\u8fed\u4ee3\u53ef\u4ee5\u5728\u6ca1\u6709\u901a\u77e5tee\u5bf9\u8c61\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u3002 \u8fd9\u4e2aitertool\u53ef\u80fd\u9700\u8981\u5927\u91cf\u7684\u8f85\u52a9\u5b58\u50a8\uff08\u53d6\u51b3\u4e8e\u9700\u8981\u5b58\u50a8\u591a\u5c11\u4e34\u65f6\u6570\u636e\uff09\u3002 \u901a\u5e38\uff0c\u5982\u679c\u4e00\u4e2a\u8fed\u4ee3\u5668\u5728\u53e6\u4e00\u4e2a\u8fed\u4ee3\u5668\u542f\u52a8\u4e4b\u524d\u4f7f\u7528\u5927\u90e8\u5206\u6216\u5168\u90e8\u6570\u636e\uff0c\u5219\u4f7f\u7528list\uff08\uff09\u800c\u4e0d\u662ftee\uff08\uff09\u4f1a\u66f4\u5feb\u3002","title":"itertools.tee(iterable, n=2)"},{"location":"Python/python_itertools/#itertoolszip_longest42iterables-fillvaluenone","text":"\u805a\u5408\u6bcf\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u5143\u7d20\u3002\u5982\u679c\u8fed\u4ee3\u7684\u957f\u5ea6\u4e0d\u5747\u5300\uff0c\u5219\u4f7f\u7528 fillvalue \u586b\u5145\u7f3a\u5931\u503c\u3002 \u8fed\u4ee3\u7ee7\u7eed\uff0c\u76f4\u5230\u6700\u957f\u7684\u53ef\u8fed\u4ee3\u7528\u5c3d\u3002 \u5927\u81f4\u76f8\u5f53\u4e8e\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def zip_longest ( * args , fillvalue = None ): # zip_longest( ABCD , xy , fillvalue= - ) -- Ax By C- D- iterators = [ iter ( it ) for it in args ] num_active = len ( iterators ) if not num_active : return while True : values = [] for i , it in enumerate ( iterators ): try : value = next ( it ) except StopIteration : num_active -= 1 if not num_active : return iterators [ i ] = repeat ( fillvalue ) value = fillvalue values . append ( value ) yield tuple ( values ) \u5982\u679c\u5176\u4e2d\u4e00\u4e2aiterables\u53ef\u80fd\u662f\u65e0\u9650\u7684\uff0c\u90a3\u4e48 zip_longest() \u51fd\u6570\u5e94\u8be5\u5305\u542b\u4e00\u4e9b\u9650\u5236\u8c03\u7528\u6b21\u6570\u7684\u4e1c\u897f\uff08\u4f8b\u5982 islice() \u6216 takewhile() \uff09\u3002 \u5982\u679c\u672a\u6307\u5b9a\uff0c\u5219fillvalue\u9ed8\u8ba4\u4e3aNone\u3002","title":"itertools.zip_longest(*iterables, fillvalue=None)"},{"location":"Python/python_itertools/#itertoolsproduct42iterables-repeat1","text":"\u5bf9\u653e\u5165\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\u8fdb\u884c\u7b1b\u5361\u5c14\u79ef\u8fd0\u7b97\u3002 \u5927\u81f4\u76f8\u5f53\u4e8e\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u4e2d\u7684\u5d4c\u5957for\u5faa\u73af\u3002\u4f8b\u5982\uff0c product(A, B) \u7684\u8fd4\u56de\u548c ((x,y) for x in A for y in B) \u4e00\u6837 \u8981\u8ba1\u7b97iterable\u4e0e\u5176\u81ea\u8eab\u7684\u4e58\u79ef\uff0c\u8bf7\u4f7f\u7528\u53ef\u9009\u7684repeat\u5173\u952e\u5b57\u53c2\u6570\u6307\u5b9a\u91cd\u590d\u6b21\u6570\u3002 \u4f8b\u5982\uff0c product(A, repeat=4) \u76f8\u5f53\u4e8e product(A, A, A, A) \u6b64\u51fd\u6570\u5927\u81f4\u7b49\u540c\u4e8e\u4ee5\u4e0b\u4ee3\u7801\uff0c\u4f46\u5b9e\u9645\u5b9e\u73b0\u4e0d\u4f1a\u5728\u5185\u5b58\u4e2d\u6784\u5efa\u4e2d\u95f4\u7ed3\u679c\uff1a 1 2 3 4 5 6 7 8 9 def product ( * args , repeat = 1 ): # product( ABCD , xy ) -- Ax Ay Bx By Cx Cy Dx Dy # product(range(2), repeat=3) -- 000 001 010 011 100 101 110 111 pools = [ tuple ( pool ) for pool in args ] * repeat result = [[]] for pool in pools : result = [ x + [ y ] for x in result for y in pool ] for prod in result : yield tuple ( prod )","title":"itertools.product(*iterables, repeat=1)"},{"location":"Python/python_itertools/#itertoolspermutationsiterable-rnone","text":"\u5bf9\u53ef\u8fed\u4ee3\u5bf9\u8c61\u8fdb\u884c\u7ec4\u5408\u6392\u5217\uff0c\u7ec4\u5408\u957f\u5ea6\u4e3a r \u5927\u81f4\u76f8\u5f53\u4e8e\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 def permutations ( iterable , r = None ): # permutations( ABCD , 2) -- AB AC AD BA BC BD CA CB CD DA DB DC # permutations(range(3)) -- 012 021 102 120 201 210 pool = tuple ( iterable ) n = len ( pool ) r = n if r is None else r if r n : return indices = list ( range ( n )) cycles = list ( range ( n , n - r , - 1 )) yield tuple ( pool [ i ] for i in indices [: r ]) while n : for i in reversed ( range ( r )): cycles [ i ] -= 1 if cycles [ i ] == 0 : indices [ i :] = indices [ i + 1 :] + indices [ i : i + 1 ] cycles [ i ] = n - i else : j = cycles [ i ] indices [ i ], indices [ - j ] = indices [ - j ], indices [ i ] yield tuple ( pool [ i ] for i in indices [: r ]) break else : return","title":"itertools.permutations(iterable, r=None)"},{"location":"Python/python_itertools/#itertoolscombinationsiterable-r","text":"\u548c permutations \u7c7b\u4f3c\u3002\u4f46\u662f\u4e0d\u540c\u7684\u662f\uff0c\u4e0d\u4f1a\u6709\u5ffd\u7565\u5143\u7d20\u987a\u5e8f\u7684\u76f8\u540c\u7684\u7ec4\u5408 \u5176\u76f8\u5f53\u4e8e\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def combinations ( iterable , r ): # combinations( ABCD , 2) -- AB AC AD BC BD CD # combinations(range(4), 3) -- 012 013 023 123 pool = tuple ( iterable ) n = len ( pool ) if r n : return indices = list ( range ( r )) yield tuple ( pool [ i ] for i in indices ) while True : for i in reversed ( range ( r )): if indices [ i ] != i + n - r : break else : return indices [ i ] += 1 for j in range ( i + 1 , r ): indices [ j ] = indices [ j - 1 ] + 1 yield tuple ( pool [ i ] for i in indices )","title":"itertools.combinations(iterable, r)"},{"location":"Python/python_itertools/#itertoolscombinations_with_replacementiterable-r","text":"\u548c combinations \u76f8\u4f3c\u3002\u4f46\u4e0d\u540c\u7684\u662f\uff0c\u6b64\u65b9\u6cd5\u8fd4\u56de\u7684\u7ec4\u5408\u4e2d\uff0c\u4f1a\u6709\u76f8\u540c\u5143\u7d20 \u5176\u5927\u81f4\u76f8\u5f53\u4e8e\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 def combinations_with_replacement ( iterable , r ): # combinations_with_replacement( ABC , 2) -- AA AB AC BB BC CC pool = tuple ( iterable ) n = len ( pool ) if not n and r : return indices = [ 0 ] * r yield tuple ( pool [ i ] for i in indices ) while True : for i in reversed ( range ( r )): if indices [ i ] != n - 1 : break else : return indices [ i :] = [ indices [ i ] + 1 ] * ( r - i ) yield tuple ( pool [ i ] for i in indices )","title":"itertools.combinations_with_replacement(iterable, r)"},{"location":"Python/python_with/","text":"\u8f6c\u8f7d\u6765\u81ea\uff1a https://www.cnblogs.com/ybjourney/p/8859519.html Python2.5\u4e4b\u540e\u5f15\u5165\u4e86\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff08context manager\uff09\uff0c\u7b97\u662fPython\u7684\u9ed1\u9b54\u6cd5\u4e4b\u4e00\uff0c\u5b83\u7528\u4e8e\u89c4\u5b9a\u67d0\u4e2a\u5bf9\u8c61\u7684\u4f7f\u7528\u8303\u56f4\u3002\u672c\u6587\u662f\u9488\u5bf9\u4e8e\u8be5\u529f\u80fd\u7684\u601d\u8003\u603b\u7ed3\u3002 \u4e3a\u4ec0\u4e48\u9700\u8981\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff1f \u9996\u5148\uff0c\u9700\u8981\u601d\u7d22\u4e0b\u4e3a\u4ec0\u4e48\u9700\u8981\u5f15\u5165\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002 \u5728\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u7ba1\u7406\u5404\u79cd\u7cfb\u7edf\u8d44\u6e90\uff08\u5982\u6587\u4ef6\uff09\u3001\u6570\u636e\u5e93\u8fde\u63a5\u65f6\uff0c\u901a\u5e38\u662f\u5148\u6253\u5f00\u8fd9\u4e9b\u8d44\u6e90\uff0c\u6267\u884c\u5b8c\u76f8\u5e94\u7684\u4e1a\u52a1\u903b\u8f91\uff0c\u6700\u540e\u5173\u95ed\u8d44\u6e90\u3002 \u4e3e\u4e24\u4e2a\u4f8b\u5b50: \u4f7f\u7528Python\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u5199\u5165\u5185\u5bb9\uff0c\u4e4b\u540e\u9700\u8981\u5173\u95ed\u8fd9\u4e2a\u6587\u4ef6\u3002\u5982\u679c\u4e0d\u6b63\u5e38\u5173\u95ed\u7684\u8bdd\u53ef\u80fd\u4f1a\u5728\u6587\u4ef6\u64cd\u4f5c\u65f6\u51fa\u73b0\u5f02\u5e38\uff0c\u56e0\u4e3a\u7cfb\u7edf\u5141\u8bb8\u4f60\u6253\u5f00\u7684\u6587\u4ef6\u7684\u6700\u5927\u6570\u662f\u6709\u9650\u7684\u3002 \u5728\u6570\u636e\u5e93\u8fde\u63a5\u65f6\u4e5f\u662f\u5b58\u5728\u7c7b\u4f3c\u95ee\u9898\uff0c\u6570\u636e\u5e93\u7684\u8fde\u63a5\u7b97\u662f\u4e00\u79cd\u6bd4\u8f83\u6602\u8d35\u7684\u8d44\u6e90\uff0c\u82e5\u8fde\u63a5\u8fc7\u591a\u800c\u6ca1\u6709\u53ca\u65f6\u5173\u95ed\u7684\u8bdd\uff0c\u5c31\u53ef\u80fd\u51fa\u73b0\u4e0d\u80fd\u7ee7\u7eed\u8fde\u63a5\u7684\u5f02\u5e38\u9519\u8bef\u3002 \u4f46\u662f\uff0c\u5f88\u591a\u7a0b\u5e8f\u5458\u7ecf\u5e38\u4f1a\u5fd8\u8bb0\u5173\u95ed\u6587\u4ef6\uff0c\u6216\u8005\u5173\u95ed\u6570\u636e\u5e93\u7684\u8fde\u63a5\u3002\u8fd9\u65f6\u5019\u5c31\u5f15\u5165\u4e86\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff0c\u5b83\u53ef\u4ee5\u5728\u4f60\u4e0d\u9700\u8981\u8be5\u5bf9\u8c61\u7684\u65f6\u5019\uff0c\u81ea\u52a8\u5173\u95ed\u5b83\u3002 \u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u600e\u4e48\u4f7f\u7528\uff1f \u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7684\u8bed\u6cd5\u662f\uff1a 1 with...as... \u5b9e\u4f8b\uff1a\u6587\u4ef6\u64cd\u4f5c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 print \u4e0d\u4f7f\u7528\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668 print * * 30 f = open ( file.py , w ) print f . closed f . write ( # Hello World ) f . close () print f . closed print \\n \u4f7f\u7528\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668 print * * 30 with open ( file.py , w ) as f : print f . closed f . write ( # Hello Python ) print f . closed \u8fd9\u91cc\u901a\u8fc7.closed\u6bd4\u8f83\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u53ef\u4ee5\u81ea\u52a8\u5173\u95ed\u6587\u4ef6\uff0c\u5bf9\u4e8e\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u800c\u8a00\uff0c\u6709\u96b6\u5c5e\u4e8e\u5b83\u7684\u7a0b\u5e8f\u5757\uff0c\u5f53\u96b6\u5c5e\u4e8e\u5b83\u7684\u7a0b\u5e8f\u5757\u6267\u884c\u7ed3\u675f\u7684\u65f6\u5019\uff08\u5224\u65ad\u7f29\u8fdb\uff09\uff0c\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5c06\u81ea\u52a8\u5173\u95ed\u6587\u4ef6\u3002 \u4e0a\u8ff0\u5b9e\u4f8b\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528try...except...\u6765\u5b9e\u73b0\uff0c\u540c\u6837\u53ef\u4ee5\u5f88\u76f4\u89c2\u7684\u770b\u5230\u4f7f\u7528with...as...\u8bed\u53e5\u4e4b\u540e\uff0c\u4ee3\u7801\u786e\u5b9e\u76f8\u5bf9\u66f4\u52a0\u7b80\u6d01\u3002 \u4e0a\u4e0b\u6587\u7ba1\u7406\u5b9e\u73b0\u673a\u5236 \u56e0\u4e3a\u6587\u4ef6\u5bf9\u8c61\u662fPython\u7684\u5185\u7f6e\u5bf9\u8c61\uff0c\u5185\u7f6e\u4e86\u4e0a\u4e0b\u6587\u7ba1\u7406\u7684\u7279\u6b8a\u65b9\u6cd5\uff0c\u6240\u4ee5\u5b83\u53ef\u4ee5\u4f7f\u7528with\u8bed\u53e5\u3002\u5728Python\u4e2d\uff0c\u4efb\u4f55\u5bf9\u8c61\uff0c\u53ea\u8981\u5b9e\u73b0\u4e86\u4e0a\u4e0b\u6587\u7ba1\u7406\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528with\u8bed\u53e5\uff0c\u5b9e\u73b0\u4e0a\u4e0b\u6587\u7ba1\u7406\u9700\u8981\u901a\u8fc7__enter__\u548c__exit__\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u6765\u5b9e\u73b0\u3002 \u5173\u4e8e\u8fd9\u4e24\u4e2a\u65b9\u6cd5\uff1a enter(self)\uff1a\u8fdb\u5165\u8be5\u5bf9\u8c61\u65f6\u8c03\u7528\u6b64\u65b9\u6cd5\uff0c\u8fd4\u56de\u503c\u5c06\u653e\u5165with...as...\u8bed\u53e5\u4e2d\u7684as\u8bf4\u660e\u7684\u53d8\u91cf\u4e2d exit(self, type, value, tb):\u79bb\u5f00\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u65f6\u8c03\u7528\u8be5\u65b9\u6cd5\uff0c\u5982\u679c\u6709\u5f02\u5e38\u51fa\u73b0\uff0c\u8fd4\u56deFalse\uff0ctype\u3001value\u548ctb\u5c06\u5206\u522b\u8868\u793a\u5f02\u5e38\u7684\u7c7b\u578b\u3001\u503c\u548c\u8ffd\u8e2a\u4fe1\u606f\uff0c\u4f20\u9012\u51fa\u4e0a\u4e0b\u6587\u663e\u793a\uff1b\u5982\u679c\u6ca1\u6709\u5f02\u5e38\uff0c\u5219\u4e09\u4e2a\u53d8\u91cf\u7684\u503c\u5747\u4e3aNone\u3002 1 2 with \u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff1a \u8bed\u6cd5\u4f53 \u5f53with\u8bed\u53e5\u9047\u5230\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u65f6\uff0c\u5c31\u4f1a\u5728\u6267\u884c\u8bed\u6cd5\u4f53\u4e4b\u524d\uff0c\u5148\u6267\u884c__enter__\u65b9\u6cd5\uff0c\u7136\u540e\u518d\u6267\u884c\u8bed\u6cd5\u4f53\uff0c\u6267\u884c\u5b8c\u8bed\u6cd5\u4f53\u4e4b\u540e\uff0c\u6267\u884c__exit__\u65b9\u6cd5\u3002 \u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5b9e\u73b0 \u4f7f\u7528Python2.7X\u5b9e\u73b0\u4e00\u4e2a\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Context ( object ): def __init__ ( self ): print \u5b9e\u4f8b\u5316\u4e00\u4e2a\u5bf9\u8c61 def __enter__ ( self ): print \u83b7\u53d6\u8be5\u5bf9\u8c61 def __exit__ ( self , exc_type , exc_val , exc_tb ): print \u9000\u51fa\u8be5\u5bf9\u8c61 temp = Context () with temp : print \u6267\u884c\u4f53 \u8fd9\u6837\uff0c__enter__\u65b9\u6cd5\u548c__exit__\u65b9\u6cd5\u7684\u8c03\u7528\u8fc7\u7a0b\u5c31\u5f88\u660e\u6670\u3002 contextLib \u5728contextlib\u4e2d\uff0c\u63d0\u4f9b\u4e86contextmanager\u88c5\u9970\u5668\uff0c\u901a\u8fc7yield\u8fd4\u56de\u51fd\u6570\u5c06\u51fd\u6570\u5206\u9694\u4e3a\u4e24\u90e8\u5206\uff0cyield\u4e4b\u524d\u7684\u8bed\u53e5\u5728__enter__\u4e2d\u6267\u884c\uff0cyield\u4e4b\u540e\u7684\u8bed\u53e5\u5728__exit__\u4e2d\u6267\u884c\uff0c\u7b80\u5316\u4e86\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7684\u5b9e\u73b0\u65b9\u5f0f\uff1a \u603b\u7ed3\uff1a\u901a\u8fc7\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u66f4\u597d\u7684\u63a7\u5236\u5bf9\u8c61\u5728\u4e0d\u540c\u533a\u95f4\u7684\u7279\u6027\uff0c\u5e76\u4e14\u53ef\u4ee5\u4f7f\u7528with\u8bed\u53e5\u66ff\u4ee3try...except\u65b9\u6cd5\uff0c\u4f7f\u5f97\u4ee3\u7801\u66f4\u52a0\u7684\u7b80\u6d01\uff0c\u4e3b\u8981\u7684\u4f7f\u7528\u573a\u666f\u662f\u8bbf\u95ee\u8d44\u6e90\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u4e0d\u7ba1\u8fc7\u7a0b\u4e2d\u662f\u5426\u53d1\u751f\u9519\u8bef\u6216\u8005\u5f02\u5e38\u90fd\u4f1a\u6267\u884c\u76f8\u5e94\u7684\u6e05\u7406\u64cd\u4f5c\uff0c\u91ca\u653e\u51fa\u8bbf\u95ee\u7684\u8d44\u6e90\u3002","title":"Python\u4e2d\u7684\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u548cwith\u8bed\u53e5"},{"location":"Python/python_with/#_1","text":"\u9996\u5148\uff0c\u9700\u8981\u601d\u7d22\u4e0b\u4e3a\u4ec0\u4e48\u9700\u8981\u5f15\u5165\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002 \u5728\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u7ba1\u7406\u5404\u79cd\u7cfb\u7edf\u8d44\u6e90\uff08\u5982\u6587\u4ef6\uff09\u3001\u6570\u636e\u5e93\u8fde\u63a5\u65f6\uff0c\u901a\u5e38\u662f\u5148\u6253\u5f00\u8fd9\u4e9b\u8d44\u6e90\uff0c\u6267\u884c\u5b8c\u76f8\u5e94\u7684\u4e1a\u52a1\u903b\u8f91\uff0c\u6700\u540e\u5173\u95ed\u8d44\u6e90\u3002 \u4e3e\u4e24\u4e2a\u4f8b\u5b50: \u4f7f\u7528Python\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u5199\u5165\u5185\u5bb9\uff0c\u4e4b\u540e\u9700\u8981\u5173\u95ed\u8fd9\u4e2a\u6587\u4ef6\u3002\u5982\u679c\u4e0d\u6b63\u5e38\u5173\u95ed\u7684\u8bdd\u53ef\u80fd\u4f1a\u5728\u6587\u4ef6\u64cd\u4f5c\u65f6\u51fa\u73b0\u5f02\u5e38\uff0c\u56e0\u4e3a\u7cfb\u7edf\u5141\u8bb8\u4f60\u6253\u5f00\u7684\u6587\u4ef6\u7684\u6700\u5927\u6570\u662f\u6709\u9650\u7684\u3002 \u5728\u6570\u636e\u5e93\u8fde\u63a5\u65f6\u4e5f\u662f\u5b58\u5728\u7c7b\u4f3c\u95ee\u9898\uff0c\u6570\u636e\u5e93\u7684\u8fde\u63a5\u7b97\u662f\u4e00\u79cd\u6bd4\u8f83\u6602\u8d35\u7684\u8d44\u6e90\uff0c\u82e5\u8fde\u63a5\u8fc7\u591a\u800c\u6ca1\u6709\u53ca\u65f6\u5173\u95ed\u7684\u8bdd\uff0c\u5c31\u53ef\u80fd\u51fa\u73b0\u4e0d\u80fd\u7ee7\u7eed\u8fde\u63a5\u7684\u5f02\u5e38\u9519\u8bef\u3002 \u4f46\u662f\uff0c\u5f88\u591a\u7a0b\u5e8f\u5458\u7ecf\u5e38\u4f1a\u5fd8\u8bb0\u5173\u95ed\u6587\u4ef6\uff0c\u6216\u8005\u5173\u95ed\u6570\u636e\u5e93\u7684\u8fde\u63a5\u3002\u8fd9\u65f6\u5019\u5c31\u5f15\u5165\u4e86\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff0c\u5b83\u53ef\u4ee5\u5728\u4f60\u4e0d\u9700\u8981\u8be5\u5bf9\u8c61\u7684\u65f6\u5019\uff0c\u81ea\u52a8\u5173\u95ed\u5b83\u3002","title":"\u4e3a\u4ec0\u4e48\u9700\u8981\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff1f"},{"location":"Python/python_with/#_2","text":"\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7684\u8bed\u6cd5\u662f\uff1a 1 with...as... \u5b9e\u4f8b\uff1a\u6587\u4ef6\u64cd\u4f5c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 print \u4e0d\u4f7f\u7528\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668 print * * 30 f = open ( file.py , w ) print f . closed f . write ( # Hello World ) f . close () print f . closed print \\n \u4f7f\u7528\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668 print * * 30 with open ( file.py , w ) as f : print f . closed f . write ( # Hello Python ) print f . closed \u8fd9\u91cc\u901a\u8fc7.closed\u6bd4\u8f83\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u53ef\u4ee5\u81ea\u52a8\u5173\u95ed\u6587\u4ef6\uff0c\u5bf9\u4e8e\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u800c\u8a00\uff0c\u6709\u96b6\u5c5e\u4e8e\u5b83\u7684\u7a0b\u5e8f\u5757\uff0c\u5f53\u96b6\u5c5e\u4e8e\u5b83\u7684\u7a0b\u5e8f\u5757\u6267\u884c\u7ed3\u675f\u7684\u65f6\u5019\uff08\u5224\u65ad\u7f29\u8fdb\uff09\uff0c\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5c06\u81ea\u52a8\u5173\u95ed\u6587\u4ef6\u3002 \u4e0a\u8ff0\u5b9e\u4f8b\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528try...except...\u6765\u5b9e\u73b0\uff0c\u540c\u6837\u53ef\u4ee5\u5f88\u76f4\u89c2\u7684\u770b\u5230\u4f7f\u7528with...as...\u8bed\u53e5\u4e4b\u540e\uff0c\u4ee3\u7801\u786e\u5b9e\u76f8\u5bf9\u66f4\u52a0\u7b80\u6d01\u3002","title":"\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u600e\u4e48\u4f7f\u7528\uff1f"},{"location":"Python/python_with/#_3","text":"\u56e0\u4e3a\u6587\u4ef6\u5bf9\u8c61\u662fPython\u7684\u5185\u7f6e\u5bf9\u8c61\uff0c\u5185\u7f6e\u4e86\u4e0a\u4e0b\u6587\u7ba1\u7406\u7684\u7279\u6b8a\u65b9\u6cd5\uff0c\u6240\u4ee5\u5b83\u53ef\u4ee5\u4f7f\u7528with\u8bed\u53e5\u3002\u5728Python\u4e2d\uff0c\u4efb\u4f55\u5bf9\u8c61\uff0c\u53ea\u8981\u5b9e\u73b0\u4e86\u4e0a\u4e0b\u6587\u7ba1\u7406\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528with\u8bed\u53e5\uff0c\u5b9e\u73b0\u4e0a\u4e0b\u6587\u7ba1\u7406\u9700\u8981\u901a\u8fc7__enter__\u548c__exit__\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u6765\u5b9e\u73b0\u3002 \u5173\u4e8e\u8fd9\u4e24\u4e2a\u65b9\u6cd5\uff1a enter(self)\uff1a\u8fdb\u5165\u8be5\u5bf9\u8c61\u65f6\u8c03\u7528\u6b64\u65b9\u6cd5\uff0c\u8fd4\u56de\u503c\u5c06\u653e\u5165with...as...\u8bed\u53e5\u4e2d\u7684as\u8bf4\u660e\u7684\u53d8\u91cf\u4e2d exit(self, type, value, tb):\u79bb\u5f00\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u65f6\u8c03\u7528\u8be5\u65b9\u6cd5\uff0c\u5982\u679c\u6709\u5f02\u5e38\u51fa\u73b0\uff0c\u8fd4\u56deFalse\uff0ctype\u3001value\u548ctb\u5c06\u5206\u522b\u8868\u793a\u5f02\u5e38\u7684\u7c7b\u578b\u3001\u503c\u548c\u8ffd\u8e2a\u4fe1\u606f\uff0c\u4f20\u9012\u51fa\u4e0a\u4e0b\u6587\u663e\u793a\uff1b\u5982\u679c\u6ca1\u6709\u5f02\u5e38\uff0c\u5219\u4e09\u4e2a\u53d8\u91cf\u7684\u503c\u5747\u4e3aNone\u3002 1 2 with \u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff1a \u8bed\u6cd5\u4f53 \u5f53with\u8bed\u53e5\u9047\u5230\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u65f6\uff0c\u5c31\u4f1a\u5728\u6267\u884c\u8bed\u6cd5\u4f53\u4e4b\u524d\uff0c\u5148\u6267\u884c__enter__\u65b9\u6cd5\uff0c\u7136\u540e\u518d\u6267\u884c\u8bed\u6cd5\u4f53\uff0c\u6267\u884c\u5b8c\u8bed\u6cd5\u4f53\u4e4b\u540e\uff0c\u6267\u884c__exit__\u65b9\u6cd5\u3002","title":"\u4e0a\u4e0b\u6587\u7ba1\u7406\u5b9e\u73b0\u673a\u5236"},{"location":"Python/python_with/#_4","text":"\u4f7f\u7528Python2.7X\u5b9e\u73b0\u4e00\u4e2a\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Context ( object ): def __init__ ( self ): print \u5b9e\u4f8b\u5316\u4e00\u4e2a\u5bf9\u8c61 def __enter__ ( self ): print \u83b7\u53d6\u8be5\u5bf9\u8c61 def __exit__ ( self , exc_type , exc_val , exc_tb ): print \u9000\u51fa\u8be5\u5bf9\u8c61 temp = Context () with temp : print \u6267\u884c\u4f53 \u8fd9\u6837\uff0c__enter__\u65b9\u6cd5\u548c__exit__\u65b9\u6cd5\u7684\u8c03\u7528\u8fc7\u7a0b\u5c31\u5f88\u660e\u6670\u3002","title":"\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5b9e\u73b0"},{"location":"Python/python_with/#contextlib","text":"\u5728contextlib\u4e2d\uff0c\u63d0\u4f9b\u4e86contextmanager\u88c5\u9970\u5668\uff0c\u901a\u8fc7yield\u8fd4\u56de\u51fd\u6570\u5c06\u51fd\u6570\u5206\u9694\u4e3a\u4e24\u90e8\u5206\uff0cyield\u4e4b\u524d\u7684\u8bed\u53e5\u5728__enter__\u4e2d\u6267\u884c\uff0cyield\u4e4b\u540e\u7684\u8bed\u53e5\u5728__exit__\u4e2d\u6267\u884c\uff0c\u7b80\u5316\u4e86\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7684\u5b9e\u73b0\u65b9\u5f0f\uff1a \u603b\u7ed3\uff1a\u901a\u8fc7\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u66f4\u597d\u7684\u63a7\u5236\u5bf9\u8c61\u5728\u4e0d\u540c\u533a\u95f4\u7684\u7279\u6027\uff0c\u5e76\u4e14\u53ef\u4ee5\u4f7f\u7528with\u8bed\u53e5\u66ff\u4ee3try...except\u65b9\u6cd5\uff0c\u4f7f\u5f97\u4ee3\u7801\u66f4\u52a0\u7684\u7b80\u6d01\uff0c\u4e3b\u8981\u7684\u4f7f\u7528\u573a\u666f\u662f\u8bbf\u95ee\u8d44\u6e90\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u4e0d\u7ba1\u8fc7\u7a0b\u4e2d\u662f\u5426\u53d1\u751f\u9519\u8bef\u6216\u8005\u5f02\u5e38\u90fd\u4f1a\u6267\u884c\u76f8\u5e94\u7684\u6e05\u7406\u64cd\u4f5c\uff0c\u91ca\u653e\u51fa\u8bbf\u95ee\u7684\u8d44\u6e90\u3002","title":"contextLib"},{"location":"others/calculate_string_similar/","text":"\u4ea7\u54c1\u51fa\u4e86\u4e00\u4e2a\u5947\u602a\u7684\u9700\u6c42\uff0c\u60f3\u901a\u8fc7\u5b57\u7b26\u4e32\u76f8\u4f3c\u5ea6\u53d6\u5339\u914d\u57ce\u5e02= =\uff08\u5f53\u7136\uff0c\u6700\u540e\u8bc1\u5b9e\u901a\u8fc7\u5b57\u7b26\u4e32\u76f8\u4f3c\u5ea6\u53d6\u5224\u65ad\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u4e0d\u662f\u4e00\u4e2a\u57ce\u5e02\u662f\u4e0d\u5bf9\u7684\uff01\uff01\uff01\uff09 \u8fd9\u91cc\u5c31\u8bb0\u5f55\u4e00\u4e0b\u6211\u8ba1\u7b97\u5b57\u7b26\u4e32(\u82f1\u6587\u5b57\u7b26\u4e32)\u76f8\u4f3c\u5ea6\u7684\u65b9\u6cd5\u5427\uff5e \u53c2\u8003\u6587\u6863 python_levenshtein \u7684\u5b89\u88c5\u548c\u4f7f\u7528 \u76f8\u4f3c\u5ea6\u7b97\u6cd5\u4e4b\u4f59\u5f26\u76f8\u4f3c\u5ea6 Levenshtein Levenshtein.hamming(str1, str2) \u8ba1\u7b97\u6c49\u660e\u8ddd\u79bb\u3002\u8981\u6c42str1\u548cstr2\u5fc5\u987b\u957f\u5ea6\u4e00\u81f4\u3002\u662f\u63cf\u8ff0\u4e24\u4e2a\u7b49\u957f\u5b57\u4e32\u4e4b\u95f4\u5bf9\u5e94\u4f4d\u7f6e\u4e0a\u4e0d\u540c\u5b57\u7b26\u7684\u4e2a\u6570\u3002 \u7528\u6cd5\uff1a 1 2 3 4 5 import Levenshtein Levenshtein.hamming ( abc , cba ) 2 Levenshtein.hamming ( abc , def ) 3 Levenshtein.distance(str1, str2) \u8ba1\u7b97\u7f16\u8f91\u8ddd\u79bb\uff08\u4e5f\u6210Levenshtein\u8ddd\u79bb\uff09\u3002\u662f\u63cf\u8ff0\u7531\u4e00\u4e2a\u5b57\u4e32\u8f6c\u5316\u6210\u53e6\u4e00\u4e2a\u5b57\u4e32\u6700\u5c11\u7684\u64cd\u4f5c\u6b21\u6570\uff0c\u5728\u5176\u4e2d\u7684\u64cd\u4f5c\u5305\u62ec\u63d2\u5165\u3001\u5220\u9664\u3001\u66ff\u6362\u3002 \u7528\u6cd5\uff1a 1 2 3 4 Levenshtein.distance ( abc , ab ) 1 Levenshtein.distance ( cxy , ab ) 3 Levenshtein.ratio(str1, str2) \u8ba1\u7b97\u83b1\u6587\u65af\u5766\u6bd4\u3002\u8ba1\u7b97\u516c\u5f0f r = (sum - ldist) / sum, \u5176\u4e2dsum\u662f\u6307str1 \u548c str2 \u5b57\u4e32\u7684\u957f\u5ea6\u603b\u548c\uff0cldist\u662f\u7c7b\u7f16\u8f91\u8ddd\u79bb \u6ce8\u610f\uff1a \u8fd9\u91cc\u7684\u7c7b\u7f16\u8f91\u8ddd\u79bb\u4e0d\u662f Levenshtein.distance(str1, str2) \u6240\u8bf4\u7684\u7f16\u8f91\u8ddd\u79bb\uff0c Levenshtein.distance(str1, str2) \u4e2d\u4e09\u79cd\u64cd\u4f5c\u4e2d\u6bcf\u4e2a\u64cd\u4f5c+1\uff0c\u800c\u5728\u6b64\u5904\uff0c\u5220\u9664\u3001\u63d2\u5165\u4f9d\u7136+1\uff0c\u4f46\u662f\u66ff\u6362+2 \u8fd9\u6837\u8bbe\u8ba1\u7684\u76ee\u7684\uff1aratio('a', 'c')\uff0csum=2,\u63092\u4e2d\u8ba1\u7b97\u4e3a\uff082-1\uff09/2 = 0.5,\u2019a','c'\u6ca1\u6709\u91cd\u5408\uff0c\u663e\u7136\u4e0d\u5408\u7b97\uff0c\u4f46\u662f\u66ff\u6362\u64cd\u4f5c+2\uff0c\u5c31\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u7528\u6cd5\uff1a 1 2 Levenshtein.ratio ( a,cdsf , abcd ) 0 .6 difflib \u6211\u4e3b\u8981\u7528\u7684\u662f SequenceMatcher \uff0c \u56e0\u6b64\uff0c\u672c\u6b21\u53ea\u4ecb\u7ecd SequenceMatcher . SequenceMatcher \u662f\u53ef\u4ee5\u5bf9\u4e24\u4e2a\u53ef\u5e8f\u5217\u5316\u7684\u5bf9\u8c61\u8fdb\u884c\u6bd4\u8f83\u7684\u7c7b \u5b98\u7f51\u4e0a\u7684\u7528\u6cd5\u662f\uff1a ```shell s = SequenceMatcher(lambda x: x == \" \", ... \"private Thread currentThread;\", ... \"private volatile Thread currentThread;\") print(round(s.ratio(), 3)) 0.866 ``` \u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u4e00\u4e2a\u51fd\u6570\uff0c\u4e3b\u8981\u7528\u6765\u53bb\u6389\u81ea\u5df1\u4e0d\u60f3\u7b97\u5728\u5185\u7684\u5143\u7d20\uff1b\u5982\u679c\u6ca1\u6709\uff0c\u53ef\u4ee5\u5199 None \u540e\u9762\u4e24\u4e2a\u53c2\u6570\u5c31\u662f\u9700\u8981\u6bd4\u8f83\u7684\u4e24\u4e2a\u5bf9\u8c61\u4e86 \u4f59\u5f26\u5b9a\u7406 \u76f8\u4f3c\u5ea6\u7b97\u6cd5\u4e4b\u4f59\u5f26\u76f8\u4f3c\u5ea6 \u901a\u8fc7\u9605\u8bfb\u4e0a\u9762\u7684\u6587\u7ae0\uff0c\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u603b\u7ed3\u8ba1\u7b97\u76f8\u4f3c\u5ea6\u7684\u51e0\u4e2a\u6b65\u9aa4\uff1a \u5217\u51fa\u6240\u6709\u51fa\u73b0\u7684\u5b57\u6bcd\uff0c\u5e76\u5206\u522b\u7edf\u8ba1\u4e24\u4e2a\u5b57\u7b26\u4e32\u51fa\u73b0\u8fd9\u4e9b\u5b57\u6bcd\u7684\u6b21\u6570\u3002\u8fd9\u91cc\u6211\u662f\u8fd9\u6837\u5199\u7684\uff0c\u5229\u7528 from collections import Counter, OrderedDict \u65b9\u6cd5\uff1a ```shell from collections import Counter, OrderedDict from copy import deepcopy a = 'abc' b = 'bcde' item = set(a) | set(b) item {'b', 'c', 'e', 'd', 'a'} model = OrderedDict().fromkeys(item) model OrderedDict([('b', None), ('c', None), ('e', None), ('d', None), ('a', None)]) model1 = deepcopy(model) model2 = deepcopy(model) model1.update(Counter(a)) model1 OrderedDict([('b', 1), ('c', 1), ('e', None), ('d', None), ('a', 1)]) model2.update(Counter(b)) model2 OrderedDict([('b', 1), ('c', 1), ('e', 1), ('d', 1), ('a', None)]) ``` \u8fd9\u6837\u5199\u7684\u539f\u56e0\u662f\uff0c\u5728\u6bd4\u8f83\u8bcd\u9891\u7684\u65f6\u5019\uff0c\u8981\u4fdd\u8bc1\u6bcf\u4e2a\u5b57\u6bcd\u7684\u987a\u5e8f\u662f\u4e00\u6837\u7684\uff5e \u5229\u7528\u4f59\u5f26\u516c\u5f0f\u8ba1\u7b97\u76f8\u4f3c\u5ea6 \u65b9\u6cd5\uff1a ```shell import math sum = 0 #\u5206\u5b50 q1 = 0 #\u5206\u6bcd q2 = 0 #\u5206\u6bcd for i in item: a = model1[i] if type(model1[i]) != type(None) else 0 b = model2[i] if type(model2[i]) != type(None) else 0 sum += a * b q1 += pow(a, 2) q2 += pow(b, 2) sum 2 q1 3 q2 4 result = float(sum) / (math.sqrt(q1) * math.sqrt(q2)) result 0.5773502691896258 ``` \u8fd9\u6837\u5c31\u7b97\u51fa\u76f8\u4f3c\u5ea6\u5566\uff5e ps\uff1a\u672c\u6587\u8bf4\u7684\u8ba1\u7b97\u7684\u5b57\u7b26\u4e32\uff0c\u5168\u662f\u82f1\u6587\u5b57\u7b26\u4e32\uff5e\uff5e","title":"\u8ba1\u7b97\u5b57\u7b26\u4e32\u76f8\u4f3c\u5ea6\u7684\u4e00\u4e9b\u65b9\u6cd5"},{"location":"others/calculate_string_similar/#levenshtein","text":"Levenshtein.hamming(str1, str2) \u8ba1\u7b97\u6c49\u660e\u8ddd\u79bb\u3002\u8981\u6c42str1\u548cstr2\u5fc5\u987b\u957f\u5ea6\u4e00\u81f4\u3002\u662f\u63cf\u8ff0\u4e24\u4e2a\u7b49\u957f\u5b57\u4e32\u4e4b\u95f4\u5bf9\u5e94\u4f4d\u7f6e\u4e0a\u4e0d\u540c\u5b57\u7b26\u7684\u4e2a\u6570\u3002 \u7528\u6cd5\uff1a 1 2 3 4 5 import Levenshtein Levenshtein.hamming ( abc , cba ) 2 Levenshtein.hamming ( abc , def ) 3 Levenshtein.distance(str1, str2) \u8ba1\u7b97\u7f16\u8f91\u8ddd\u79bb\uff08\u4e5f\u6210Levenshtein\u8ddd\u79bb\uff09\u3002\u662f\u63cf\u8ff0\u7531\u4e00\u4e2a\u5b57\u4e32\u8f6c\u5316\u6210\u53e6\u4e00\u4e2a\u5b57\u4e32\u6700\u5c11\u7684\u64cd\u4f5c\u6b21\u6570\uff0c\u5728\u5176\u4e2d\u7684\u64cd\u4f5c\u5305\u62ec\u63d2\u5165\u3001\u5220\u9664\u3001\u66ff\u6362\u3002 \u7528\u6cd5\uff1a 1 2 3 4 Levenshtein.distance ( abc , ab ) 1 Levenshtein.distance ( cxy , ab ) 3 Levenshtein.ratio(str1, str2) \u8ba1\u7b97\u83b1\u6587\u65af\u5766\u6bd4\u3002\u8ba1\u7b97\u516c\u5f0f r = (sum - ldist) / sum, \u5176\u4e2dsum\u662f\u6307str1 \u548c str2 \u5b57\u4e32\u7684\u957f\u5ea6\u603b\u548c\uff0cldist\u662f\u7c7b\u7f16\u8f91\u8ddd\u79bb \u6ce8\u610f\uff1a \u8fd9\u91cc\u7684\u7c7b\u7f16\u8f91\u8ddd\u79bb\u4e0d\u662f Levenshtein.distance(str1, str2) \u6240\u8bf4\u7684\u7f16\u8f91\u8ddd\u79bb\uff0c Levenshtein.distance(str1, str2) \u4e2d\u4e09\u79cd\u64cd\u4f5c\u4e2d\u6bcf\u4e2a\u64cd\u4f5c+1\uff0c\u800c\u5728\u6b64\u5904\uff0c\u5220\u9664\u3001\u63d2\u5165\u4f9d\u7136+1\uff0c\u4f46\u662f\u66ff\u6362+2 \u8fd9\u6837\u8bbe\u8ba1\u7684\u76ee\u7684\uff1aratio('a', 'c')\uff0csum=2,\u63092\u4e2d\u8ba1\u7b97\u4e3a\uff082-1\uff09/2 = 0.5,\u2019a','c'\u6ca1\u6709\u91cd\u5408\uff0c\u663e\u7136\u4e0d\u5408\u7b97\uff0c\u4f46\u662f\u66ff\u6362\u64cd\u4f5c+2\uff0c\u5c31\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u7528\u6cd5\uff1a 1 2 Levenshtein.ratio ( a,cdsf , abcd ) 0 .6","title":"Levenshtein"},{"location":"others/calculate_string_similar/#difflib","text":"\u6211\u4e3b\u8981\u7528\u7684\u662f SequenceMatcher \uff0c \u56e0\u6b64\uff0c\u672c\u6b21\u53ea\u4ecb\u7ecd SequenceMatcher . SequenceMatcher \u662f\u53ef\u4ee5\u5bf9\u4e24\u4e2a\u53ef\u5e8f\u5217\u5316\u7684\u5bf9\u8c61\u8fdb\u884c\u6bd4\u8f83\u7684\u7c7b \u5b98\u7f51\u4e0a\u7684\u7528\u6cd5\u662f\uff1a ```shell s = SequenceMatcher(lambda x: x == \" \", ... \"private Thread currentThread;\", ... \"private volatile Thread currentThread;\") print(round(s.ratio(), 3)) 0.866 ``` \u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u4e00\u4e2a\u51fd\u6570\uff0c\u4e3b\u8981\u7528\u6765\u53bb\u6389\u81ea\u5df1\u4e0d\u60f3\u7b97\u5728\u5185\u7684\u5143\u7d20\uff1b\u5982\u679c\u6ca1\u6709\uff0c\u53ef\u4ee5\u5199 None \u540e\u9762\u4e24\u4e2a\u53c2\u6570\u5c31\u662f\u9700\u8981\u6bd4\u8f83\u7684\u4e24\u4e2a\u5bf9\u8c61\u4e86","title":"difflib"},{"location":"others/calculate_string_similar/#_1","text":"\u76f8\u4f3c\u5ea6\u7b97\u6cd5\u4e4b\u4f59\u5f26\u76f8\u4f3c\u5ea6 \u901a\u8fc7\u9605\u8bfb\u4e0a\u9762\u7684\u6587\u7ae0\uff0c\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u603b\u7ed3\u8ba1\u7b97\u76f8\u4f3c\u5ea6\u7684\u51e0\u4e2a\u6b65\u9aa4\uff1a \u5217\u51fa\u6240\u6709\u51fa\u73b0\u7684\u5b57\u6bcd\uff0c\u5e76\u5206\u522b\u7edf\u8ba1\u4e24\u4e2a\u5b57\u7b26\u4e32\u51fa\u73b0\u8fd9\u4e9b\u5b57\u6bcd\u7684\u6b21\u6570\u3002\u8fd9\u91cc\u6211\u662f\u8fd9\u6837\u5199\u7684\uff0c\u5229\u7528 from collections import Counter, OrderedDict \u65b9\u6cd5\uff1a ```shell from collections import Counter, OrderedDict from copy import deepcopy a = 'abc' b = 'bcde' item = set(a) | set(b) item {'b', 'c', 'e', 'd', 'a'} model = OrderedDict().fromkeys(item) model OrderedDict([('b', None), ('c', None), ('e', None), ('d', None), ('a', None)]) model1 = deepcopy(model) model2 = deepcopy(model) model1.update(Counter(a)) model1 OrderedDict([('b', 1), ('c', 1), ('e', None), ('d', None), ('a', 1)]) model2.update(Counter(b)) model2 OrderedDict([('b', 1), ('c', 1), ('e', 1), ('d', 1), ('a', None)]) ``` \u8fd9\u6837\u5199\u7684\u539f\u56e0\u662f\uff0c\u5728\u6bd4\u8f83\u8bcd\u9891\u7684\u65f6\u5019\uff0c\u8981\u4fdd\u8bc1\u6bcf\u4e2a\u5b57\u6bcd\u7684\u987a\u5e8f\u662f\u4e00\u6837\u7684\uff5e \u5229\u7528\u4f59\u5f26\u516c\u5f0f\u8ba1\u7b97\u76f8\u4f3c\u5ea6 \u65b9\u6cd5\uff1a ```shell import math sum = 0 #\u5206\u5b50 q1 = 0 #\u5206\u6bcd q2 = 0 #\u5206\u6bcd for i in item: a = model1[i] if type(model1[i]) != type(None) else 0 b = model2[i] if type(model2[i]) != type(None) else 0 sum += a * b q1 += pow(a, 2) q2 += pow(b, 2) sum 2 q1 3 q2 4 result = float(sum) / (math.sqrt(q1) * math.sqrt(q2)) result 0.5773502691896258 ``` \u8fd9\u6837\u5c31\u7b97\u51fa\u76f8\u4f3c\u5ea6\u5566\uff5e ps\uff1a\u672c\u6587\u8bf4\u7684\u8ba1\u7b97\u7684\u5b57\u7b26\u4e32\uff0c\u5168\u662f\u82f1\u6587\u5b57\u7b26\u4e32\uff5e\uff5e","title":"\u4f59\u5f26\u5b9a\u7406"},{"location":"others/daily_problem/","text":"1. \u5c0f\u6570\u8f6c\u6362\u4e3a\u767e\u5206\u6570 1 2 def change_percent ( num ): return %.2f%% % ( num * 100 ) 2. \u6587\u4ef6\u64cd\u4f5c \u67e5\u770b\u5f53\u524d\u76ee\u5f55 1 os . getcwd () \u6216 1 2 3 from os import path d = path . dirname ( __file__ ) # __file__ \u4e3a\u5f53\u524d\u6587\u4ef6, \u82e5\u679c\u5728ide\u4e2d\u8fd0\u884c\u6b64\u884c\u4f1a\u62a5\u9519,\u53ef\u6539\u4e3a #d = path.dirname( . ) \u83b7\u5f97\u5355\u4e2a\u76ee\u5f55\u8282\u70b9\u7684\u5b50\u8282\u70b9 1 os . listdir ( rootdir ) \u83b7\u53d6\u5f53\u524d\u76ee\u5f55\u4e0b\u7684\u4fe1\u606f 1 2 3 4 5 6 7 8 9 10 for parent , dirnames , filenames in os . walk ( rootdir ): #\u4e09\u4e2a\u53c2\u6570\uff1a\u5206\u522b\u8fd4\u56de1.\u7236\u76ee\u5f55 2.\u6240\u6709\u6587\u4ef6\u5939\u540d\u5b57\uff08\u4e0d\u542b\u8def\u5f84\uff093.\u6240\u6709\u6587\u4ef6\u540d\u5b57 for dirname in dirnames : #\u8f93\u51fa\u6587\u4ef6\u5939\u4fe1\u606f print parent is: + parent print dirname is + dirname for filename in filenames : #\u8f93\u51fa\u6587\u4ef6\u4fe1\u606f print parent is: + parent print filename is: + filename print the full name of the file is: + os . path . join ( parent , filename ) #\u8f93\u51fa\u6587\u4ef6\u8def\u5f84\u4fe1\u606f 3. \u8bfb\u5199csv\u6587\u4ef6 \u5199\u5165 1 2 3 4 5 6 import csv def writer_to_csv ( info ): result_csv = open ( result.csv , a , encoding = utf8 ) writer = csv . writer ( result_csv ) writer . writerow ( info ) result_csv . close () \u8bfb\u51fa 1 2 3 4 5 6 import csv def read_csv ( file ): csv_file = open ( file , r ) reader = csv . reader ( csv_file ) for item in reader : yield item [ 0 ] 4. python3.6\u8bfbini\u914d\u7f6e\u6587\u4ef6 \u8bf4\u660e \uff1apython2.7-3.5\u4f7f\u7528\u7684\u662f ConfigParser \u6a21\u5757 1 import configparser 5. django\u4e4b\u5141\u8bb8\u5916\u90e8\u673a\u5668\u8bbf\u95ee\u672c\u673a\u670d\u52a1 \u5f00\u542fdjango\u670d\u52a1\u65f6\uff0c\u4f7f\u75280.0.0.0:\u7aef\u53e3\u542f\u52a8\uff0c\u4f8b\uff1a 1 ./manage.py runserver 0.0.0.0:9999 \u4fee\u6539setting\u6587\u4ef6\u4e2d\u7684ALLOWED_HOSTS 1 ALLOWED_HOSTS = [ * , ] \u6ce8\u610f\uff1a ['*', ] \u4e00\u5b9a\u8981\u52a0 , 6. Python\u591a\u8fdb\u7a0b\u5e76\u53d1\u64cd\u4f5c\u4e2d\u8fdb\u7a0b\u6c60Pool\u7684\u5e94\u7528 \u8bf4\u660e\uff1a \u4f7f\u7528 Pool \u7c7b\uff0c\u9700\u8981\u901a\u8fc7 from multiprocessing import Pool \u5bfc\u5165\u6c60 join\u65b9\u6cd5\u5fc5\u987b\u5728close\u6216terminate\u4e4b\u540e\u4f7f\u7528\u3002 apply_async() \u51fd\u6570\u539f\u578b\uff1a apply_async(func[, args=()[, kwds={}[,callback=None]]]) \uff0c\u8be5\u65b9\u6cd5\u975e\u963b\u585e\u4e14\u652f\u6301\u7ed3\u679c\u8fd4\u56de\u8fdb\u884c\u56de\u8c03\u3002 \u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import time from multiprocessing import Pool def run ( fn ): # fn: \u51fd\u6570\u53c2\u6570\u662f\u6570\u636e\u5217\u8868\u7684\u4e00\u4e2a\u5143\u7d20 time . sleep ( 1 ) return fn * fn if __name__ == __main__ : testFL = [ 1 , 2 , 3 , 4 , 5 , 6 ] print ( \u987a\u5e8f\u6267\u884c: ) # \u987a\u5e8f\u6267\u884c(\u4e5f\u5c31\u662f\u4e32\u884c\u6267\u884c\uff0c\u5355\u8fdb\u7a0b) s = time . time () for fn in testFL : print ( run ( fn )) e1 = time . time () print ( \u987a\u5e8f\u6267\u884c\u65f6\u95f4\uff1a , int ( e1 - s )) print ( \u591a\u8fdb\u7a0b\u6267\u884c: ) # \u521b\u5efa\u591a\u4e2a\u8fdb\u7a0b\uff0c\u5e76\u884c\u6267\u884c pool = Pool ( 5 ) # \u521b\u5efa\u62e5\u67095\u4e2a\u8fdb\u7a0b\u6570\u91cf\u7684\u8fdb\u7a0b\u6c60 # testFL:\u8981\u5904\u7406\u7684\u6570\u636e\u5217\u8868\uff0crun\uff1a\u5904\u7406testFL\u5217\u8868\u4e2d\u6570\u636e\u7684\u51fd\u6570 # rl = pool.map(run, testFL) for fn in testFL : pool . apply_async ( run , args = ( fn , )) pool . close () # \u5173\u95ed\u8fdb\u7a0b\u6c60\uff0c\u4e0d\u518d\u63a5\u53d7\u65b0\u7684\u8fdb\u7a0b pool . join () # \u4e3b\u8fdb\u7a0b\u963b\u585e\u7b49\u5f85\u5b50\u8fdb\u7a0b\u7684\u9000\u51fa e2 = time . time () print ( \u5e76\u884c\u6267\u884c\u65f6\u95f4\uff1a , int ( e2 - e1 )) # print(rl) \u54cd\u5e94\uff1a 1 2 3 4 5 6 7 8 9 10 \u987a\u5e8f\u6267\u884c: 1 4 9 16 25 36 \u987a\u5e8f\u6267\u884c\u65f6\u95f4\uff1a 6 \u591a\u8fdb\u7a0b\u6267\u884c: \u5e76\u884c\u6267\u884c\u65f6\u95f4\uff1a 2 map() \u51fd\u6570\u539f\u578b\uff1a map(func, iterable[, chunksize=None]) \uff0cPool\u7c7b\u4e2d\u7684map\u65b9\u6cd5\uff0c\u4e0e\u5185\u7f6e\u7684map\u51fd\u6570\u7528\u6cd5\u884c\u4e3a\u57fa\u672c\u4e00\u81f4\uff0c\u5b83\u4f1a\u4f7f\u8fdb\u7a0b\u963b\u585e\u76f4\u5230\u8fd4\u56de\u7ed3\u679c\u3002 \u6ce8\u610f\uff1a \u867d\u7136\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u4f46\u5728\u5b9e\u9645\u4f7f\u7528\u4e2d\uff0c\u5fc5\u987b\u5728\u6574\u4e2a\u961f\u5217\u90fd\u5c31\u7eea\u540e\uff0c\u7a0b\u5e8f\u624d\u4f1a\u8fd0\u884c\u5b50\u8fdb\u7a0b\u3002 \u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import time from multiprocessing import Pool def run ( fn ): # fn: \u51fd\u6570\u53c2\u6570\u662f\u6570\u636e\u5217\u8868\u7684\u4e00\u4e2a\u5143\u7d20 time . sleep ( 1 ) return fn * fn if __name__ == __main__ : testFL = [ 1 , 2 , 3 , 4 , 5 , 6 ] print ( \u987a\u5e8f\u6267\u884c: ) # \u987a\u5e8f\u6267\u884c(\u4e5f\u5c31\u662f\u4e32\u884c\u6267\u884c\uff0c\u5355\u8fdb\u7a0b) s = time . time () for fn in testFL : print ( run ( fn )) e1 = time . time () print ( \u987a\u5e8f\u6267\u884c\u65f6\u95f4\uff1a , int ( e1 - s )) print ( \u591a\u8fdb\u7a0b\u6267\u884c: ) # \u521b\u5efa\u591a\u4e2a\u8fdb\u7a0b\uff0c\u5e76\u884c\u6267\u884c pool = Pool ( 5 ) # \u521b\u5efa\u62e5\u67095\u4e2a\u8fdb\u7a0b\u6570\u91cf\u7684\u8fdb\u7a0b\u6c60 # testFL:\u8981\u5904\u7406\u7684\u6570\u636e\u5217\u8868\uff0crun\uff1a\u5904\u7406testFL\u5217\u8868\u4e2d\u6570\u636e\u7684\u51fd\u6570 rl = pool . map ( run , testFL ) # for fn in testFL: # pool.apply_async(run, args=(fn, )) pool . close () # \u5173\u95ed\u8fdb\u7a0b\u6c60\uff0c\u4e0d\u518d\u63a5\u53d7\u65b0\u7684\u8fdb\u7a0b pool . join () # \u4e3b\u8fdb\u7a0b\u963b\u585e\u7b49\u5f85\u5b50\u8fdb\u7a0b\u7684\u9000\u51fa e2 = time . time () print ( rl ) print ( \u5e76\u884c\u6267\u884c\u65f6\u95f4\uff1a , int ( e2 - e1 )) \u54cd\u5e94\uff1a 1 2 3 4 5 6 7 8 9 10 11 \u987a\u5e8f\u6267\u884c: 1 4 9 16 25 36 \u987a\u5e8f\u6267\u884c\u65f6\u95f4\uff1a 6 \u591a\u8fdb\u7a0b\u6267\u884c: [1, 4, 9, 16, 25, 36] \u5e76\u884c\u6267\u884c\u65f6\u95f4\uff1a 2 7. \u8fdb\u7a0b\u6c60\u4f7f\u7528queue\u961f\u5217 \u6ce8\u610f\uff1a \u8fdb\u7a0b\u6c60\u4f7f\u7528\u961f\u5217\uff0c\u5e94\u4f7f\u7528 Manager \u5bf9\u8c61\u7684Queue 1 2 from multiprocessing import Manager qid_queue = Manager () . Queue () 8. operator.itemgetter() \u8fd4\u56de\u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u4f7f\u7528\u88ab\u64cd\u4f5c\u5143\u7684** __getitem__() \u65b9\u6cd5\u4ece\u5176\u88ab\u64cd\u4f5c\u5143\u83b7\u53d6**\u9879 \u3002\u901a\u8fc7\u8be5\u51fd\u6570\u4f5c\u7528\u5230\u5bf9\u8c61\u4e0a\u624d\u80fd\u83b7\u53d6\u503c\u3002\u5982\u679c\u6307\u5b9a\u4e86\u591a\u4e2a\u9879\uff0c\u5219\u8fd4\u56de\u67e5\u627e\u503c\u7684\u4e00\u7ec4\u3002\u4f8b\u5982: \u5728f = itemgetter(2)\u4e4b\u540e\uff0c\u8c03\u7528f \u8fd4\u56der[2]\u3002 \u5728g = itemgetter(2,5,3)\u4e4b\u540e\uff0c\u8c03\u7528g \u8fd4\u56de(r[2]\uff0c r[5]\uff0c r[3])\u3002 \u7b49\u4ef7\u4e8e: 1 2 3 4 5 6 7 8 9 def itemgetter ( * items ): if len ( items ) == 1 : item = items [ 0 ] def g ( obj ): return obj [ item ] else : def g ( obj ): return tuple ( obj [ item ] for item in items ) return g \u9879\u53ef\u4ee5\u662f\u88ab\u64cd\u4f5c\u5143\u7684** __getitem__() **\u65b9\u6cd5\u6240\u63a5\u53d7\u7684\u4efb\u4f55\u7c7b\u578b\u3002\u5b57\u5178\u63a5\u53d7\u5404\u79cd\u54c8\u5e0c\u503c\uff0c\u5217\u8868\u3001\u5143\u7ec4\u548c\u5b57\u7b26\u4e32\u63a5\u53d7\u7d22\u5f15\u6216\u7247: 1 2 3 4 5 6 itemgetter(1)( ABCDEFG ) B itemgetter(1,3,5)( ABCDEFG ) ( B , D , F ) itemgetter(slice(2,None))( ABCDEFG ) CDEFG \u5728\u7248\u672c2.5\u4e2d\u66f4\u6539:\u6dfb\u52a0\u4e86\u5bf9\u591a\u4e2a\u9879\u76ee\u63d0\u53d6\u7684\u652f\u6301\u3002 \u4f7f\u7528itemgetter()\u4ece\u5143\u7ec4\u8bb0\u5f55\u4e2d\u68c0\u7d22\u7279\u5b9a\u5b57\u6bb5\u7684\u793a\u4f8b: 1 2 3 4 5 6 inventory = [( apple , 3), ( banana , 2), ( pear , 5), ( orange , 1)] getcount = itemgetter(1) map(getcount, inventory) [3, 2, 5, 1] sorted(inventory, key=getcount) [( orange , 1), ( banana , 2), ( apple , 3), ( pear , 5)] 9. sorted()\u5185\u5efa\u51fd\u6570 sort \u4e0e sorted \u533a\u522b\uff1a sort \u662f\u5e94\u7528\u5728 list \u4e0a\u7684\u65b9\u6cd5\uff0csorted \u53ef\u4ee5\u5bf9\u6240\u6709\u53ef\u8fed\u4ee3\u7684\u5bf9\u8c61\u8fdb\u884c\u6392\u5e8f\u64cd\u4f5c\u3002 list \u7684 sort \u65b9\u6cd5\u8fd4\u56de\u7684\u662f\u5bf9\u5df2\u7ecf\u5b58\u5728\u7684\u5217\u8868\u8fdb\u884c\u64cd\u4f5c\uff0c\u800c\u5185\u5efa\u51fd\u6570 sorted \u65b9\u6cd5\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u65b0\u7684 list\uff0c\u800c\u4e0d\u662f\u5728\u539f\u6765\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u7684\u64cd\u4f5c\u3002 sorted \u8bed\u6cd5\uff1a sorted(iterable[, cmp[, key[, reverse]]]) \u53c2\u6570\u8bf4\u660e\uff1a iterable -- \u53ef\u8fed\u4ee3\u5bf9\u8c61\u3002 cmp -- \u6bd4\u8f83\u7684\u51fd\u6570\uff0c\u8fd9\u4e2a\u5177\u6709\u4e24\u4e2a\u53c2\u6570\uff0c\u53c2\u6570\u7684\u503c\u90fd\u662f\u4ece\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u53d6\u51fa\uff0c\u6b64\u51fd\u6570\u5fc5\u987b\u9075\u5b88\u7684\u89c4\u5219\u4e3a\uff0c\u5927\u4e8e\u5219\u8fd4\u56de1\uff0c\u5c0f\u4e8e\u5219\u8fd4\u56de-1\uff0c\u7b49\u4e8e\u5219\u8fd4\u56de0\u3002 key -- \u4e3b\u8981\u662f\u7528\u6765\u8fdb\u884c\u6bd4\u8f83\u7684\u5143\u7d20\uff0c\u53ea\u6709\u4e00\u4e2a\u53c2\u6570\uff0c\u5177\u4f53\u7684\u51fd\u6570\u7684\u53c2\u6570\u5c31\u662f\u53d6\u81ea\u4e8e\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\uff0c\u6307\u5b9a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\u6765\u8fdb\u884c\u6392\u5e8f\u3002 reverse -- \u6392\u5e8f\u89c4\u5219\uff0creverse = True \u964d\u5e8f \uff0c reverse = False \u5347\u5e8f\uff08\u9ed8\u8ba4\uff09\u3002 \u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 a = [5,7,6,3,4,1,2] b = sorted(a) # \u4fdd\u7559\u539f\u5217\u8868 a [5, 7, 6, 3, 4, 1, 2] b [1, 2, 3, 4, 5, 6, 7] L=[( b ,2),( a ,1),( c ,3),( d ,4)] sorted(L, cmp=lambda x,y:cmp(x[1],y[1])) # \u5229\u7528cmp\u51fd\u6570 [( a , 1), ( b , 2), ( c , 3), ( d , 4)] sorted(L, key=lambda x:x[1]) # \u5229\u7528key [( a , 1), ( b , 2), ( c , 3), ( d , 4)] students = [( john , A , 15), ( jane , B , 12), ( dave , B , 10)] sorted(students, key=lambda s: s[2]) # \u6309\u5e74\u9f84\u6392\u5e8f [( dave , B , 10), ( jane , B , 12), ( john , A , 15)] sorted(students, key=lambda s: s[2], reverse=True) # \u6309\u964d\u5e8f [( john , A , 15), ( jane , B , 12), ( dave , B , 10)] \u6ce8\u610f \uff1a\u5efa\u8bae\u4f7f\u7528key\uff0c\u800c\u4e0d\u662fcmp\uff0c\u56e0\u4e3akey\u66f4\u8282\u7701\u5185\u5b58\u7a7a\u95f4 10. python2.7 \u89e3\u51b3UnicodeDecodeError: \u2018ascii\u2019 codec can\u2019t decode byte 0xe5 in position 108: ordinal not in range(128\u3002\u3002\u3002\u3002 \u51fa\u73b0\u9519\u8bef\u539f\u56e0 \uff1a python\u7684str\u9ed8\u8ba4\u662fascii\u7f16\u7801\uff0c\u548cunicode\u7f16\u7801\u51b2\u7a81 \u89e3\u51b3\u65b9\u6848 \uff1a import sys reload(sys) sys.setdefaultencoding('utf8') 11. \u51e0\u4e2a\u6709\u7528\u7684python\u51fd\u6570 (\u7b1b\u5361\u5c14\u79ef, \u6392\u5217, \u7ec4\u5408) product \u7b1b\u5361\u5c14\u79ef permutations \u6392\u5217 combinations \u7ec4\u5408,\u6ca1\u6709\u91cd\u590d combinations_with_replacement \u7ec4\u5408,\u6709\u91cd\u590d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import itertools for i in itertools.product( ABCD , r=2): ... print i, ... ( A , A ) ( A , B ) ( A , C ) ( A , D ) ( B , A ) ( B , B ) ( B , C ) ( B , D ) ( C , A ) ( C , B ) ( C , C ) ( C , D ) ( D , A ) ( D , B ) ( D , C ) ( D , D ) for i in itertools.permutations( ABCD , 2): ... print i, ... ( A , B ) ( A , C ) ( A , D ) ( B , A ) ( B , C ) ( B , D ) ( C , A ) ( C , B ) ( C , D ) ( D , A ) ( D , B ) ( D , C ) for i in itertools.combinations( ABCD , 2): ... print i, ... ( A , B ) ( A , C ) ( A , D ) ( B , C ) ( B , D ) ( C , D ) for i in itertools.combinations_with_replacement( ABCD , 2): ... print i, ... ( A , A ) ( A , B ) ( A , C ) ( A , D ) ( B , B ) ( B , C ) ( B , D ) ( C , C ) ( C , D ) ( D , D ) 12. python\u6c42\u4e24\u4e2a\u94fe\u8868\u7ec4\u6210\u7684\u6570\u5b57\u7684\u548c \u7ed9\u5b9a\u4e24\u4e2a\u975e\u7a7a\u94fe\u8868\u6765\u8868\u793a\u4e24\u4e2a\u975e\u8d1f\u6574\u6570\u3002\u4f4d\u6570\u6309\u7167\u9006\u5e8f\u65b9\u5f0f\u5b58\u50a8\uff0c\u5b83\u4eec\u7684\u6bcf\u4e2a\u8282\u70b9\u53ea\u5b58\u50a8\u5355\u4e2a\u6570\u5b57\u3002\u5c06\u4e24\u6570\u76f8\u52a0\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u5b57\u90fd\u4e0d\u4f1a\u4ee5\u96f6\u5f00\u5934 \u793a\u4f8b\uff1a \u8f93\u5165\uff1a(2 - 4 - 3) + (5 - 6 - 4) \u8f93\u51fa\uff1a7 - 0 - 8 \u539f\u56e0\uff1a342 + 465 = 807 \u4ee3\u7801\u5b9e\u73b0\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None def addTwoNumbers ( self , l1 , l2 ): :type l1: ListNode :type l2: ListNode :rtype: ListNode val_sum = l1 . val + l2 . val list_node = ListNode ( val_sum % 10 ) a = val_sum // 10 node = list_node while True : try : l1 = l1 . next except : pass try : l2 = l2 . next except : pass if not l1 and not l2 : break elif not l1 : l1_val = 0 l2_val = l2 . val elif not l2 : l2_val = 0 l1_val = l1 . val else : l1_val = l1 . val l2_val = l2 . val val_sum = l1_val + l2_val + a temp_node = ListNode ( val_sum % 10 ) node . next = temp_node node = temp_node a = val_sum // 10 if a != 0 : node . next = ListNode ( a ) return list_node 13. python\u5185\u7f6e\u51fd\u6570\u2014\u2014divmod(a, b) v2.7 \u5b9e\u9645\u4e0a\u662f\u7b97a\u9664\u4ee5b\u7684\u5546\u548c\u4f59\u6570\uff0c\u8fd4\u56de(\u5546\uff0c\u4f59\u6570) 1 2 3 4 divmod(1,2) (0, 1) divmod(5, 1) (5, 0) 14. python\u5185\u7f6e\u51fd\u6570\u2014\u2014enumerate(sequence, start=0) 1 2 3 4 5 seasons = [ Spring , Summer , Fall , Winter ] list(enumerate(seasons)) [(0, Spring ), (1, Summer ), (2, Fall ), (3, Winter )] list(enumerate(seasons, start=1)) [(1, Spring ), (2, Summer ), (3, Fall ), (4, Winter )] 15. python\u5185\u7f6e\u51fd\u6570\u2014\u2014filter(function, iterable) v2.7 \u5982\u679cfunction\u662fNone\uff0c\u5c31\u7b49\u4ef7\u4e8e\uff1a [item for item in iterable if item] \u5982\u679cfunction\u4e0d\u662fNone\uff0c\u5c31\u7b49\u4ef7\u4e8e\uff1a [item for item in iterable if function(item)] 16. datetime datetime\u6a21\u5757\u7528\u4e8e\u662fdate\u548ctime\u6a21\u5757\u7684\u5408\u96c6\uff0cdatetime\u6709\u4e24\u4e2a\u5e38\u91cf\uff0cMAXYEAR\u548cMINYEAR\uff0c\u5206\u522b\u662f9999\u548c1. datetime\u6a21\u5757\u5b9a\u4e49\u4e865\u4e2a\u7c7b\uff0c\u5206\u522b\u662f 1. datetime.date\uff1a\u8868\u793a\u65e5\u671f\u7684\u7c7b 2. datetime.datetime\uff1a\u8868\u793a\u65e5\u671f\u65f6\u95f4\u7684\u7c7b 3. datetime.time\uff1a\u8868\u793a\u65f6\u95f4\u7684\u7c7b 4. datetime.timedelta\uff1a\u8868\u793a\u65f6\u95f4\u95f4\u9694\uff0c\u5373\u4e24\u4e2a\u65f6\u95f4\u70b9\u7684\u95f4\u9694 5. datetime.tzinfo\uff1a\u65f6\u533a\u7684\u76f8\u5173\u4fe1\u606f datetime.date\u7c7b date\u7c7b\u6709\u4e09\u4e2a\u53c2\u6570,datetime.date(year,month,day)\uff0c\u8fd4\u56de**datetime.date(2018, 7, 30)** datetime.date.ctime() ,\u8fd4\u56de\u683c\u5f0f\u5982 Sun Apr 16 00:00:00 2017 1 2 datetime.date.ctime(datetime.date(2018, 7, 30)) Mon Jul 30 00:00:00 2018 datetime.date.fromtimestamp(timestamp) ,\u6839\u636e\u7ed9\u5b9a\u7684\u65f6\u95f4\u622e\uff0c\u8fd4\u56de\u4e00\u4e2adate\u5bf9\u8c61\uff1b**datetime.date.today()**\u4f5c\u7528\u76f8\u540c 1 2 datetime.date.today() datetime.date(2018, 7, 30) datetime.date.isocalendar() :\u8fd4\u56de\u683c\u5f0f\u5982(year\uff0cmonth\uff0cday)\u7684\u5143\u7ec4 1 2 datetime.date.isocalendar(datetime.date(2018, 7, 30)) (2018, 31, 1) datetime.date.isoformat() \uff1a\u8fd4\u56de\u683c\u5f0f\u5982YYYY-MM-DD 1 2 datetime.date.isoformat(datetime.date(2018, 7, 30)) 2018-07-30 datetime.date.isoweekday() \uff1a\u8fd4\u56de\u7ed9\u5b9a\u65e5\u671f\u7684\u661f\u671f\uff080-6\uff09\uff0c\u661f\u671f\u4e00=0\uff0c\u661f\u671f\u65e5=6 1 2 datetime.date.isoweekday(datetime.date.today()) 1 datetime.date.replace(year,month,day) \uff1a\u66ff\u6362\u7ed9\u5b9a\u65e5\u671f\uff0c\u4f46\u4e0d\u6539\u53d8\u539f\u65e5\u671f 1 2 3 a = datetime.date.today() a.replace(day=26) datetime.date(2018, 7, 26) datetime.date.strftime(format) :\u628a\u65e5\u671f\u65f6\u95f4\u6309\u7167\u7ed9\u5b9a\u7684format\u8fdb\u884c\u683c\u5f0f\u5316\u3002 1 2 datetime.date.strftime(datetime.date.today(), %Y-%m-%d ) 2018-07-30 1 2 3 4 5 a = datetime.date.today() a datetime.date(2018, 7, 30) a.strftime( %Y-%m-%d ) 2018-07-30 datetime.date.timetuple() \uff1a\u8fd4\u56de\u65e5\u671f\u5bf9\u5e94\u7684time.struct_time\u5bf9\u8c61 ``` a = datetime.date.today() datetime.date.timetuple(a) time.struct_time(tm_year=2018, tm_mon=7, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=211, tm_isdst=-1) 1 - **datetime.date.weekday()**\uff1a\u8fd4\u56de\u65e5\u671f\u7684\u661f\u671f a = datetime.date.today() datetime.date.weekday(a) 0 a.weekday() 0 ``` datetime.time\u7c7b time\u7c7b\u67095\u4e2a\u53c2\u6570\uff0cdatetime.time(hour,minute,second,microsecond,tzoninfo),\u8fd4\u56de08:29:30 datetime.time.replace() 1 2 datetime.time.replace(datetime.time(), hour=1) datetime.time(1, 0) datetime.time.strftime(format) :\u6309\u7167format\u683c\u5f0f\u8fd4\u56de\u65f6\u95f4 1 2 datetime.time.strftime(datetime.time(2,3), %H:%M ) 02:03 datetime.time.tzname() \uff1a\u8fd4\u56de\u65f6\u533a\u540d\u5b57 datetime.time.utcoffset() \uff1a\u8fd4\u56de\u65f6\u533a\u7684\u65f6\u95f4\u504f\u79fb\u91cf datetime.datetime\u7c7b datetime\u7c7b\u6709\u5f88\u591a\u53c2\u6570\uff0cdatetime(year, month, day[, hour[, minute[, second[,microsecond[,tzinfo]]]]])\uff0c\u8fd4\u56de\u5e74\u6708\u65e5\uff0c\u65f6\u5206\u79d2 datetime.datetime.ctime() datetime.datetime.now().date() \uff1a\u8fd4\u56de\u5f53\u524d\u65e5\u671f\u65f6\u95f4\u7684\u65e5\u671f\u90e8\u5206 datetime.datetime.now().time() \uff1a\u8fd4\u56de\u5f53\u524d\u65e5\u671f\u65f6\u95f4\u7684\u65f6\u95f4\u90e8\u5206 datetime.datetime.fromtimestamp() datetime.datetime.now() \uff1a\u8fd4\u56de\u5f53\u524d\u7cfb\u7edf\u65f6\u95f4 datetime.datetime.replace() datetime.datetime.strftime() \uff1a\u7531\u65e5\u671f\u683c\u5f0f\u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32\u683c\u5f0f 1 2 datetime.datetime.now().strftime( %b-%d-%Y %H:%M:%S ) Apr-16-2017 21:01:35 datetime.datetime.strptime() :\u7531\u5b57\u7b26\u4e32\u683c\u5f0f\u8f6c\u5316\u4e3a\u65e5\u671f\u683c\u5f0f 1 2 datetime.datetime.strptime( Apr-16-2017 21:01:35 , %b-%d-%Y %H:%M:%S ) 2017-04-16 21:01:35 datetime.timedelta\u7c7b datetime.datetime.timedelta\u7528\u4e8e\u8ba1\u7b97\u4e24\u4e2a\u65e5\u671f\u4e4b\u95f4\u7684\u5dee\u503c\uff0c\u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 a=datetime.datetime.now() b=datetime.datetime.now() a datetime.datetime(2017, 4, 16, 21, 21, 20, 871000) b datetime.datetime(2017, 4, 16, 21, 21, 29, 603000) b-a datetime.timedelta(0, 8, 732000) (b-a).seconds 8 \u6216\u8005 1 2 3 4 5 6 7 time1 = datetime.datetime(2016, 10, 20) time2 = datetime.datetime(2015, 11, 2) \u8ba1\u7b97\u5929\u6570\u5dee\u503c print(time1-time2).days \u8ba1\u7b97\u4e24\u4e2a\u65e5\u671f\u4e4b\u95f4\u76f8\u9694\u7684\u79d2\u6570 print (time1-time2).total_seconds() 17. \u9488\u5bf9\u201ccould not install packages due to an EnvironmentError: [Errno 13] Permission denied: '/Library/Python/2.7/site-packages/vine'\u201d\u7684\u89e3\u51b3\u65b9\u5f0f 1 pip install --user flask \u5728install\u540e\u52a0 --user 18. \u5b57\u5178\u8f6cxml v2.7 dicttoxml\u4f1a\u81ea\u52a8\u5728\u5934\u90e8\u6dfb\u52a0 ?xml version=\"1.0\" encoding=\"UTF-8\" ? \u5e76\u901a\u8fc7\u53c2\u6570\u8bbe\u7f6exml\u7684\u5c5e\u6027 1 2 import dicttoxml dicttoxml.dicttoxml(self.post_data_dict, root=True, custom_root= request , attr_type=False) 19. or\u548cand \u5982\u679c\u7528or\uff0c\u5e94\u8be5\u628a\u4e3atrue\u7684\u5199\u5728or\u524d\uff0c\u51cf\u5c0f\u8fd0\u7b97\u65f6\u95f4\uff1b \u5982\u679c\u7528and\uff0c\u5e94\u8be5\u628afalse\u7684\u5199\u5728and\u524d 20. xmltodict\u7684\u5751 \u5982\u679cxml\u4e2d\u5728\u540c\u4e00\u7ea7\u6709\u76f8\u540c\u5143\u7d20\uff0c\u5c31\u4f1a\u628a\u76f8\u540c\u5143\u7d20\u53d8\u6210\u5217\u8868\uff1b\u5982\u679c\u6ca1\u6709\u76f8\u540c\u5143\u7d20\uff0c\u90a3\u4e48\u5c31\u628a\u8be5\u5143\u7d20\u53d8\u4e3a\u5b57\u5178 \u5bf9\u4e8exml\u4e2d\u4e3a\u7a7a\u7684\u60c5\u51b5\uff0cxmltodict\u4f1a\u81ea\u52a8\u5c06\u503c\u53d8\u4e3a None 21. \u5217\u8868\u751f\u6210\u5f0f\u4e2d\u7684if-else \u53ea\u6709if 1 [a for a in a_list if a==1] - if-else 1 [a if a==1 else a-1 for a in a_list] 22. \u9488\u5bf9MySQL said: Authentication plugin 'caching_sha2_password' cannot be loaded: dlopen(/usr/local/...\u7684\u95ee\u9898 \u5728\u4f7f\u7528MySQL Workbench\u8fde\u63a5\u672c\u5730\u6570\u636e\u5e93\u7684\u65f6\u5019\uff0c\u51fa\u73b0\u4e86 1 MySQL said: Authentication plugin caching_sha2_password cannot be loaded: dlopen(/usr/local/lib/plugin/caching_sha2_password.so, 2): image not found \u8fd9\u662f\u56e0\u4e3a\u5728\u94fe\u63a5\u6570\u636e\u5e93\u65f6\u4e0d\u80fd\u52a0\u8f7d\u2018caching_sha2_password'\u8fd9\u4e2a\u63d2\u4ef6\uff0c\u4e5f\u5c31\u662f\u4e0d\u80fd\u5bf9\u8eab\u4efd\u9a8c\u8bc1\u3002 \u89e3\u51b3\u65b9\u6848\u662f\uff1a 1. \u6253\u5f00\u7cfb\u7edf\u504f\u597d\u8bbe\u7f6e\uff0c\u627e\u5230mysql\uff0c\u70b9\u51fbInitialize Database\u3002 2. \u8f93\u5165\u4f60\u7684\u65b0\u5bc6\u7801\uff0c\u8bb0\u4f4f\u8fd9\u4e2a\u5bc6\u7801\uff0c\u7528\u4e8e\u540e\u671f\u94fe\u63a5\u6570\u636e\u5e93\u7684\u767b\u9646\u4f7f\u7528\u3002 3. \u9009\u62e9\u2018Use legacy password\u2018\u3002 4. \u91cd\u542fmysql\u670d\u52a1\u3002 \u8fd9\u6837\u5728\u8fde\u63a5\u5c31\u6ca1\u6709\u95ee\u9898\u4e86 23. django model\u83b7\u53d6\u7279\u5b9a\u5b57\u6bb5 1 comment_list = Comment.objects.all()[:5].only( post , text ) # \u53ea\u83b7\u53d6\u7279\u5b9a\u5b57\u6bb5 24. Connection reset by peer\u7684\u5e38\u89c1\u539f\u56e0 Connection reset by peer: socket write error\u9519\u8bef\u5206\u6790\uff1a \u5e38\u51fa\u73b0\u7684Connection reset by peer: \u539f\u56e0\u53ef\u80fd\u662f\u591a\u65b9\u9762\u7684\uff0c\u4e0d\u8fc7\u66f4\u5e38\u89c1\u7684\u539f\u56e0\u662f\uff1a \u2460\uff1a\u670d\u52a1\u5668\u7684\u5e76\u53d1\u8fde\u63a5\u6570\u8d85\u8fc7\u4e86\u5176\u627f\u8f7d\u91cf\uff0c\u670d\u52a1\u5668\u4f1a\u5c06\u5176\u4e2d\u4e00\u4e9b\u8fde\u63a5Down\u6389\uff1b \u2461\uff1a\u5ba2\u6237\u5173\u6389\u4e86\u6d4f\u89c8\u5668\uff0c\u800c\u670d\u52a1\u5668\u8fd8\u5728\u7ed9\u5ba2\u6237\u7aef\u53d1\u9001\u6570\u636e\uff1b \u2462\uff1a\u6d4f\u89c8\u5668\u7aef\u6309\u4e86Stop \u901a\u5e38\u539f\u56e0\u4e3a\uff1a\u8fdc\u7a0b\u4e3b\u673a\u4e0a\u5bf9\u7b49\u65b9\u5e94\u7528\u7a0b\u5e8f\u7a81\u7136\u505c\u6b62\u8fd0\u884c\uff0c\u6216\u8fdc\u7a0b\u4e3b\u673a\u91cd\u65b0\u542f\u52a8\uff0c\u6216\u8fdc\u7a0b\u4e3b\u673a\u5728\u8fdc\u7a0b\u65b9\u5957\u63a5\u5b57\u4e0a\u4f7f\u7528\u4e86\u201c\u5f3a\u5236\u201d\u5173\u95ed \uff08\u53c2\u89c1setsockopt(SO_LINGER)\uff09\u3002\u53e6\u5916\uff0c\u5728\u4e00\u4e2a\u6216\u591a\u4e2a\u64cd\u4f5c\u6b63\u5728\u8fdb\u884c\u65f6\uff0c\u5982\u679c\u8fde\u63a5\u56e0\u201ckeep-alive\u201d\u6d3b\u52a8\u68c0\u6d4b\u5230\u4e00\u4e2a\u5931\u8d25\u800c\u4e2d \u65ad\uff0c\u4e5f\u53ef\u80fd\u5bfc\u81f4\u6b64\u9519\u8bef\u3002\u6b64\u65f6\uff0c\u6b63\u5728\u8fdb\u884c\u7684\u64cd\u4f5c\u4ee5\u9519\u8bef\u7801WSAENETRESET\u5931\u8d25\u8fd4\u56de\uff0c\u540e\u7eed\u64cd\u4f5c\u5c06\u5931\u8d25\u8fd4\u56de\u9519\u8bef\u7801WSAECONNRESET\u3002 \u4f46\u662f\u5982\u679c\u9891\u7e41\u51fa\u73b0\uff0c\u5c31\u8868\u793a\u5f88 \u591a\u5ba2\u6237\u7aef\u8fde\u63a5\u5230Apache\u670d\u52a1\u5668\u7684\u54cd\u5e94\u65f6\u95f4\u592a\u957f\u4e86\uff0c\u53ef\u80fd\u662f\u7f51\u7edc\u7684\u95ee\u9898\u6216\u8005\u670d\u52a1\u5668\u6027\u80fd\u95ee\u9898\u3002","title":"\u4e03\u4e03\u516b\u516b"},{"location":"others/daily_problem/#1","text":"1 2 def change_percent ( num ): return %.2f%% % ( num * 100 )","title":"1. \u5c0f\u6570\u8f6c\u6362\u4e3a\u767e\u5206\u6570"},{"location":"others/daily_problem/#2","text":"\u67e5\u770b\u5f53\u524d\u76ee\u5f55 1 os . getcwd () \u6216 1 2 3 from os import path d = path . dirname ( __file__ ) # __file__ \u4e3a\u5f53\u524d\u6587\u4ef6, \u82e5\u679c\u5728ide\u4e2d\u8fd0\u884c\u6b64\u884c\u4f1a\u62a5\u9519,\u53ef\u6539\u4e3a #d = path.dirname( . ) \u83b7\u5f97\u5355\u4e2a\u76ee\u5f55\u8282\u70b9\u7684\u5b50\u8282\u70b9 1 os . listdir ( rootdir ) \u83b7\u53d6\u5f53\u524d\u76ee\u5f55\u4e0b\u7684\u4fe1\u606f 1 2 3 4 5 6 7 8 9 10 for parent , dirnames , filenames in os . walk ( rootdir ): #\u4e09\u4e2a\u53c2\u6570\uff1a\u5206\u522b\u8fd4\u56de1.\u7236\u76ee\u5f55 2.\u6240\u6709\u6587\u4ef6\u5939\u540d\u5b57\uff08\u4e0d\u542b\u8def\u5f84\uff093.\u6240\u6709\u6587\u4ef6\u540d\u5b57 for dirname in dirnames : #\u8f93\u51fa\u6587\u4ef6\u5939\u4fe1\u606f print parent is: + parent print dirname is + dirname for filename in filenames : #\u8f93\u51fa\u6587\u4ef6\u4fe1\u606f print parent is: + parent print filename is: + filename print the full name of the file is: + os . path . join ( parent , filename ) #\u8f93\u51fa\u6587\u4ef6\u8def\u5f84\u4fe1\u606f","title":"2. \u6587\u4ef6\u64cd\u4f5c"},{"location":"others/daily_problem/#3-csv","text":"\u5199\u5165 1 2 3 4 5 6 import csv def writer_to_csv ( info ): result_csv = open ( result.csv , a , encoding = utf8 ) writer = csv . writer ( result_csv ) writer . writerow ( info ) result_csv . close () \u8bfb\u51fa 1 2 3 4 5 6 import csv def read_csv ( file ): csv_file = open ( file , r ) reader = csv . reader ( csv_file ) for item in reader : yield item [ 0 ]","title":"3. \u8bfb\u5199csv\u6587\u4ef6"},{"location":"others/daily_problem/#4-python36ini","text":"\u8bf4\u660e \uff1apython2.7-3.5\u4f7f\u7528\u7684\u662f ConfigParser \u6a21\u5757 1 import configparser","title":"4. python3.6\u8bfbini\u914d\u7f6e\u6587\u4ef6"},{"location":"others/daily_problem/#5-django","text":"\u5f00\u542fdjango\u670d\u52a1\u65f6\uff0c\u4f7f\u75280.0.0.0:\u7aef\u53e3\u542f\u52a8\uff0c\u4f8b\uff1a 1 ./manage.py runserver 0.0.0.0:9999 \u4fee\u6539setting\u6587\u4ef6\u4e2d\u7684ALLOWED_HOSTS 1 ALLOWED_HOSTS = [ * , ] \u6ce8\u610f\uff1a ['*', ] \u4e00\u5b9a\u8981\u52a0 ,","title":"5. django\u4e4b\u5141\u8bb8\u5916\u90e8\u673a\u5668\u8bbf\u95ee\u672c\u673a\u670d\u52a1"},{"location":"others/daily_problem/#6-pythonpool","text":"\u8bf4\u660e\uff1a \u4f7f\u7528 Pool \u7c7b\uff0c\u9700\u8981\u901a\u8fc7 from multiprocessing import Pool \u5bfc\u5165\u6c60 join\u65b9\u6cd5\u5fc5\u987b\u5728close\u6216terminate\u4e4b\u540e\u4f7f\u7528\u3002 apply_async() \u51fd\u6570\u539f\u578b\uff1a apply_async(func[, args=()[, kwds={}[,callback=None]]]) \uff0c\u8be5\u65b9\u6cd5\u975e\u963b\u585e\u4e14\u652f\u6301\u7ed3\u679c\u8fd4\u56de\u8fdb\u884c\u56de\u8c03\u3002 \u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import time from multiprocessing import Pool def run ( fn ): # fn: \u51fd\u6570\u53c2\u6570\u662f\u6570\u636e\u5217\u8868\u7684\u4e00\u4e2a\u5143\u7d20 time . sleep ( 1 ) return fn * fn if __name__ == __main__ : testFL = [ 1 , 2 , 3 , 4 , 5 , 6 ] print ( \u987a\u5e8f\u6267\u884c: ) # \u987a\u5e8f\u6267\u884c(\u4e5f\u5c31\u662f\u4e32\u884c\u6267\u884c\uff0c\u5355\u8fdb\u7a0b) s = time . time () for fn in testFL : print ( run ( fn )) e1 = time . time () print ( \u987a\u5e8f\u6267\u884c\u65f6\u95f4\uff1a , int ( e1 - s )) print ( \u591a\u8fdb\u7a0b\u6267\u884c: ) # \u521b\u5efa\u591a\u4e2a\u8fdb\u7a0b\uff0c\u5e76\u884c\u6267\u884c pool = Pool ( 5 ) # \u521b\u5efa\u62e5\u67095\u4e2a\u8fdb\u7a0b\u6570\u91cf\u7684\u8fdb\u7a0b\u6c60 # testFL:\u8981\u5904\u7406\u7684\u6570\u636e\u5217\u8868\uff0crun\uff1a\u5904\u7406testFL\u5217\u8868\u4e2d\u6570\u636e\u7684\u51fd\u6570 # rl = pool.map(run, testFL) for fn in testFL : pool . apply_async ( run , args = ( fn , )) pool . close () # \u5173\u95ed\u8fdb\u7a0b\u6c60\uff0c\u4e0d\u518d\u63a5\u53d7\u65b0\u7684\u8fdb\u7a0b pool . join () # \u4e3b\u8fdb\u7a0b\u963b\u585e\u7b49\u5f85\u5b50\u8fdb\u7a0b\u7684\u9000\u51fa e2 = time . time () print ( \u5e76\u884c\u6267\u884c\u65f6\u95f4\uff1a , int ( e2 - e1 )) # print(rl) \u54cd\u5e94\uff1a 1 2 3 4 5 6 7 8 9 10 \u987a\u5e8f\u6267\u884c: 1 4 9 16 25 36 \u987a\u5e8f\u6267\u884c\u65f6\u95f4\uff1a 6 \u591a\u8fdb\u7a0b\u6267\u884c: \u5e76\u884c\u6267\u884c\u65f6\u95f4\uff1a 2 map() \u51fd\u6570\u539f\u578b\uff1a map(func, iterable[, chunksize=None]) \uff0cPool\u7c7b\u4e2d\u7684map\u65b9\u6cd5\uff0c\u4e0e\u5185\u7f6e\u7684map\u51fd\u6570\u7528\u6cd5\u884c\u4e3a\u57fa\u672c\u4e00\u81f4\uff0c\u5b83\u4f1a\u4f7f\u8fdb\u7a0b\u963b\u585e\u76f4\u5230\u8fd4\u56de\u7ed3\u679c\u3002 \u6ce8\u610f\uff1a \u867d\u7136\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u4f46\u5728\u5b9e\u9645\u4f7f\u7528\u4e2d\uff0c\u5fc5\u987b\u5728\u6574\u4e2a\u961f\u5217\u90fd\u5c31\u7eea\u540e\uff0c\u7a0b\u5e8f\u624d\u4f1a\u8fd0\u884c\u5b50\u8fdb\u7a0b\u3002 \u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import time from multiprocessing import Pool def run ( fn ): # fn: \u51fd\u6570\u53c2\u6570\u662f\u6570\u636e\u5217\u8868\u7684\u4e00\u4e2a\u5143\u7d20 time . sleep ( 1 ) return fn * fn if __name__ == __main__ : testFL = [ 1 , 2 , 3 , 4 , 5 , 6 ] print ( \u987a\u5e8f\u6267\u884c: ) # \u987a\u5e8f\u6267\u884c(\u4e5f\u5c31\u662f\u4e32\u884c\u6267\u884c\uff0c\u5355\u8fdb\u7a0b) s = time . time () for fn in testFL : print ( run ( fn )) e1 = time . time () print ( \u987a\u5e8f\u6267\u884c\u65f6\u95f4\uff1a , int ( e1 - s )) print ( \u591a\u8fdb\u7a0b\u6267\u884c: ) # \u521b\u5efa\u591a\u4e2a\u8fdb\u7a0b\uff0c\u5e76\u884c\u6267\u884c pool = Pool ( 5 ) # \u521b\u5efa\u62e5\u67095\u4e2a\u8fdb\u7a0b\u6570\u91cf\u7684\u8fdb\u7a0b\u6c60 # testFL:\u8981\u5904\u7406\u7684\u6570\u636e\u5217\u8868\uff0crun\uff1a\u5904\u7406testFL\u5217\u8868\u4e2d\u6570\u636e\u7684\u51fd\u6570 rl = pool . map ( run , testFL ) # for fn in testFL: # pool.apply_async(run, args=(fn, )) pool . close () # \u5173\u95ed\u8fdb\u7a0b\u6c60\uff0c\u4e0d\u518d\u63a5\u53d7\u65b0\u7684\u8fdb\u7a0b pool . join () # \u4e3b\u8fdb\u7a0b\u963b\u585e\u7b49\u5f85\u5b50\u8fdb\u7a0b\u7684\u9000\u51fa e2 = time . time () print ( rl ) print ( \u5e76\u884c\u6267\u884c\u65f6\u95f4\uff1a , int ( e2 - e1 )) \u54cd\u5e94\uff1a 1 2 3 4 5 6 7 8 9 10 11 \u987a\u5e8f\u6267\u884c: 1 4 9 16 25 36 \u987a\u5e8f\u6267\u884c\u65f6\u95f4\uff1a 6 \u591a\u8fdb\u7a0b\u6267\u884c: [1, 4, 9, 16, 25, 36] \u5e76\u884c\u6267\u884c\u65f6\u95f4\uff1a 2","title":"6. Python\u591a\u8fdb\u7a0b\u5e76\u53d1\u64cd\u4f5c\u4e2d\u8fdb\u7a0b\u6c60Pool\u7684\u5e94\u7528"},{"location":"others/daily_problem/#7-queue","text":"\u6ce8\u610f\uff1a \u8fdb\u7a0b\u6c60\u4f7f\u7528\u961f\u5217\uff0c\u5e94\u4f7f\u7528 Manager \u5bf9\u8c61\u7684Queue 1 2 from multiprocessing import Manager qid_queue = Manager () . Queue ()","title":"7. \u8fdb\u7a0b\u6c60\u4f7f\u7528queue\u961f\u5217"},{"location":"others/daily_problem/#8-operatoritemgetter","text":"\u8fd4\u56de\u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u4f7f\u7528\u88ab\u64cd\u4f5c\u5143\u7684** __getitem__() \u65b9\u6cd5\u4ece\u5176\u88ab\u64cd\u4f5c\u5143\u83b7\u53d6**\u9879 \u3002\u901a\u8fc7\u8be5\u51fd\u6570\u4f5c\u7528\u5230\u5bf9\u8c61\u4e0a\u624d\u80fd\u83b7\u53d6\u503c\u3002\u5982\u679c\u6307\u5b9a\u4e86\u591a\u4e2a\u9879\uff0c\u5219\u8fd4\u56de\u67e5\u627e\u503c\u7684\u4e00\u7ec4\u3002\u4f8b\u5982: \u5728f = itemgetter(2)\u4e4b\u540e\uff0c\u8c03\u7528f \u8fd4\u56der[2]\u3002 \u5728g = itemgetter(2,5,3)\u4e4b\u540e\uff0c\u8c03\u7528g \u8fd4\u56de(r[2]\uff0c r[5]\uff0c r[3])\u3002 \u7b49\u4ef7\u4e8e: 1 2 3 4 5 6 7 8 9 def itemgetter ( * items ): if len ( items ) == 1 : item = items [ 0 ] def g ( obj ): return obj [ item ] else : def g ( obj ): return tuple ( obj [ item ] for item in items ) return g \u9879\u53ef\u4ee5\u662f\u88ab\u64cd\u4f5c\u5143\u7684** __getitem__() **\u65b9\u6cd5\u6240\u63a5\u53d7\u7684\u4efb\u4f55\u7c7b\u578b\u3002\u5b57\u5178\u63a5\u53d7\u5404\u79cd\u54c8\u5e0c\u503c\uff0c\u5217\u8868\u3001\u5143\u7ec4\u548c\u5b57\u7b26\u4e32\u63a5\u53d7\u7d22\u5f15\u6216\u7247: 1 2 3 4 5 6 itemgetter(1)( ABCDEFG ) B itemgetter(1,3,5)( ABCDEFG ) ( B , D , F ) itemgetter(slice(2,None))( ABCDEFG ) CDEFG \u5728\u7248\u672c2.5\u4e2d\u66f4\u6539:\u6dfb\u52a0\u4e86\u5bf9\u591a\u4e2a\u9879\u76ee\u63d0\u53d6\u7684\u652f\u6301\u3002 \u4f7f\u7528itemgetter()\u4ece\u5143\u7ec4\u8bb0\u5f55\u4e2d\u68c0\u7d22\u7279\u5b9a\u5b57\u6bb5\u7684\u793a\u4f8b: 1 2 3 4 5 6 inventory = [( apple , 3), ( banana , 2), ( pear , 5), ( orange , 1)] getcount = itemgetter(1) map(getcount, inventory) [3, 2, 5, 1] sorted(inventory, key=getcount) [( orange , 1), ( banana , 2), ( apple , 3), ( pear , 5)]","title":"8. operator.itemgetter()"},{"location":"others/daily_problem/#9-sorted","text":"sort \u4e0e sorted \u533a\u522b\uff1a sort \u662f\u5e94\u7528\u5728 list \u4e0a\u7684\u65b9\u6cd5\uff0csorted \u53ef\u4ee5\u5bf9\u6240\u6709\u53ef\u8fed\u4ee3\u7684\u5bf9\u8c61\u8fdb\u884c\u6392\u5e8f\u64cd\u4f5c\u3002 list \u7684 sort \u65b9\u6cd5\u8fd4\u56de\u7684\u662f\u5bf9\u5df2\u7ecf\u5b58\u5728\u7684\u5217\u8868\u8fdb\u884c\u64cd\u4f5c\uff0c\u800c\u5185\u5efa\u51fd\u6570 sorted \u65b9\u6cd5\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u65b0\u7684 list\uff0c\u800c\u4e0d\u662f\u5728\u539f\u6765\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u7684\u64cd\u4f5c\u3002 sorted \u8bed\u6cd5\uff1a sorted(iterable[, cmp[, key[, reverse]]]) \u53c2\u6570\u8bf4\u660e\uff1a iterable -- \u53ef\u8fed\u4ee3\u5bf9\u8c61\u3002 cmp -- \u6bd4\u8f83\u7684\u51fd\u6570\uff0c\u8fd9\u4e2a\u5177\u6709\u4e24\u4e2a\u53c2\u6570\uff0c\u53c2\u6570\u7684\u503c\u90fd\u662f\u4ece\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u53d6\u51fa\uff0c\u6b64\u51fd\u6570\u5fc5\u987b\u9075\u5b88\u7684\u89c4\u5219\u4e3a\uff0c\u5927\u4e8e\u5219\u8fd4\u56de1\uff0c\u5c0f\u4e8e\u5219\u8fd4\u56de-1\uff0c\u7b49\u4e8e\u5219\u8fd4\u56de0\u3002 key -- \u4e3b\u8981\u662f\u7528\u6765\u8fdb\u884c\u6bd4\u8f83\u7684\u5143\u7d20\uff0c\u53ea\u6709\u4e00\u4e2a\u53c2\u6570\uff0c\u5177\u4f53\u7684\u51fd\u6570\u7684\u53c2\u6570\u5c31\u662f\u53d6\u81ea\u4e8e\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\uff0c\u6307\u5b9a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\u6765\u8fdb\u884c\u6392\u5e8f\u3002 reverse -- \u6392\u5e8f\u89c4\u5219\uff0creverse = True \u964d\u5e8f \uff0c reverse = False \u5347\u5e8f\uff08\u9ed8\u8ba4\uff09\u3002 \u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 a = [5,7,6,3,4,1,2] b = sorted(a) # \u4fdd\u7559\u539f\u5217\u8868 a [5, 7, 6, 3, 4, 1, 2] b [1, 2, 3, 4, 5, 6, 7] L=[( b ,2),( a ,1),( c ,3),( d ,4)] sorted(L, cmp=lambda x,y:cmp(x[1],y[1])) # \u5229\u7528cmp\u51fd\u6570 [( a , 1), ( b , 2), ( c , 3), ( d , 4)] sorted(L, key=lambda x:x[1]) # \u5229\u7528key [( a , 1), ( b , 2), ( c , 3), ( d , 4)] students = [( john , A , 15), ( jane , B , 12), ( dave , B , 10)] sorted(students, key=lambda s: s[2]) # \u6309\u5e74\u9f84\u6392\u5e8f [( dave , B , 10), ( jane , B , 12), ( john , A , 15)] sorted(students, key=lambda s: s[2], reverse=True) # \u6309\u964d\u5e8f [( john , A , 15), ( jane , B , 12), ( dave , B , 10)] \u6ce8\u610f \uff1a\u5efa\u8bae\u4f7f\u7528key\uff0c\u800c\u4e0d\u662fcmp\uff0c\u56e0\u4e3akey\u66f4\u8282\u7701\u5185\u5b58\u7a7a\u95f4","title":"9. sorted()\u5185\u5efa\u51fd\u6570"},{"location":"others/daily_problem/#10-python27-unicodedecodeerror-ascii-codec-cant-decode-byte-0xe5-in-position-108-ordinal-not-in-range128","text":"\u51fa\u73b0\u9519\u8bef\u539f\u56e0 \uff1a python\u7684str\u9ed8\u8ba4\u662fascii\u7f16\u7801\uff0c\u548cunicode\u7f16\u7801\u51b2\u7a81 \u89e3\u51b3\u65b9\u6848 \uff1a import sys reload(sys) sys.setdefaultencoding('utf8')","title":"10. python2.7 \u89e3\u51b3UnicodeDecodeError: \u2018ascii\u2019 codec can\u2019t decode byte 0xe5 in position 108: ordinal not in range(128\u3002\u3002\u3002\u3002"},{"location":"others/daily_problem/#11-python","text":"product \u7b1b\u5361\u5c14\u79ef permutations \u6392\u5217 combinations \u7ec4\u5408,\u6ca1\u6709\u91cd\u590d combinations_with_replacement \u7ec4\u5408,\u6709\u91cd\u590d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import itertools for i in itertools.product( ABCD , r=2): ... print i, ... ( A , A ) ( A , B ) ( A , C ) ( A , D ) ( B , A ) ( B , B ) ( B , C ) ( B , D ) ( C , A ) ( C , B ) ( C , C ) ( C , D ) ( D , A ) ( D , B ) ( D , C ) ( D , D ) for i in itertools.permutations( ABCD , 2): ... print i, ... ( A , B ) ( A , C ) ( A , D ) ( B , A ) ( B , C ) ( B , D ) ( C , A ) ( C , B ) ( C , D ) ( D , A ) ( D , B ) ( D , C ) for i in itertools.combinations( ABCD , 2): ... print i, ... ( A , B ) ( A , C ) ( A , D ) ( B , C ) ( B , D ) ( C , D ) for i in itertools.combinations_with_replacement( ABCD , 2): ... print i, ... ( A , A ) ( A , B ) ( A , C ) ( A , D ) ( B , B ) ( B , C ) ( B , D ) ( C , C ) ( C , D ) ( D , D )","title":"11. \u51e0\u4e2a\u6709\u7528\u7684python\u51fd\u6570 (\u7b1b\u5361\u5c14\u79ef, \u6392\u5217, \u7ec4\u5408)"},{"location":"others/daily_problem/#12-python","text":"\u7ed9\u5b9a\u4e24\u4e2a\u975e\u7a7a\u94fe\u8868\u6765\u8868\u793a\u4e24\u4e2a\u975e\u8d1f\u6574\u6570\u3002\u4f4d\u6570\u6309\u7167\u9006\u5e8f\u65b9\u5f0f\u5b58\u50a8\uff0c\u5b83\u4eec\u7684\u6bcf\u4e2a\u8282\u70b9\u53ea\u5b58\u50a8\u5355\u4e2a\u6570\u5b57\u3002\u5c06\u4e24\u6570\u76f8\u52a0\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u5b57\u90fd\u4e0d\u4f1a\u4ee5\u96f6\u5f00\u5934 \u793a\u4f8b\uff1a \u8f93\u5165\uff1a(2 - 4 - 3) + (5 - 6 - 4) \u8f93\u51fa\uff1a7 - 0 - 8 \u539f\u56e0\uff1a342 + 465 = 807 \u4ee3\u7801\u5b9e\u73b0\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None def addTwoNumbers ( self , l1 , l2 ): :type l1: ListNode :type l2: ListNode :rtype: ListNode val_sum = l1 . val + l2 . val list_node = ListNode ( val_sum % 10 ) a = val_sum // 10 node = list_node while True : try : l1 = l1 . next except : pass try : l2 = l2 . next except : pass if not l1 and not l2 : break elif not l1 : l1_val = 0 l2_val = l2 . val elif not l2 : l2_val = 0 l1_val = l1 . val else : l1_val = l1 . val l2_val = l2 . val val_sum = l1_val + l2_val + a temp_node = ListNode ( val_sum % 10 ) node . next = temp_node node = temp_node a = val_sum // 10 if a != 0 : node . next = ListNode ( a ) return list_node","title":"12. python\u6c42\u4e24\u4e2a\u94fe\u8868\u7ec4\u6210\u7684\u6570\u5b57\u7684\u548c"},{"location":"others/daily_problem/#13-pythondivmoda-b","text":"v2.7 \u5b9e\u9645\u4e0a\u662f\u7b97a\u9664\u4ee5b\u7684\u5546\u548c\u4f59\u6570\uff0c\u8fd4\u56de(\u5546\uff0c\u4f59\u6570) 1 2 3 4 divmod(1,2) (0, 1) divmod(5, 1) (5, 0)","title":"13. python\u5185\u7f6e\u51fd\u6570\u2014\u2014divmod(a, b)"},{"location":"others/daily_problem/#14-pythonenumeratesequence-start0","text":"1 2 3 4 5 seasons = [ Spring , Summer , Fall , Winter ] list(enumerate(seasons)) [(0, Spring ), (1, Summer ), (2, Fall ), (3, Winter )] list(enumerate(seasons, start=1)) [(1, Spring ), (2, Summer ), (3, Fall ), (4, Winter )]","title":"14. python\u5185\u7f6e\u51fd\u6570\u2014\u2014enumerate(sequence, start=0)"},{"location":"others/daily_problem/#15-pythonfilterfunction-iterable","text":"v2.7 \u5982\u679cfunction\u662fNone\uff0c\u5c31\u7b49\u4ef7\u4e8e\uff1a [item for item in iterable if item] \u5982\u679cfunction\u4e0d\u662fNone\uff0c\u5c31\u7b49\u4ef7\u4e8e\uff1a [item for item in iterable if function(item)]","title":"15. python\u5185\u7f6e\u51fd\u6570\u2014\u2014filter(function, iterable)"},{"location":"others/daily_problem/#16-datetime","text":"datetime\u6a21\u5757\u7528\u4e8e\u662fdate\u548ctime\u6a21\u5757\u7684\u5408\u96c6\uff0cdatetime\u6709\u4e24\u4e2a\u5e38\u91cf\uff0cMAXYEAR\u548cMINYEAR\uff0c\u5206\u522b\u662f9999\u548c1. datetime\u6a21\u5757\u5b9a\u4e49\u4e865\u4e2a\u7c7b\uff0c\u5206\u522b\u662f 1. datetime.date\uff1a\u8868\u793a\u65e5\u671f\u7684\u7c7b 2. datetime.datetime\uff1a\u8868\u793a\u65e5\u671f\u65f6\u95f4\u7684\u7c7b 3. datetime.time\uff1a\u8868\u793a\u65f6\u95f4\u7684\u7c7b 4. datetime.timedelta\uff1a\u8868\u793a\u65f6\u95f4\u95f4\u9694\uff0c\u5373\u4e24\u4e2a\u65f6\u95f4\u70b9\u7684\u95f4\u9694 5. datetime.tzinfo\uff1a\u65f6\u533a\u7684\u76f8\u5173\u4fe1\u606f datetime.date\u7c7b date\u7c7b\u6709\u4e09\u4e2a\u53c2\u6570,datetime.date(year,month,day)\uff0c\u8fd4\u56de**datetime.date(2018, 7, 30)** datetime.date.ctime() ,\u8fd4\u56de\u683c\u5f0f\u5982 Sun Apr 16 00:00:00 2017 1 2 datetime.date.ctime(datetime.date(2018, 7, 30)) Mon Jul 30 00:00:00 2018 datetime.date.fromtimestamp(timestamp) ,\u6839\u636e\u7ed9\u5b9a\u7684\u65f6\u95f4\u622e\uff0c\u8fd4\u56de\u4e00\u4e2adate\u5bf9\u8c61\uff1b**datetime.date.today()**\u4f5c\u7528\u76f8\u540c 1 2 datetime.date.today() datetime.date(2018, 7, 30) datetime.date.isocalendar() :\u8fd4\u56de\u683c\u5f0f\u5982(year\uff0cmonth\uff0cday)\u7684\u5143\u7ec4 1 2 datetime.date.isocalendar(datetime.date(2018, 7, 30)) (2018, 31, 1) datetime.date.isoformat() \uff1a\u8fd4\u56de\u683c\u5f0f\u5982YYYY-MM-DD 1 2 datetime.date.isoformat(datetime.date(2018, 7, 30)) 2018-07-30 datetime.date.isoweekday() \uff1a\u8fd4\u56de\u7ed9\u5b9a\u65e5\u671f\u7684\u661f\u671f\uff080-6\uff09\uff0c\u661f\u671f\u4e00=0\uff0c\u661f\u671f\u65e5=6 1 2 datetime.date.isoweekday(datetime.date.today()) 1 datetime.date.replace(year,month,day) \uff1a\u66ff\u6362\u7ed9\u5b9a\u65e5\u671f\uff0c\u4f46\u4e0d\u6539\u53d8\u539f\u65e5\u671f 1 2 3 a = datetime.date.today() a.replace(day=26) datetime.date(2018, 7, 26) datetime.date.strftime(format) :\u628a\u65e5\u671f\u65f6\u95f4\u6309\u7167\u7ed9\u5b9a\u7684format\u8fdb\u884c\u683c\u5f0f\u5316\u3002 1 2 datetime.date.strftime(datetime.date.today(), %Y-%m-%d ) 2018-07-30 1 2 3 4 5 a = datetime.date.today() a datetime.date(2018, 7, 30) a.strftime( %Y-%m-%d ) 2018-07-30 datetime.date.timetuple() \uff1a\u8fd4\u56de\u65e5\u671f\u5bf9\u5e94\u7684time.struct_time\u5bf9\u8c61 ``` a = datetime.date.today() datetime.date.timetuple(a) time.struct_time(tm_year=2018, tm_mon=7, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=211, tm_isdst=-1) 1 - **datetime.date.weekday()**\uff1a\u8fd4\u56de\u65e5\u671f\u7684\u661f\u671f a = datetime.date.today() datetime.date.weekday(a) 0 a.weekday() 0 ``` datetime.time\u7c7b time\u7c7b\u67095\u4e2a\u53c2\u6570\uff0cdatetime.time(hour,minute,second,microsecond,tzoninfo),\u8fd4\u56de08:29:30 datetime.time.replace() 1 2 datetime.time.replace(datetime.time(), hour=1) datetime.time(1, 0) datetime.time.strftime(format) :\u6309\u7167format\u683c\u5f0f\u8fd4\u56de\u65f6\u95f4 1 2 datetime.time.strftime(datetime.time(2,3), %H:%M ) 02:03 datetime.time.tzname() \uff1a\u8fd4\u56de\u65f6\u533a\u540d\u5b57 datetime.time.utcoffset() \uff1a\u8fd4\u56de\u65f6\u533a\u7684\u65f6\u95f4\u504f\u79fb\u91cf datetime.datetime\u7c7b datetime\u7c7b\u6709\u5f88\u591a\u53c2\u6570\uff0cdatetime(year, month, day[, hour[, minute[, second[,microsecond[,tzinfo]]]]])\uff0c\u8fd4\u56de\u5e74\u6708\u65e5\uff0c\u65f6\u5206\u79d2 datetime.datetime.ctime() datetime.datetime.now().date() \uff1a\u8fd4\u56de\u5f53\u524d\u65e5\u671f\u65f6\u95f4\u7684\u65e5\u671f\u90e8\u5206 datetime.datetime.now().time() \uff1a\u8fd4\u56de\u5f53\u524d\u65e5\u671f\u65f6\u95f4\u7684\u65f6\u95f4\u90e8\u5206 datetime.datetime.fromtimestamp() datetime.datetime.now() \uff1a\u8fd4\u56de\u5f53\u524d\u7cfb\u7edf\u65f6\u95f4 datetime.datetime.replace() datetime.datetime.strftime() \uff1a\u7531\u65e5\u671f\u683c\u5f0f\u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32\u683c\u5f0f 1 2 datetime.datetime.now().strftime( %b-%d-%Y %H:%M:%S ) Apr-16-2017 21:01:35 datetime.datetime.strptime() :\u7531\u5b57\u7b26\u4e32\u683c\u5f0f\u8f6c\u5316\u4e3a\u65e5\u671f\u683c\u5f0f 1 2 datetime.datetime.strptime( Apr-16-2017 21:01:35 , %b-%d-%Y %H:%M:%S ) 2017-04-16 21:01:35 datetime.timedelta\u7c7b datetime.datetime.timedelta\u7528\u4e8e\u8ba1\u7b97\u4e24\u4e2a\u65e5\u671f\u4e4b\u95f4\u7684\u5dee\u503c\uff0c\u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 a=datetime.datetime.now() b=datetime.datetime.now() a datetime.datetime(2017, 4, 16, 21, 21, 20, 871000) b datetime.datetime(2017, 4, 16, 21, 21, 29, 603000) b-a datetime.timedelta(0, 8, 732000) (b-a).seconds 8 \u6216\u8005 1 2 3 4 5 6 7 time1 = datetime.datetime(2016, 10, 20) time2 = datetime.datetime(2015, 11, 2) \u8ba1\u7b97\u5929\u6570\u5dee\u503c print(time1-time2).days \u8ba1\u7b97\u4e24\u4e2a\u65e5\u671f\u4e4b\u95f4\u76f8\u9694\u7684\u79d2\u6570 print (time1-time2).total_seconds()","title":"16. datetime"},{"location":"others/daily_problem/#17-could-not-install-packages-due-to-an-environmenterror-errno-13-permission-denied-librarypython27site-packagesvine","text":"1 pip install --user flask \u5728install\u540e\u52a0 --user","title":"17. \u9488\u5bf9\u201ccould not install packages due to an EnvironmentError: [Errno 13] Permission denied: '/Library/Python/2.7/site-packages/vine'\u201d\u7684\u89e3\u51b3\u65b9\u5f0f"},{"location":"others/daily_problem/#18-xml","text":"v2.7 dicttoxml\u4f1a\u81ea\u52a8\u5728\u5934\u90e8\u6dfb\u52a0 ?xml version=\"1.0\" encoding=\"UTF-8\" ? \u5e76\u901a\u8fc7\u53c2\u6570\u8bbe\u7f6exml\u7684\u5c5e\u6027 1 2 import dicttoxml dicttoxml.dicttoxml(self.post_data_dict, root=True, custom_root= request , attr_type=False)","title":"18. \u5b57\u5178\u8f6cxml"},{"location":"others/daily_problem/#19-orand","text":"\u5982\u679c\u7528or\uff0c\u5e94\u8be5\u628a\u4e3atrue\u7684\u5199\u5728or\u524d\uff0c\u51cf\u5c0f\u8fd0\u7b97\u65f6\u95f4\uff1b \u5982\u679c\u7528and\uff0c\u5e94\u8be5\u628afalse\u7684\u5199\u5728and\u524d","title":"19. or\u548cand"},{"location":"others/daily_problem/#20-xmltodict","text":"\u5982\u679cxml\u4e2d\u5728\u540c\u4e00\u7ea7\u6709\u76f8\u540c\u5143\u7d20\uff0c\u5c31\u4f1a\u628a\u76f8\u540c\u5143\u7d20\u53d8\u6210\u5217\u8868\uff1b\u5982\u679c\u6ca1\u6709\u76f8\u540c\u5143\u7d20\uff0c\u90a3\u4e48\u5c31\u628a\u8be5\u5143\u7d20\u53d8\u4e3a\u5b57\u5178 \u5bf9\u4e8exml\u4e2d\u4e3a\u7a7a\u7684\u60c5\u51b5\uff0cxmltodict\u4f1a\u81ea\u52a8\u5c06\u503c\u53d8\u4e3a None","title":"20. xmltodict\u7684\u5751"},{"location":"others/daily_problem/#21-if-else","text":"\u53ea\u6709if 1 [a for a in a_list if a==1] - if-else 1 [a if a==1 else a-1 for a in a_list]","title":"21. \u5217\u8868\u751f\u6210\u5f0f\u4e2d\u7684if-else"},{"location":"others/daily_problem/#22-mysql-said-authentication-plugin-caching_sha2_password-cannot-be-loaded-dlopenusrlocal","text":"\u5728\u4f7f\u7528MySQL Workbench\u8fde\u63a5\u672c\u5730\u6570\u636e\u5e93\u7684\u65f6\u5019\uff0c\u51fa\u73b0\u4e86 1 MySQL said: Authentication plugin caching_sha2_password cannot be loaded: dlopen(/usr/local/lib/plugin/caching_sha2_password.so, 2): image not found \u8fd9\u662f\u56e0\u4e3a\u5728\u94fe\u63a5\u6570\u636e\u5e93\u65f6\u4e0d\u80fd\u52a0\u8f7d\u2018caching_sha2_password'\u8fd9\u4e2a\u63d2\u4ef6\uff0c\u4e5f\u5c31\u662f\u4e0d\u80fd\u5bf9\u8eab\u4efd\u9a8c\u8bc1\u3002 \u89e3\u51b3\u65b9\u6848\u662f\uff1a 1. \u6253\u5f00\u7cfb\u7edf\u504f\u597d\u8bbe\u7f6e\uff0c\u627e\u5230mysql\uff0c\u70b9\u51fbInitialize Database\u3002 2. \u8f93\u5165\u4f60\u7684\u65b0\u5bc6\u7801\uff0c\u8bb0\u4f4f\u8fd9\u4e2a\u5bc6\u7801\uff0c\u7528\u4e8e\u540e\u671f\u94fe\u63a5\u6570\u636e\u5e93\u7684\u767b\u9646\u4f7f\u7528\u3002 3. \u9009\u62e9\u2018Use legacy password\u2018\u3002 4. \u91cd\u542fmysql\u670d\u52a1\u3002 \u8fd9\u6837\u5728\u8fde\u63a5\u5c31\u6ca1\u6709\u95ee\u9898\u4e86","title":"22. \u9488\u5bf9MySQL said: Authentication plugin 'caching_sha2_password' cannot be loaded: dlopen(/usr/local/...\u7684\u95ee\u9898"},{"location":"others/daily_problem/#23-django-model","text":"1 comment_list = Comment.objects.all()[:5].only( post , text ) # \u53ea\u83b7\u53d6\u7279\u5b9a\u5b57\u6bb5","title":"23. django model\u83b7\u53d6\u7279\u5b9a\u5b57\u6bb5"},{"location":"others/daily_problem/#24-connection-reset-by-peer","text":"Connection reset by peer: socket write error\u9519\u8bef\u5206\u6790\uff1a \u5e38\u51fa\u73b0\u7684Connection reset by peer: \u539f\u56e0\u53ef\u80fd\u662f\u591a\u65b9\u9762\u7684\uff0c\u4e0d\u8fc7\u66f4\u5e38\u89c1\u7684\u539f\u56e0\u662f\uff1a \u2460\uff1a\u670d\u52a1\u5668\u7684\u5e76\u53d1\u8fde\u63a5\u6570\u8d85\u8fc7\u4e86\u5176\u627f\u8f7d\u91cf\uff0c\u670d\u52a1\u5668\u4f1a\u5c06\u5176\u4e2d\u4e00\u4e9b\u8fde\u63a5Down\u6389\uff1b \u2461\uff1a\u5ba2\u6237\u5173\u6389\u4e86\u6d4f\u89c8\u5668\uff0c\u800c\u670d\u52a1\u5668\u8fd8\u5728\u7ed9\u5ba2\u6237\u7aef\u53d1\u9001\u6570\u636e\uff1b \u2462\uff1a\u6d4f\u89c8\u5668\u7aef\u6309\u4e86Stop \u901a\u5e38\u539f\u56e0\u4e3a\uff1a\u8fdc\u7a0b\u4e3b\u673a\u4e0a\u5bf9\u7b49\u65b9\u5e94\u7528\u7a0b\u5e8f\u7a81\u7136\u505c\u6b62\u8fd0\u884c\uff0c\u6216\u8fdc\u7a0b\u4e3b\u673a\u91cd\u65b0\u542f\u52a8\uff0c\u6216\u8fdc\u7a0b\u4e3b\u673a\u5728\u8fdc\u7a0b\u65b9\u5957\u63a5\u5b57\u4e0a\u4f7f\u7528\u4e86\u201c\u5f3a\u5236\u201d\u5173\u95ed \uff08\u53c2\u89c1setsockopt(SO_LINGER)\uff09\u3002\u53e6\u5916\uff0c\u5728\u4e00\u4e2a\u6216\u591a\u4e2a\u64cd\u4f5c\u6b63\u5728\u8fdb\u884c\u65f6\uff0c\u5982\u679c\u8fde\u63a5\u56e0\u201ckeep-alive\u201d\u6d3b\u52a8\u68c0\u6d4b\u5230\u4e00\u4e2a\u5931\u8d25\u800c\u4e2d \u65ad\uff0c\u4e5f\u53ef\u80fd\u5bfc\u81f4\u6b64\u9519\u8bef\u3002\u6b64\u65f6\uff0c\u6b63\u5728\u8fdb\u884c\u7684\u64cd\u4f5c\u4ee5\u9519\u8bef\u7801WSAENETRESET\u5931\u8d25\u8fd4\u56de\uff0c\u540e\u7eed\u64cd\u4f5c\u5c06\u5931\u8d25\u8fd4\u56de\u9519\u8bef\u7801WSAECONNRESET\u3002 \u4f46\u662f\u5982\u679c\u9891\u7e41\u51fa\u73b0\uff0c\u5c31\u8868\u793a\u5f88 \u591a\u5ba2\u6237\u7aef\u8fde\u63a5\u5230Apache\u670d\u52a1\u5668\u7684\u54cd\u5e94\u65f6\u95f4\u592a\u957f\u4e86\uff0c\u53ef\u80fd\u662f\u7f51\u7edc\u7684\u95ee\u9898\u6216\u8005\u670d\u52a1\u5668\u6027\u80fd\u95ee\u9898\u3002","title":"24. Connection reset by peer\u7684\u5e38\u89c1\u539f\u56e0"}]}